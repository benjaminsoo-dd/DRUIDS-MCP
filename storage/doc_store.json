{"docstore/metadata":{"Modal_content":{"docHash":"1MW3RHbsiBKzEQJgQqUsQxAy310vnOvnHMs/ioBzbvQ="},"Popover_content":{"docHash":"HM7VHb5N8NSjOsawZ79aPkWRNZB+Hd7KVjYZCjEVxdI="},"Tooltip_content":{"docHash":"kc07yOf/kKQ+3z5fHouLY0SrkntjkSkm0Tv+zEVKWNM="},"Action_content":{"docHash":"FVwuFaIwGayj3W27FxWUTTzhyOWfnBSy96egGngcdmk="},"Button_content":{"docHash":"9tQpnP+U7ceHhavcKnu7j0snJug+NWBGkmwK6kEPUmg="},"InputText_content":{"docHash":"srV7a5aoyz700qmmteIudYLjnf0/7BUcylitbZNwGko="},"Select_content":{"docHash":"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA="},"ToggleButtons_content":{"docHash":"O5/5sA8cTi/96GgNl10rNvaPbch7AnlYnVKchO5T7j8="},"ToggleSwitch_content":{"docHash":"+bmIc1vs9KsAquSU5wt9U1S4VhPCmS5KIF/72rriU+E="},"Accordion_content":{"docHash":"BGUC0j6qFS5ENMbhoaWodkU//oApuLqKbWnqV1SJ7/A="},"Flex_content":{"docHash":"k4TQqhmwe+fRFMnMmJQVdBqeZOko/ktRi6AUjWpj/9s="},"FlexItem_content":{"docHash":"j8Dv5e7bSbg6JmOmChcuDMQVjBFvVXKU35a9CnxDfrY="},"Grid_content":{"docHash":"ogvdEfjRKEkD3vPJOlGGFNJ28yknpBxb6QthkmGkVGU="},"Overflower_content":{"docHash":"vQwPeYFNw+2vVbMTZCdnThfZWAuuDkBTKk1kvwtItGs="},"Panel_content":{"docHash":"LGy3hQJAkkvZRRUnzii2zWZ8eKddi0EhP7vhGE1t8eQ="},"Spacing_content":{"docHash":"rLdv51HK1uJeXpMrRFwWWbmeIPhpitG7VO4JiNWTS/I="},"IntegrationLogo_content":{"docHash":"uTCg0VBQDHkR1AVgyD2gY3b4dfQvo5nmFG3g/YGf2wQ="},"MessageBox_content":{"docHash":"M4d+u0sGMwYlhoHFBxY1P0Yo1V4yF/LQM2qaFG/cN0Y="},"Link_content":{"docHash":"s+CMNThn8TNm5lzLJ6oPOc/RElTb+QwhDRaqMK/U+U8="},"TabList_content":{"docHash":"r7iptiMKtSBYUxcUovzydYw4T3DacvXHlhhylpgs/ho="},"Badge_content":{"docHash":"WBqSdVUwCVgwSpqxIvLIoMgNW8Ey1OlMldIJXf8U0wQ="},"StatusPill_content":{"docHash":"GXFXJzHQw6NVj6s+s1jGYnUX8IPAVgjxKhlPPTtLN3E="},"Table_content":{"docHash":"1jRpi9jmZSXorsbJz5+BvI7efqx3gMvbOPL82FmUG0Y="},"Code_content":{"docHash":"LzgMi0fMoueq9TDKxolsJv7LOwUhJT1ClNinkCVYZic="},"Text_content":{"docHash":"sGNCW3BLmpv/BY2bvVrtXEAw869LuZwu0t7FkNvwRU4="},"about-druids_content":{"docHash":"j+XjnAhbcKQBDcHVs+P7pp5P673me6Fvg+kPUqcDxM8="},"PageSpacingAndLayout_content":{"docHash":"zzg3Rxfuk6UwPbBj/l18rOLsuCH7/RnXbjDTVXDQANk="},"PageTypography_content":{"docHash":"ArF19crMwqHJMqs0V0OgDCa9SRi+f/e8bVL3OLUdqy4="},"page-high-level-design-themes_content":{"docHash":"50nIn0wSYRjyZp5hVutKpYCjn5THUIY83P7CkV3mMpM="},"PageDruidsPhilosophy_content":{"docHash":"MtweqaMIsdiyeaWpFg3574HcNH0VUXTAN3/C7C+sgCc="},"tips-and-tricks_content":{"docHash":"qV9dhN/XxhSqyRV24ecbit8sBH9Jq8gPOb8NTaHb4s0="},"54c43dd4-cb93-4ee3-b67e-73d408aef864":{"docHash":"ST5gMe0sEAirWol82hHk8bHmQZsS76b49Wur9PKaVdY=","refDocId":"Modal_content"},"93c0500b-e12b-478b-b34d-e3d0921d0852":{"docHash":"7mMDNqhCeV9z+ADAXPYIiWueVOVdJbwHMyFuOKE7Y8w=","refDocId":"Modal_content"},"8711fd85-27af-4177-87dd-86b53b08d81d":{"docHash":"qAOTyYago2LT3YGCi/22Vg3785LuxHfdvpS1cN4G8v8=","refDocId":"Popover_content"},"0c9ceb23-d80f-43f9-8ea1-804cf1622187":{"docHash":"cgG+PUL8kAUOe6tKlcRV4i+HYz0w2y9c5+xrEajp8Gw=","refDocId":"Popover_content"},"cc3ba501-0f62-45e0-888d-9a864b477cf0":{"docHash":"4o4pNmaJb4KYUbA/PPaXahHmR58BtzuRhhh6xFzsq0M=","refDocId":"Popover_content"},"09b01219-3179-468d-bfb9-d90f3f9ba752":{"docHash":"YKPzyV6TuiLPtmEFNLq2Tdm9/x4VOkC7pPaEPAVZsQo=","refDocId":"Popover_content"},"128a2eb2-e443-49a8-ae52-85c9175eede1":{"docHash":"muP+OKRREVpZ9EuFgxojIfXD6vc1gvu1yal0BIwmokw=","refDocId":"Popover_content"},"3a064d6d-2f99-4640-a32a-c1e5dd9c58a7":{"docHash":"0fbf6G5EyUzcMtYxqY30TPlGegngqU4ZFVxld75lJdk=","refDocId":"Tooltip_content"},"261d0879-8125-46a5-a641-c8a3181b962f":{"docHash":"+VkKyeE5B4vtlYcfR5EZtgdEjKXquaiEUVVqVoJDtAE=","refDocId":"Tooltip_content"},"3c23811b-ddcc-49b8-87f3-76a9b8df959c":{"docHash":"bWaSmfVMAjCxRIy2u16rVH8NDz5gqTtBYbGzaTcZGFM=","refDocId":"Tooltip_content"},"c03c9bda-181c-4b7c-ac05-fc422493bf91":{"docHash":"n6zJrOzc4jlwakPP6cahE9r+cdp4b6LTjGXdM+UAA0w=","refDocId":"Tooltip_content"},"18b3eef8-6f87-4bec-9d08-0e731aaa3331":{"docHash":"kPWpLWhFHOWsI5sxtPGdp7N23bmS057RKy29JOiT3U4=","refDocId":"Action_content"},"a3f19c9e-5a64-4bbc-a2f9-f9400793fc70":{"docHash":"xfl19d37lre+5Z+fh4ByHuhqY24sL7nzRva2iVlHAr4=","refDocId":"Button_content"},"2a0ff4dd-c23d-4512-9340-e43e56cbb2e7":{"docHash":"7I9KTphWk6TjuWp4TJ1o1xSX4wkPwsECoYQDtptDIsU=","refDocId":"Button_content"},"ae361ef7-9d65-486e-9a11-3eb3c564dfd7":{"docHash":"OIdrkYEK1fVUbtxJdIfGn5vvEZzHCl/If3f7lo/KzOw=","refDocId":"Button_content"},"941875d2-896e-4681-98ae-73c9071197c8":{"docHash":"NvXgUJMIkQyn0PYVnBh1q3uxiEu5S9VdKG6YgilBMYg=","refDocId":"Button_content"},"4ec3cf3c-0d64-4579-82b8-f1bfe69aebb4":{"docHash":"cCZ/iPsOFLD7Hvx2bceLAg3pWxTLybrMAPyzhQhMs9I=","refDocId":"InputText_content"},"1543e38d-1757-4a66-9bfe-addb2dfa17cb":{"docHash":"lsIYJBeX4OTjeQ+w1BYew3SDrXvXBw/zO/L4d8e1kWE=","refDocId":"InputText_content"},"6a325474-ca38-48a5-bed5-2b6e72259b0f":{"docHash":"vpgnUnWtzxlzNMMeKsH4v/CNalnrTMQa67xZhp0ahMU=","refDocId":"Select_content"},"e5b3c733-2e3b-42e3-a0c7-ba102f049d26":{"docHash":"XZznYbcGjQZbpW342TGF7C4vRxHmdbf6zO/bljtwY5I=","refDocId":"Select_content"},"a10ce6dc-e0af-487a-8457-8944a6a21825":{"docHash":"Nth/PrMAMmLCkU4BIfIau4GCVD8w+ar8r6Vdb05Dy+U=","refDocId":"Select_content"},"2fb7972f-e0d3-4e33-b992-372952df59d5":{"docHash":"BJ1xytzKSWYTPeU2ARpO8E6Y8JmrW+giagFDXNm7LtA=","refDocId":"Select_content"},"86140811-e54c-4c84-8a8f-556154e11bf1":{"docHash":"jJlC4TZfZTJcydyW1Qpj8cWVLi9TdFH/ggd2T6OgRvw=","refDocId":"Select_content"},"13530523-499b-405f-862f-2628dbae399a":{"docHash":"IOvbPOAcj7hhVcchtRO4bgGSqc/f1qgcN+MnOHVkN78=","refDocId":"Select_content"},"fca08a53-b863-4f3b-9638-b37027d87ff7":{"docHash":"Ke4ihb3rT/vuQF3+D3WwHxSSdCXjtVXJa/URHtAkhKw=","refDocId":"ToggleButtons_content"},"09aa3920-ad88-42a3-a2ea-df0086582cb8":{"docHash":"df9xRchR8ZK+6/pWO3GsP5NfIpw4mTiLzm5f1WvyjrA=","refDocId":"ToggleButtons_content"},"7131059c-35b4-487b-80e0-bbcaf785280b":{"docHash":"k2JFx0+W9D7+mBaHqDWLKGIFr4Wo24AXEf6HpwMln6o=","refDocId":"ToggleSwitch_content"},"f8728be8-cbdf-4ecf-9282-e9d334ad6aa2":{"docHash":"rmVzVDH8WSU6GZ7yf1WjZ6P2m50xDDcTvFBjdmDNB/o=","refDocId":"Accordion_content"},"9ead765f-d722-4c0c-b304-cd97040c05a6":{"docHash":"ADttg/6Xahs/P5S6rGtwcuBn1qbL7+G5Vv4sBKB35BM=","refDocId":"Accordion_content"},"88d50db3-44e3-4a4b-b95e-561edaee4c15":{"docHash":"emRv+7Op0AJVij7fcWbbvf8y7nHf2F/hXw/29kpq6AQ=","refDocId":"Flex_content"},"633beb0d-74c7-4cab-8265-00b2a5092733":{"docHash":"b9d0hbAfj/sYgQ7SRmBnSKRH4RdzlYGMaJw/JFDZxK4=","refDocId":"Flex_content"},"d6572d5b-39fd-484f-a3bb-a06490ad5e1d":{"docHash":"hs3JhpJ2NmB9e/sXD0cXujZGW11Rvyrihj2FrfDg5EI=","refDocId":"FlexItem_content"},"7bbb3add-4415-48bb-9928-d54865ed5119":{"docHash":"1vUqkBE2L2L+wGckxOL4SXJ2iCylnBfcAOXPMLMiIaM=","refDocId":"Grid_content"},"19e8982a-9e11-4d32-8e15-82bfcffa2151":{"docHash":"KcIez+rQFGQS312J69rrWJDjuCYeLfcnGS7r/uv56Bw=","refDocId":"Grid_content"},"9dd5ba3d-f9c4-4794-9be2-6b76f5e303f1":{"docHash":"JPNmpdovszLdssLdEuhotNvmnQSS8aktVcQdZNRa9ks=","refDocId":"Overflower_content"},"06a78940-f5d4-4204-9a42-1d49e77d4f36":{"docHash":"tkpGQPt9RgEhgI1EKQwQ2yh5+aBmFHZESQuVyRKBEW4=","refDocId":"Overflower_content"},"7f2c8212-b99f-4201-9e1b-2e88ac12bd34":{"docHash":"xIIrOdVvQ5b32efAjrnD6GTaP6AoLHoLPJb3KdS9PK8=","refDocId":"Panel_content"},"c3ee8538-7879-4b0c-88ae-a08b5193ac4d":{"docHash":"mAJpH50Jy4m/qqhx573kliudNhL+jITfblz69tvzbxk=","refDocId":"Spacing_content"},"b8f5e049-bf7c-4cea-a121-9b3aa186b120":{"docHash":"Zj4Ys3KmWM+NAj3PtXC2SPBkGA+Wa6KqK1j9bLeAqpg=","refDocId":"Spacing_content"},"8bd64ff6-65f1-48f5-8eba-85d813dfcf11":{"docHash":"W2A6W4x8+g7+u4OW9EqM35nblFNF5KID3B4MK4CL9Rg=","refDocId":"IntegrationLogo_content"},"e49bdb9b-d4b1-49ee-a429-1d9dba7ef638":{"docHash":"KmHlQcVRZwn3K+GK/P3YzLwmUo7ZNFOC0CjR1qUyJ9s=","refDocId":"IntegrationLogo_content"},"618132e4-8f08-40fe-81e1-c8f5712bf928":{"docHash":"eoxFiPk1WaxbjZc7O0zpFoPGdqGJ0TJKSLi3JuRCCbU=","refDocId":"IntegrationLogo_content"},"5f8e4ca2-f7f2-4ae5-9808-9cc8aa632165":{"docHash":"0DCu5jesz8gPsuaGeXnHsAjc5xxwgLXEbJ4Z32V2L94=","refDocId":"IntegrationLogo_content"},"c762a62b-f8f5-44e9-845a-b34377cd66f4":{"docHash":"j8B/vOGa2lKKssdmB7ffX94Jitc5nodMrmQ6jhM7Qkg=","refDocId":"IntegrationLogo_content"},"e4de163e-76db-4121-9b48-2237aa5678bc":{"docHash":"u3Usfg97X7re0H+c2aqSU7CcvUDeUTwNOBbdohaXaLY=","refDocId":"MessageBox_content"},"25252888-8e28-45d8-8a3b-ad1a5258218b":{"docHash":"od8oiZ3wv0xI1zPA5x++4NFKEE2NuIlY7ZG5TLQzqks=","refDocId":"Link_content"},"c6755457-80e7-462f-8cf9-7cdbd821d221":{"docHash":"bRnEvJPYhJX2ZHn+ezYU1IV9/kQbBy+j280r7xhC21o=","refDocId":"Link_content"},"ac8d1662-a882-4332-85a6-45c85ffa9f67":{"docHash":"UQKiwDmJZtG+Flb07Yaw1g/7NYozGEELHdY++YYgtrg=","refDocId":"TabList_content"},"1ffc33b5-8173-4102-9298-7d91881a4a51":{"docHash":"kM/cKRckQnhv98BV/5QTrhsL7Th/u8AvWrwmfb+QpII=","refDocId":"TabList_content"},"9b70a1ac-4c22-4c0a-a701-7f3e7b8bd05d":{"docHash":"xC8A6RHNqINjZUFgRczJ5CBBTizc7fXt3XsyIyclAs4=","refDocId":"Badge_content"},"daaadea3-3a03-42c6-8319-1a72177eba35":{"docHash":"anBcqBlarw/9agQjZ8C2EPXPw2fdhbQuqeoUao1XIOw=","refDocId":"Badge_content"},"4be146ef-8932-431b-be2d-bd3d0782dcb5":{"docHash":"klB0lgll+AyqI0CxstvvlKrxXT1vtYCQvRh70QbMNB0=","refDocId":"StatusPill_content"},"d9cf19cb-4c0a-4e6c-a414-ae0e29fe126b":{"docHash":"k3xQBV9Qm/0yHbaPTiuRNyyz0jzAeFbaaifkpRCTFNY=","refDocId":"StatusPill_content"},"0a390851-de64-4884-a94d-1dcddd53815b":{"docHash":"496j5bWqgoFeU8yiH1JdW2zOnmNeEH41jP7s3zRdC7Y=","refDocId":"StatusPill_content"},"f1fea9ea-0d47-4312-93d0-4db90a27c007":{"docHash":"v7LNCwpPM3YcmrZhJveYVcwVWBfl78KucxSqqfwBEqU=","refDocId":"Table_content"},"1dc3bb56-efad-49f4-9131-b7ff4e728e12":{"docHash":"Hc+nIqBtUET6+l8Dt5Vv94dV2H8a58e0IEBKoLJqNNE=","refDocId":"Table_content"},"48d1d0bd-6c5a-4944-a153-b798fdc79af8":{"docHash":"6ztDoc8PI7S5ubl0fZuBOCNCV1hELt/wpVXTc01nyUk=","refDocId":"Code_content"},"0fa965a5-7e53-4358-888c-77c3026207dd":{"docHash":"VwZgkRZG6R6wgTuzFtCKJCTYzElzpURhqHlCe8jZUmI=","refDocId":"Code_content"},"0ae3f01b-e6f9-4e66-a4b5-65fc1f3a75a2":{"docHash":"sKHYLKx9ocLO1XGsgP2YlConJA1KHCbn0bVKznKPKLs=","refDocId":"Code_content"},"792bb702-bf11-43cd-841b-f6610248182f":{"docHash":"MC/7hS/ol7t6U80hwW+sIwtilCwdGR9+SgEnJ8hRBp4=","refDocId":"Text_content"},"c8113c3b-4764-460a-a3a2-32c6195795bf":{"docHash":"BtwbaMRZx61JlbUoratBgoUwpzhc1Op/SFDL54VIHv0=","refDocId":"Text_content"},"71253a24-478d-41f8-b4cd-faf6a3bf94e5":{"docHash":"uD4QTCdtDvZT4lKDtylHMms9m3Ug5J3UvX3zpbdnuoI=","refDocId":"about-druids_content"},"488fc67d-619c-44aa-a973-304961900084":{"docHash":"pr4SvF+k5tyDU+G2DZ08eVV9IMhbJigisXdUcACaYnY=","refDocId":"about-druids_content"},"ecc3d9f1-f8e5-4455-b196-429f6e7336a6":{"docHash":"ExZ1kZGiquPIbwIes35KBKVKSnQ6k0lJbcgDcsimUUQ=","refDocId":"PageSpacingAndLayout_content"},"e8bdd98a-92b6-400a-bd86-a1958a440840":{"docHash":"78gP/qTDtIaLzmqCp6Zgxoow1z8rln9wbn3SztI6Jvw=","refDocId":"PageSpacingAndLayout_content"},"6048a22f-f313-4a35-8cc8-9622b232e63c":{"docHash":"PqlCjyJVWJgbPovQ0UnxF5kQtDJCQ8CcCyb+ywD4ZQQ=","refDocId":"PageTypography_content"},"8a63538d-9315-4545-9317-614fc8475c1d":{"docHash":"onokEqBRt0PhMnFqelMOrlvx7fmRcBQyijLXNPSSEDk=","refDocId":"PageTypography_content"},"367bf16f-809b-4865-a8e4-cdc3ef13857f":{"docHash":"NHWhu/rL2qEp2/i2JbWJjdn4eCs3dkIAZzc6RYUxhM0=","refDocId":"PageTypography_content"},"16488229-9e05-4e43-a3fa-4da80a771b8f":{"docHash":"N6IvsN+3XpxfniejmP0+oecP6puwgVSEiFAu6kwuLME=","refDocId":"PageTypography_content"},"0b5a17b5-f24c-40ae-8d2a-f607b8fddaa2":{"docHash":"eQTwNHGAFZbIDsb8JkX5tsPruq8Yv6i+xVhs9wkAanQ=","refDocId":"page-high-level-design-themes_content"},"8aee335e-de7c-4777-acd0-7a87b6f6d2d4":{"docHash":"AZPigPrW9PvVKVK+bgm4zyoZS3WWPzin6//o+xrXhxI=","refDocId":"PageDruidsPhilosophy_content"},"fa7c1929-a958-4bec-9768-b071861bdf55":{"docHash":"3uP7uXXl/npBUJXAtLU5tXlTFZjh8tsn1en+d4+mwJM=","refDocId":"tips-and-tricks_content"}},"docstore/data":{"Modal_content":{"__data__":"{\"id_\":\"Modal_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Modal\",\"title\":\"Modal\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Modal/modal.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1MW3RHbsiBKzEQJgQqUsQxAy310vnOvnHMs/ioBzbvQ=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Modal } from '@druids/ui/dialogs/Modal'; import { Button } from '@druids/ui/form/Button'; import { Checkbox } from '@druids/ui/form/Checkbox'; import { ToggleButtons } from '@druids/ui/form/ToggleButtons'; import { Spacing } from '@druids/ui/layout/Spacing';  ```jsx partial=\\\"modalContentOptions\\\" isCollapsed isHidden const sizeOptions = ['Expand to Content', 'sm', 'md', 'lg'].map((key) => ({     label: key,     value: key === 'Expand to Content' ? '' : key, }));  const SHORT_TEXT = 'SHORT_TEXT'; const LONG_TEXT = 'LONG_TEXT'; const texts = {     [SHORT_TEXT]: `consectetur cillum cupidatat sed labore ea sit dolor amet, ipsum labore culpa elit, pariatur cillum et nisi adipiscing nostrud qui in eu et ex dolor aute voluptate qui occaecat cupidatat in Duis aute fugiat nisi anim dolor nisi est irure exercitation sit commodo aute eiusmod Duis laboris aliqua ex culpa`,     [LONG_TEXT]: `laboris elit, commodo voluptate deserunt id occaecat eu deserunt dolor nisi Lorem ut nulla eiusmod Lorem ex quis id ex in in ea proident, irure cupidatat ullamco velit magna quis amet, eiusmod fugiat officia enim id in dolore pariatur culpa incididunt consectetur reprehenderit mollit Duis id ex irure voluptate officia magna minim elit, Excepteur nostrud ullamco non adipiscing et aliquip sint est in in ullamco in ex labore fugiat cupidatat nostrud ut in dolore eu consequat ea esse tempor ipsum officia aliqua incididunt minim qui mollit ea elit, dolore nostrud do proident, dolore tempor id sit aute esse irure enim quis sint commodo mollit quis exercitation exercitation Excepteur ut reprehenderit enim occaecat tempor cupidatat qui in ut aliquip aliqua voluptate deserunt dolor sed aute veniam, id nostrud nisi sunt dolore sint sit Duis sed non laborum quis deserunt Lorem labore cillum incididunt pariatur nostrud id culpa aliqua in laborum do cupidatat mollit ex quis occaecat aliquip Lorem anim ut non in sed Lorem reprehenderit velit sed irure consectetur laboris cupidatat voluptate quis magna dolore nulla non minim nisi magna enim sint commodo amet, pariatur aliquip laborum ipsum irure sint proident, ipsum nostrud laborum cupidatat laboris exercitation dolor veniam, elit, amet, magna nisi consequat eiusmod cupidatat aliqua enim et sit culpa laboris veniam, mollit ullamco pariatur non nulla minim deserunt laboris aute irure adipiscing incididunt cupidatat sint mollit commodo Excepteur deserunt nisi in incididunt sit aliquip ea irure qui officia commodo ad anim exercitation voluptate eu exercitation aliquip Excepteur laboris tempor laboris consectetur in cupidatat et officia non id cillum sunt Excepteur ullamco dolore consectetur voluptate culpa sint magna eiusmod ut non consectetur in exercitation amet, consequat eu sit eiusmod commodo ut est Excepteur cillum ea dolor anim reprehenderit consectetur officia dolor occaecat eiusmod proident, magna ad eu magna elit, exercitation do pariatur nostrud Lorem pariatur enim ad eiusmod ea amet, ut irure ipsum est dolor non Ut Ut in et Lorem aliqua dolore ea ullamco nulla velit Lorem commodo laboris sit sed officia nulla ut nostrud ipsum elit, in in est pariatur ea officia eiusmod commodo cillum ut quis ut ad enim id ut Excepteur ut tempor sint dolore sunt nisi sit do elit`, }; const textLengthOptions = [     { label: 'Short Text', value: SHORT_TEXT },     { label: 'Long Text', value: LONG_TEXT }, ]; ```  ### Example  ```jsx withPartials=\\\"modalContentOptions\\\" name=\\\"Example\\\" const [isOpen, setIsOpen] = React.useState(false); const [hasSeparator, setHasSeparator] = React.useState(false); const [isCloseable, setIsCloseable] = React.useState(true); const [isFixedScrollable, setIsFixedScrollable] = React.useState(false); const [isRounded, setIsRounded] = React.useState(false); const [size, setSize] = React.useState(''); const position = useKnob('position', ['top', 'center']); const [mode, setMode] = React.useState(SHORT_TEXT);  return (     <div>         <Button             isPrimary             onClick={() => setIsOpen(!isOpen)}             label=\\\"Toggle Modal\\\"         />         <Modal             title=\\\"Modal Title\\\"             isOpen={isOpen}             onClose={() => setIsOpen(false)}             isCloseable={isCloseable}             hasSeparator={hasSeparator}             isRounded={isRounded}             isFixedScrollable={isFixedScrollable}             size={size}             position={position}             footer={                 <React.Fragment>                     <Spacing marginRight=\\\"sm\\\">                         <Button                             onClick={() => setIsOpen(false)}                             label=\\\"Cancel\\\"                         />                     </Spacing>                     <Button                         isPrimary                         onClick={() => setIsOpen(false)}                         label=\\\"Confirmation Action\\\"                     />                 </React.Fragment>             }         >             <div>                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"isCloseable\\\"                     onChange={() => setIsCloseable(!isCloseable)}                     isChecked={isCloseable}                     marginRight=\\\"md\\\"                 />                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"hasSeparator\\\"                     onChange={() => setHasSeparator(!hasSeparator)}                     isChecked={hasSeparator}                     marginRight=\\\"md\\\"                 />                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"isFixedScrollable\\\"                     onChange={() => setIsFixedScrollable(!isFixedScrollable)}                     isChecked={isFixedScrollable}                     marginRight=\\\"md\\\"                 />                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"isRounded\\\"                     onChange={() => setIsRounded(!isRounded)}                     isChecked={isRounded}                 />             </div>             <div>                 <ToggleButtons                     options={sizeOptions}                     value={size}                     onChange={(size) => setSize(size)}                     isTitleCased={false}                     marginTop=\\\"md\\\"                     marginRight=\\\"md\\\"                 />                 <ToggleButtons                     options={textLengthOptions}                     value={mode}                     onChange={(mode) => setMode(mode)}                     marginTop=\\\"md\\\"                 />             </div>             <Spacing as=\\\"div\\\" marginTop=\\\"md\\\">                 {texts[mode]}             </Spacing>         </Modal>     </div> ); ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Popover_content":{"__data__":"{\"id_\":\"Popover_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"HM7VHb5N8NSjOsawZ79aPkWRNZB+Hd7KVjYZCjEVxdI=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { ControlledPopover } from '@druids/ui/dialogs/Popover/ControlledPopover'; import {     PopoverContext,     useCoordinates, } from '@druids/ui/dialogs/Popover/ControlledPopover/controlled-popover.helpers'; import { usePopoverHandle } from '@druids/ui/dialogs/Popover/popover.helpers'; import { Popover } from '@druids/ui/dialogs/Popover'; import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import { Flex } from '@druids/ui/layout/Flex'; import { NumberedSection } from '@druids/ui/layout/NumberedSection'; import { Text } from '@druids/ui/typography/Text'; import { Panel } from '@druids/ui/layout/Panel';  ### Example  ```jsx name=\\\"Example\\\" <Popover handle={<Button label=\\\"Handle\\\" />} isPadded>     I’m a Popover </Popover> ```  ## Usage  Popover is used to display a floating box that’s positioned _relatively to another element_. The default `placement` is `bottom-start`, which means it appears below the `handle` (triggering element), with its arrow aligned to the front of that element.  > **Warning: Be careful** > If the Popover doesn’t have enough room to appear, it won’t respect the initial placement.  ```jsx width=\\\"328\\\" name=\\\"Usage\\\" const placement = useKnob(     'placement',     [         'auto-start',         'auto',         'auto-end',         'top-start',         'top',         'top-end',         'right-start',         'right',         'right-end',         'bottom-start',         'bottom',         'bottom-end',         'left-start',         'left',         'left-end',     ],     { defaultValue: 'bottom-start' }, );  return (     <Flex justify=\\\"center\\\">         <Popover             handle={<Button label=\\\"Toggle\\\" />}             isPadded             placement={placement}         >             I am a speaking label         </Popover>     </Flex> ); ```  ## Variants  ### Popover content  When a Button is used inside a Popover, it’s still clickable without closing the Popover itself.  ```jsx name=\\\"Popover content\\\" <Popover handle=\\\"Handle\\\" isPadded>     <Button         onClick={() => {             alert('I’m working!');         }}         label=\\\"Test\\\"     /> </Popover> ```  Also, any JSX can be used inside the Popover:  ```jsx <Popover handle=\\\"Toggle 3\\\" isPadded>     <NumberedSection step={1} title=\\\"This is my title\\\">         One     </NumberedSection>     <NumberedSection step={2} title=\\\"This is my second title\\\">         Two     </NumberedSection> </Popover> ```  ### Manual coordinates  Use the `` component directly to open the Popover at a specific place on the screen instead of relative to an element.  ```jsx static import { useCoordinates } from '@druids/ui/dialogs/Popover/ControlledPopover/controlled-popover.helpers'; ```  The best way is to use the `useCoordinates` hook, which returns the `onClick` event that can be used to retrieve the `coordinates` (as well as an `onClose` in case you want to close the Popover manually).  ```jsx width=\\\"300\\\" name=\\\"Manual coordinates\\\" const positionRelativeTo = useKnob(     'The position is relative to:',     ['context', 'window'],     { props: { direction: 'column' } }, ); const { coordinates, onClick, onClose } = useCoordinates({     positionRelativeTo, });  return (     <>         <div             onClick={onClick}             style={{                 width: '100%',                 height: '250px',                 background: 'var(--ui-background-secondary)',             }}         />         <ControlledPopover             isOpen={!!coordinates}             coordinates={coordinates}             onClose={onClose}             isPadded             positionRelativeTo={positionRelativeTo}             isArrowHidden={useKnob('isArrowHidden', true, {                 defaultValue: true,             })}         >             A ControlledPopover that will open next to your click         </ControlledPopover>     </> ); ```  > By default, when the `coordinates` are used, the arrow is hidden. It is possible to still show it by setting `isArrowHidden={false}`.  There is also a `getCoordinatesFromEvent` in the `controlled-popover.helpers` lib, which can be used in places where the hook isn’t available.  ### Using a reference as a handle  If you need to avoid a wrapper for the handle, use a regular Popover with `hasHandleWrapper={false}` and the `handleProps`, which contain `ref` and all the event handlers for the handle in the functional `handle` prop.  ```jsx name=\\\"Using a reference as a handle\\\" <Popover     willCloseOnClick     isPadded     hasHandleWrapper={false}     handle={(isOpen, { ref, ...handleProps }) => (         <Button             isActive={isOpen}             label=\\\"Click me!\\\"             innerRef={ref}             {...handleProps}         />     )} >     A Popover that will not use a wrapper for the handle </Popover> ```  It’s also possible to use an element’s ref as a handle in ControlledPopover.  ```jsx name=\\\"Using a reference as a handle controlled\\\" const [isOpen, setIsOpen] = React.useState(false); const ref = React.useRef(null); return (     <>         <Button             isActive={isOpen}             label=\\\"Click me!\\\"             innerRef={ref}             onClick={() => setIsOpen((prev) => !prev)}         />         <ControlledPopover             willCloseOnClick             handle={ref}             isOpen={isOpen}             onClose={() => setIsOpen(false)}             isPadded         >             A ControlledPopover that will open next to a reference handle         </ControlledPopover>     </> ); ```  Alternatively use the `usePopoverHandle()` hook to completely separate the handle. Pass the returned `handle` from the hook to the `` and pass the `handleRef` and `handleProps` to your element.  ```jsx name=\\\"usePopoverHandle hook\\\" const { isOpen, handle, handleRef, handleProps } = usePopoverHandle(); return (     <>         <Button             isActive={isOpen}             label=\\\"Click me!\\\"             innerRef={handleRef}             {...handleProps}         />         <Popover             willCloseOnClick             isPadded             hasHandleWrapper={false}             handle={handle}         >             A Popover that will not use a wrapper for the handle         </Popover>     </> ); ```  ### Fixed width  ```jsx name=\\\"Fixed width\\\" <Popover handle=\\\"fixed width\\\" width=\\\"200px\\\" isPadded placement=\\\"auto\\\">     <Text>         Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam         elementum velit elit, sit amet tincidunt augue sollicitudin id. Etiam         venenatis velit diam, quis interdum est tincidunt et. Morbi aliquam ex         metus, id posuere est fermentum id. Mauris ornare elementum lorem, nec         accumsan lorem laoreet a.     </Text> </Popover> ```  ### Max width  Whenever you have dynamic content in your popover, it may be useful to set a `max-width` to avoid the popover from becoming too wide.  ```jsx name=\\\"Max width\\\" <Popover handle=\\\"max width\\\" maxWidth=\\\"200px\\\" isPadded placement=\\\"auto\\\">     <Text>         Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam         elementum velit elit, sit amet tincidunt augue sollicitudin id. Etiam         venenatis velit diam, quis interdum est tincidunt et. Morbi aliquam ex         metus, id posuere est fermentum id. Mauris ornare elementum lorem, nec         accumsan lorem laoreet a.     </Text> </Popover> ```  ### Hoverable  ```jsx name=\\\"Hoverable\\\" <Popover handle={<Button label=\\\"Popover on hover\\\" />} isPadded isHoverable>     <Group>         <Button             onClick={() => {                 alert('I’m working!');             }}             isPrimary             label=\\\"Test\\\"         />         <Button             onClick={() => {                 alert('I’m working 1!');             }}             level=\\\"success\\\"             label=\\\"Test 1\\\"         />         <Button             onClick={() => {                 alert('I’m working 2!');             }}             level=\\\"danger\\\"             label=\\\"Test 2\\\"         />     </Group> </Popover> ```  ### Animatable  ```jsx name=\\\"Animatable\\\" <Popover handle={<Button label=\\\"Animated Popover\\\" />} isPadded isAnimated>     <Group>         <Button             onClick={() => {                 alert('I’m working!');             }}             isPrimary             label=\\\"Test\\\"         />         <Button             onClick={() => {                 alert('I’m working 1!');             }}             level=\\\"success\\\"             label=\\\"Test 1\\\"         />         <Button             onClick={() => {                 alert('I’m working 2!');             }}             level=\\\"danger\\\"             label=\\\"Test 2\\\"         />     </Group> </Popover> ```  ### Boundary  Use the `boundary` prop to specify whether the Popover should be viewport- or document-aware.  ```jsx width=\\\"300\\\" name=\\\"Boundary\\\" <Popover     handle={<Button label=\\\"Click on me and scroll\\\" />}     isPadded     boundary={useKnob('boundary')} >     A Popover that will open next to your click </Popover> ```  ### Render context  By default the Popover will render its content at the end of the body in a new element thanks to React portals, in order to avoid having it clipped due to overflow/transform/etc. of the context of the handle.  But sometimes we want to render it in the handle’s context (better keyboard navigation, better event bubbling).  Use the `renderedRelativeTo` prop to use the handle’s context instead of rendering the Popover at the end of the body.  ```jsx name=\\\"Render context\\\" <Popover     handle={         <Button             label=\\\"Click me then resize the playground or press tab\\\"             isTitleCased={false}         />     }     isPadded     renderedRelativeTo={useKnob('renderedRelativeTo')}     placement=\\\"bottom\\\" >     <Button label=\\\"In the popover\\\" /> </Popover> ```  ### Tooltip  Use the `tooltipProps` prop when it’s necessary for a `` to wrap the Popover’s handle. It automatically includes predefined behavior that’s useful in combination with the Popover (like ensuring the Tooltip doesn’t appear when the Popover is visible or having different Tooltip content based on the Popover’s state).  ```jsx name=\\\"Tooltip\\\" <Popover     tooltipProps={{ content: 'Click to open' }}     handle={<Button label=\\\"Toggle\\\" />}     isPadded >     The content of the Popover with a Tooltip </Popover> ```  The Popover with such a Tooltip also provides a `setTooltipOnClose` callback in the `PopoverContext`. It can be used in Popover actions to set the Tooltip that’s shown over the handle after the Popover closes.  ```jsx name=\\\"Tooltip with callback\\\" const ItemWithContext = React.useCallback(() => {     const { setTooltipOnClose } = React.useContext(PopoverContext);     return (         <Button             onClick={() => {                 setTooltipOnClose(                     'You have clicked the Button inside the Popover!',                 );             }}             label=\\\"Button with Tooltip feedback\\\"         />     ); }, []);  return (     <Popover         tooltipProps={{ content: 'Click to open' }}         handle={<Button label=\\\"Toggle\\\" />}         willCloseOnClick         isPadded     >         <ItemWithContext />     </Popover> ); ```  ### Interactions between multiple Popovers  If you opened a Popover and then click outside or open a new Popover, the previous one closes automatically by default.  Set the `shouldCloseOtherPopoversOnOpen={false}` to disable this behavior (e.g., when using a Popover with `isHoverable`).  ```jsx name=\\\"Interactions between multiple Popovers\\\" <Group>     <Popover         handle={             <Button                 label=\\\"Click me, then hover the other one\\\"                 isTitleCased={false}             />         }         isPadded         placement=\\\"top\\\"     >         Hello, it’s me!     </Popover>     <Popover         handle={<Button label=\\\"Don’t click on me!\\\" isTitleCased={false} />}         isPadded         placement=\\\"top\\\"         isHoverable         shouldCloseOtherPopoversOnOpen={false}     >         Hi 👋     </Popover> </Group> ```  You also can set `doesListenToOtherPopovers={false}` to tell a Popover not to close when other Popovers are opened.  ```jsx name=\\\"Interactions between multiple Popovers 2\\\" <Group>     <Popover         handle={             <Button                 label=\\\"Click me, then hover the other one\\\"                 isTitleCased={false}             />         }         isPadded         placement=\\\"top\\\"         doesListenToOtherPopovers={false}     >         Hello, it’s me!     </Popover>     <Popover         handle={<Button label=\\\"Don’t click on me!\\\" isTitleCased={false} />}         isPadded         placement=\\\"top\\\"         isHoverable     >         Hi 👋     </Popover> </Group> ```  ### Overflow behavior  Sometimes Popover content can be huge and can risk pushing part of the Popover itself outside the viewport.  Use the `doesStickToEdges` prop to keep its content fully in the viewport and force the Popover to stick to the edges of the viewport and become scrollable.  `doesStickToEdges` can be set to a few values:  -   `inline` (will only stick in the `inline` axis (the x axis)), -   `block` (will only stick in the `block` axis (the y axis)), -   `both` or `true` (will stick to both axes), -   `false` (won’t stick to edges)  ```jsx name=\\\"Overflow behavior\\\" <Popover     handle={<Button label=\\\"Huge Popover\\\" isTitleCased={false} />}     isPadded     placement=\\\"top-start\\\"     doesStickToEdges={useKnob('doesStickToEdges', [         'both',         'inline',         'block',         true,         false,     ])}     width=\\\"200px\\\" >     <Text>         Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim iure sed,         amet dignissimos eligendi repudiandae cum commodi odit ex obcaecati         blanditiis ipsa quo modi numquam tempore, reiciendis sint quam         architecto voluptatibus quia? Animi aut ipsa optio eum doloribus libero         sapiente beatae, adipisci sed nam explicabo unde cupiditate commodi,         nihil magni mollitia perspiciatis assumenda veniam accusamus? Ab         accusantium, mollitia fuga voluptate a aliquam neque est ut facere sint         nam dolor iusto molestiae expedita similique saepe doloremque suscipit         ipsa? Laboriosam assumenda nesciunt nobis aperiam aspernatur at         voluptatum alias ex sequi, minima voluptas suscipit minus neque?         Consequatur beatae cum, assumenda eos quia, voluptatibus odio fuga ab         ipsam voluptates quas architecto tenetur maiores hic, necessitatibus a.         Quas perferendis doloremque voluptatum odio excepturi blanditiis magni         eius atque, molestias rerum laboriosam minima consectetur consequatur         obcaecati optio neque accusantium voluptates nulla doloribus in         praesentium labore quae tenetur. Consequatur recusandae vitae dolor in         consectetur, totam eaque id adipisci est facilis placeat pariatur libero         reiciendis repellendus error, odit illum illo! Vero exercitationem         sapiente sunt voluptatibus suscipit perferendis nisi dicta. Praesentium,         iusto quas. Cum, et sint? Sit autem sunt laborum beatae minima ad?         Doloribus minus, quidem ducimus ut error nisi voluptatem doloremque         nobis eligendi? Tenetur facilis error cupiditate quidem soluta.     </Text> </Popover> ```  The Popover will try to stay inside the viewport. But if the handle scrolls away, and the Popover is no longer touching it (or \\\"tethered\\\" to it), the Popover will follow outside of the viewport. Set `isTethered` to `false` to keep the Popover inside the viewport, even when it is now longer touching the handle.  ```jsx name=\\\"Overflow behavior 2\\\" <Popover     handle={<Button label=\\\"Untethered Popover\\\" isTitleCased={false} />}     isPadded     placement=\\\"right-start\\\"     doesStickToEdges     isTethered={false} >     <Text>         Scroll the page until the button disapears. This Popover will stay in         the viewport.     </Text> </Popover> ```  ### Hidden handle  As the popover will follow the handle’s position, the handle has to have a physical size. Which means that you **cannot use** `display: none` on it (or on its parents), otherwise the popover will jump to (0, 0).  ```jsx name=\\\"Wrong behavior when hidden\\\" const [isHidden, setIsHidden] = React.useState(false);  return (     <div style={{ display: isHidden ? 'none' : undefined }}>         <Popover             handle={<Button label=\\\"Toggle popover\\\" />}             isPadded             onClose={() => setIsHidden(false)}         >             <Button label=\\\"Hide handle\\\" onClick={() => setIsHidden(true)} />         </Popover>     </div> ); ```  There are 2 possible fixes for this:  1. use `visibility: hidden` instead of `display: none` 2. use React event listeners (that follow the VDOM)  The case of React event listeners is for if you want to do something like `:not(:hover) { display: none }`. Instead, you can use `onMouseEnter` / `onMouseLeave` to track the `:hover` event on the whole VDOM and then use those to apply `display: none` if you want to.  ```jsx name=\\\"Fixed behavior with visibility\\\" const [isHidden, setIsHidden] = React.useState(false);  return (     <div style={{ visibility: isHidden ? 'hidden' : undefined }}>         <Popover             handle={<Button label=\\\"Toggle popover\\\" />}             isPadded             onClose={() => setIsHidden(false)}         >             <Button label=\\\"Hide handle\\\" onClick={() => setIsHidden(true)} />         </Popover>     </div> ); ```  ```jsx name=\\\"Fixed behavior with hover\\\" const [isHidden, setIsHidden] = React.useState(true);  return (     <Panel         onMouseEnter={() => setIsHidden(false)}         onMouseLeave={() => setIsHidden(true)}     >         Hover here         <div style={{ display: isHidden ? 'none' : undefined }}>             This popover is visible as long as you hover either on Panel, or on             the popover             <br />             <Popover handle={<Button label=\\\"Toggle popover\\\" />} isPadded>                 I’m a popover             </Popover>         </div>     </Panel> ); ```  ### Offset  The offset prop lets you displace a popover element from its handle element.  > **Info: Use Case** > In `` and ``, when we click the picker button, a popover is displayed, and we adjust the offset of the popover to position it directly above the button, effectively hiding the button.  You can pass an array `[skidding, distance]` to the offset. The first number, `skidding`, displaces the popper along the handle element. The second number, `distance`, represents the distance between the popover and the handle element. If it is a negative number, the popover will overlap the handle element.  For more intuitive explanations, see popper's doc.  ```jsx width=\\\"328\\\" name=\\\"Popover with array offset value\\\" <Popover     offset={[10, 100]}     handle=\\\"Handle\\\"     isPadded     placement={useKnob('placement', ['top', 'right', 'bottom', 'left'])} >     I'm a popover </Popover> ```  You can also pass a function `(options: OffsetOptionType) => [skidding, distance]` for dynamic values.  ```ts type OffsetOptionType = {     popper: Rect;     reference: Rect;     placement: Placement; }; ```  ```jsx jsx width=\\\"328\\\" name=\\\"Popover with function offset value\\\" const placement = useKnob('placement', ['top', 'right', 'bottom', 'left']);  const reference = <Button label=\\\"Toggle\\\" />;  return (     <Flex justify=\\\"center\\\">         <Popover             handle={reference}             isPadded             placement={placement}             offset={({ placement, reference, popper }) => {                 return [0, 20];             }}         >             I'm a popover         </Popover>     </Flex> ); ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Tooltip_content":{"__data__":"{\"id_\":\"Tooltip_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"kc07yOf/kKQ+3z5fHouLY0SrkntjkSkm0Tv+zEVKWNM=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { PopoverButton } from '@druids/ui/dialogs/PopoverButton'; import { Tooltip } from '@druids/ui/dialogs/Tooltip'; import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import { InputText } from '@druids/ui/form/InputText'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { Overflower } from '@druids/ui/layout/Overflower'; import { useLatestRefValue } from '@druids/ui/lib/ref/use-latest-ref-value'; import { Link } from '@druids/ui/nav/Link'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { Table } from '@druids/ui/table/Table'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { List } from '@druids/ui/typography/List'; import { Text } from '@druids/ui/typography/Text'; import { Title } from '@druids/ui/typography/Title';  ### Example  ```jsx isFullWidth <Tooltip content=\\\"Hello, Tooltip, my old friend\\\">     <Button label=\\\"Hover me!\\\" /> </Tooltip> ```  ## Usage  Tooltip is a wrapper around tippy.js-react, so it can be independent and use its own CSS.  ### Omitting a handle wrapper — `reference` prop  We can use a `reference` to an element instead of the `children` if we'd want to have our handle without an extra wrapper:  ```jsx const ref = React.useRef(); return (     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" reference={ref}>         <Button innerRef={ref} label=\\\"hover me\\\" />     </Tooltip> ); ```  ### Separating event targets and positioning with `triggerTarget`  We can use a separate trigger for the Tooltip if we’d want to separate it with the positioning. In the following example, the reference would be used as the target, and the `triggerTarget` prop would handle the trigger, so in the following example we could hover or focus on the input and get the Tooltip being shown over the ``:  ```jsx const buttonRef = React.useRef(); const inputRef = React.useRef(); const inputNode = useLatestRefValue(inputRef); return (     <Group>         <InputText ref={inputRef} placeholder=\\\"Hover me\\\" />         <Tooltip             content=\\\"Don’t forget to press the submit Button!\\\"             reference={buttonRef}             triggerTarget={inputNode}         >             <Button                 innerRef={buttonRef}                 label=\\\"Submit\\\"                 onClick={() => console.log('Thank you for pressing me!')}             />         </Tooltip>     </Group> ); ```  > **Warning** > The `triggerTarget` accepts the nodes themselves, so we cannot pass refs there, and we should use something like `useLatestRefValue` in order to access those nodes and not just `ref.current`, otherwise the target won’t be applied properly.  ### Nested Tooltips  Nested Tooltips should disable the parent one and provide both Tooltips’ contents inside the child:  ```jsx <Tooltip shouldMergeNestedTooltips content=\\\"Foo Tooltip\\\">     <Tooltip>         <Button label=\\\"Foo\\\" />     </Tooltip>{' '}     <Tooltip shouldMergeNestedTooltips content=\\\"Bar Tooltip\\\">         <Tooltip>             <Button label=\\\"Bar\\\" />         </Tooltip>{' '}         <Tooltip content=\\\"Baz Tooltip\\\">             <Button label=\\\"Baz\\\" />         </Tooltip>     </Tooltip> </Tooltip> ```  > When there is a nested Tooltip, the original Tooltip won’t be rendered (to prevent issues like different padding). If you want to _also_ render the original on some other content, wrap the extra content with a propless Tooltip.  Usage example: table headers with Tooltips, but also with ``s. In the `` component, each column header has an Overflower out of the box, and the Tooltips easily can be added via a `tooltip` column option:  ```jsx width=\\\"300\\\" <Table     columns={React.useMemo(         () => [             {                 accessor: 'foo',                 Header: 'Short header',                 tooltip: 'A Tooltip for the first column',             },             {                 accessor: 'bar',                 Header: 'A very long column header that would overflow',                 tooltip: 'A Tooltip for the second column',             },         ],         [],     )}     data={React.useMemo(() => [{ foo: '1', bar: '2' }], [])} /> ```  ## Dos & Don’ts  -   **Do**      use a Tooltip to display a short piece of info that enhances user understanding (reinforcing what will happen on click, providing additional info about the context, etc.). Make sure it’s supplemental — not essential — information.  -   **Don’t**      use a Tooltip as the only way a user can understand the context. For example, if an icon-only `` requires a Tooltip to be understood, the Button probably needs a `label`.  -   **Do**               <PopoverButton             label=\\\"Hover me\\\"             icon={null}             isHoverable             isBorderless={false}             isDangerouslyNaked={false}             isPadded             width={360}         >                              Suggested next steps                                                                Viewing Related Metrics for{' '}                     command:kafka.kafka may help in                     understanding potential changes in app-specific                     characteristics for this workload’s processes.                                                       Viewing command:kafka.kafka{' '}                     processes in Live Processes may provide further insight into                     the current or historical state of the workload.                                                       Enabling continuous profiling for these processes may help                     investigate potential CPU issues.                                                       If the workload continues to experience CPU conditions                     highlighted by Watchdog, it may be necessary to scale up or                     scale out the workload to accommodate for the increase in                     load.                                                  use a `` instead of a Tooltip for multiple sentences, paragraphs, or lists.  -   **Don’t**               <Tooltip             content={                 <>                     <Title                         as=\\\"h4\\\"                         size=\\\"lg\\\"                         variant=\\\"knockout\\\"                         marginTop=\\\"xs\\\"                         marginLeft=\\\"xs\\\"                     >                         Suggested next steps                                                                                                Viewing Related Metrics for{' '}                             command:kafka.kafka may                             help in understanding potential changes in                             app-specific characteristics for this workload’s                             processes.                                                                               Viewing command:kafka.kafka{' '}                             processes in Live Processes may provide further                             insight into the current or historical state of the                             workload.                                                                               Enabling continuous profiling for these processes                             may help investigate potential CPU issues.                                                                               If the workload continues to experience CPU                             conditions highlighted by Watchdog, it may be                             necessary to scale up or scale out the workload to                             accommodate for the increase in load.                                                                            }         >                                 use a Tooltip for multiple sentences, paragraphs, or lists.  -   **Do**               <PopoverButton             label=\\\"Hover me\\\"             icon={null}             isHoverable             isBorderless={false}             isDangerouslyNaked={false}             isPadded             placement=\\\"top\\\"         >             I’m a link inside a Popover                    use a `` instead of a Tooltip when the content inside needs to be interactive.  -   **Don’t**               <Tooltip             content={                 <>                                              I’m a Link                     {' '}                     inside a Tooltip                              }             isInteractive         >                                 use a Tooltip when the content inside needs to be interactive. Users don’t expect to be able to interact with the Tooltip itself — and links inside Tooltips have extremely low contrast.  -   **Do**               <Table             data={[                 {                     service: 'primary-database',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             5 Alert                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             2 OK                                                                                                                                            }                         >                                                              5 Alert                                                                           ),                 },                 {                     service: 'replica-database',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             3 Warn                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             10 OK                                                                                                                                            }                         >                                                              3 Warn                                                                           ),                 },                 {                     service: 'cache',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             10 Alert                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             1 Warn                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             8 OK                                                                                                                                            }                         >                                                              10 Alert                                                                           ),                 },                 {                     service: 'load-balancer',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             23 OK                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             4 No Data                                                                                                                                            }                         >                                                              23 OK                                                                           ),                 },             ]}             columns={[                 {                     id: 'service',                     Header: 'Service',                     accessor: 'service',                     minWidth: 130,                 },                 {                     id: 'status',                     Header: 'Status',                     accessor: 'status',                     textAlign: 'center',                 },             ]}             style={{ background: 'var(--ui-background)' }}         />           set a short `delay` on the Tooltip when it appears on many elements in close proximity (e.g., in each row of a `` column) — but don’t set a `delay` when it disappears. This lets users mouse around the page without unnecessary disruption or distraction.  ## Variants  ### Placement  While we can suggest the default position via a `placement` prop, if the Tooltip is not in the viewport, it will automatically choose a better placement.  ```jsx isFullWidth <Flex justify=\\\"space-between\\\" wrap=\\\"wrap\\\" gap=\\\"md\\\">     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"left\\\">         <Button label=\\\"left tooltip on hover\\\" />     </Tooltip>     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"top\\\">         <Button label=\\\"top tooltip on hover\\\" />     </Tooltip>     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"bottom\\\">         <Button label=\\\"bottom tooltip on hover\\\" />     </Tooltip>     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"right\\\">         <Button label=\\\"right tooltip on hover\\\" />     </Tooltip> </Flex> ```  ### Animation and delay  A Tooltip is shown immediately by default — but this can be modified in 2 ways:  -   Use `isAnimated` to include a short transition when it appears/disappears. -   Use `delay` to add a delay between when it’s triggered and when it appears.  ```jsx isFullWidth <Tooltip     content=\\\"Hello, Tooltip, my old friend\\\"     {...useKnobs({         isAnimated: true,         delay: {             options: [                 {                     label: \\\"['short', 'none']\\\",                     value: ['short', 'none'],                 },             ],             value: ['short', 'none'],         },     })} >     <Button label=\\\"Hover me!\\\" /> </Tooltip> ```  > **Info** > Note how we can use a tuple with two values for the `delay`, making it possible to control the show and hide delay separately. > > Having an initial delay is helpful if we have a lot of elements and don’t want to trigger a Tooltip when just moving the cursor through them. But with an animated Tooltip we might want to remove the delay before hiding, as a transition already would be present.  ### Max width  A Tooltip has a `maxWidth` of `300px` by default. Set this to a different value to override it.  ```jsx <Tooltip     content=\\\"A very very long content value that should not be wrapped when we have a big custom value for the maxWidth\\\"     maxWidth={useKnob('maxWidth', [900, 600, 300])} >     <Button label=\\\"hover me\\\" /> </Tooltip> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Action_content":{"__data__":"{\"id_\":\"Action_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Action\",\"title\":\"Action\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Action/action.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"FVwuFaIwGayj3W27FxWUTTzhyOWfnBSy96egGngcdmk=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Action } from '@druids/ui/form/Action'; import { Grid } from '@druids/ui/layout/Grid'; import { Text } from '@druids/ui/typography/Text'; import { Link } from '@druids/ui/nav/Link'; import { StarFilledIcon } from '@druids/ui/icons/StarFilled';  ### Example  Action has almost no default styles — just `cursor: pointer` and resets.  ```jsx name=\\\"Example\\\" <Action onClick={() => console.log('click!')}>     An unstyled regular action </Action> ```  ## Variants  ### Hover styles  By default the Action would have only a cursor change on hover, however there is a way to add either a color or a background change on hover via a `hoverStyle` prop.  ```jsx name=\\\"Hover Styles\\\" <Action     {...useKnobs(['hoverStyle', 'level', { padding: 'sm' }])}     onClick={() => console.log('click!')} >     An action with a hover and a padding </Action> ```  Note how we can use the `padding` prop as well if we just want to make the action have a bigger clickable area.  Also note that as Action doesn't have any distinctive styles by default, we need to provide them via component so it would be obvious that it could be hovered and clicked.  ### Link  By default, the Action is rendered as a `` when the `onClick` is provided. However, sometimes there is a need to have an anchor instead, and this could be done automatically by providing a `href` prop:  ```jsx name=\\\"Anchor\\\" <Action href=\\\"#example2\\\">An action using an anchor</Action> ```  ### External Link  When used with a `href`, it is possible to make it external:  ```jsx name=\\\"External Anchor\\\" <Action href=\\\"#example2\\\" isExternal>     An action with an external link </Action> ```  ### Any other component  If we would like to use the Action with any other component, for example, when we'd want to have some complex layout inside, we could do it via an `as` prop which accepts either a component, or a JSX element that would be cloned and used as a wrapper (similar to how it is done in ``) — this can be useful for using with something like an ``.  ```jsx name=\\\"As Prop\\\" <Action     hoverStyle=\\\"background\\\"     as={<Link href=\\\"#foo\\\" onClick={() => console.log('click!')} />}     padding=\\\"md\\\" >     An Action using a `Link` </Action> ```  > **Warning** > The component passed would need to be able to accepts any other props that are passed down to the Action like the `onClick` and `href` ones.  ### Inside Other Components' `as` prop  > **Warning** > While it is possible to use the `as` prop to provide a layout to the insides, be careful not to remove the `button` element this way — for example, when using with a `` or ``, instead of doing something like `}>` it is better to do it the other way: `}`.  ```jsx name=\\\"Inside As Prop\\\" <Grid     columns=\\\"min-content 1fr auto\\\"     as={         <Action             hoverStyle=\\\"background\\\"             onClick={() => console.log('click!')}             padding=\\\"md\\\"         />     } >     <StarFilledIcon />     <span         style={{             color: 'var(--action-hover-text-color, var(--ui-interaction-primary))',         }}     >         Left column of Action     </span>     <span>Right column</span> </Grid> ```  > Note how it is possible to use CSS variables in order to style something to have a certain color before hover, but get the proper color afterwards.  ## States  An Action can be disabled via an `isDisabled` prop, in which case the `onClick` or `href` won't be applied to it:  ```jsx name=\\\"Disabled\\\" <Action isDisabled onClick={() => console.log('click!')}>     A disabled action </Action> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Button_content":{"__data__":"{\"id_\":\"Button_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"9tQpnP+U7ceHhavcKnu7j0snJug+NWBGkmwK6kEPUmg=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Tooltip } from '@druids/ui/dialogs/Tooltip'; import { Button } from '@druids/ui/form/Button'; import { ArrowLeftIcon } from '@druids/ui/icons/ArrowLeft'; import { ArrowRightIcon } from '@druids/ui/icons/ArrowRight'; import { CaretDownIcon } from '@druids/ui/icons/CaretDown'; import { CogIcon } from '@druids/ui/icons/Cog'; import { ExternalLinkIcon } from '@druids/ui/icons/ExternalLink'; import { PlusIcon } from '@druids/ui/icons/Plus'; import { TrashIcon } from '@druids/ui/icons/Trash'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { IntegrationLogo } from '@druids/ui/misc/IntegrationLogo'; import { Link } from '@druids/ui/nav/Link'; import { FeatureStatusLabel } from '@druids/ui/pills/FeatureStatusLabel';          ### Example  ```jsx name=\\\"Example\\\" permutations=\\\"isPrimary\\\" <Button     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ isPrimary, level }) =>                     `${isPrimary ? 'Primary ' : ''}${level} Button`,             },         },     ])} /> ```  ## Usage  ### Dos & Don’ts  -   **Do**                                                             combine verbs and nouns to create clear, actionable labels.  -   **Don’t**                                                             use articles like “a” or “the” in labels. Keep them concise.  -   **Do**                                                             use an ellipsis to indicate when a Button will trigger an intermediate step before any changes are made permanent. This helps reinforce that users will have a chance to review consequential actions.  -   **Do**                                                             use the `isPrimary` variant to draw focus to the most important action a user can take.  -   **Don’t**                                                             use more than 1 `isPrimary` Button on a single screen. If this can’t be avoided, at least ensure they don’t appear in close proximity.  -   **Do**                            <Button                 label=\\\"Delete User Data\\\"                 icon={TrashIcon}                 level=\\\"danger\\\"                 isPrimary             />                                                               use `level=\\\"danger\\\"` when a Button deletes user data. For extra emphasis, combine it with `isPrimary`.  -   **Do**                                                                          place icons to the right of text when forward motion is suggested or when a Button uses a `` and triggers a ``.  -   **Don’t**                                                             place icons to the right of text in any other circumstance. In all other cases, icons should be to the left of the text.  -   **Do**                          use `isBorderless` instead of `isDangerouslyNaked` whenever possible. It’s important that Buttons have super obvious hover states, even when a border and/or background in the base state isn’t necessary.  -   **Don’t**                          use an `isDangerouslyNaked` Button unless there’s absolutely no way to use `isBorderless`.  ## Variants  > **Warning** > In cases where you need a `` HTML element with custom styles, use the `` component instead.  ### Levels  There are 4 Button levels: `default`, `success`, `warning`, and `danger`.  ```jsx name=\\\"Levels\\\" permutations=\\\"level\\\" <Button     {...useKnobs([         'level',         'isPrimary',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ level }) => level,             },         },     ])} /> ```  ### Primary  An `isPrimary` Button is designed to call user attention to the most important action(s) for a given page or workflow.  Buttons with a non-`default` `level` should usually also be `isPrimary`.  ```jsx name=\\\"Primary\\\" permutations=\\\"level\\\" <Button     {...useKnobs([         { isPrimary: true },         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ isPrimary, level }) =>                     `${isPrimary ? 'Primary ' : ''}${level}`,             },         },     ])} /> ```  ### Sizes  There are 4 supported sizes.  ```jsx name=\\\"Sizes\\\" permutations=\\\"size\\\" <Button     {...useKnobs([         'size',         'isPrimary',         'level',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ size }) =>                     ({                         xs: 'Extra Small',                         sm: 'Small',                         md: 'Medium',                         lg: 'Large',                     }[size]),             },         },     ])} /> ```  ### Borders  The `isBorderless` prop removes the border from any Button. On hover, it gets a background fill.  ```jsx name=\\\"Borderless\\\" permutations=\\\"level\\\" <Button     isBorderless     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ level }) => `Borderless ${level} Button`,             },         },     ])} /> ```  The `isDangerouslyNaked` prop produces a more extreme version of an `isBorderless` Button. Its _text_ color changes on hover — not its background.  > **Warning: The unconventional name is to discourage casual use** > > Undecorated Buttons generally should have [[higherLevelDesignThemes:responsiveness | obvious hover states]] to indicate interactivity — which isn’t the case when only the text color changes. Use `isDangerouslyNaked` only in special situations where a background on hover (`isBorderless`) is truly inappropriate.  ```jsx name=\\\"Dangerously naked\\\" permutations=\\\"level\\\" <Button     isDangerouslyNaked     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ level }) => `Naked ${level} Button`,             },         },     ])} /> ```  When `isPrimary` is applied to an `isBorderless` or `isDangerouslyNaked` Button, the text is colored accordingly.  ```jsx name=\\\"Borderless and primary\\\" permutations=\\\"level\\\" <Button     {...usePermutations({         isBorderless: true,         isDangerouslyNaked: true,     })}     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         { isPrimary: true },         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ isPrimary, level }) =>                     `${isPrimary ? 'Primary ' : ''}${level} Button`,             },         },     ])} /> ```  ### Shade  When used on a colored/shaded background regardless of the theme, the contrast of the Button has to be higher.  All variants of an `isShade` Button look the same — regardless of whether `isBorderless` or `isDangerouslyNaked` are set.  ```jsx name=\\\"Shade\\\" const isShade = useKnob('isShade', true); const level = useKnob('level'); return (     <div style={{ background: 'var(--ui-background-shade)', padding: '8px' }}>         <Button isShade={isShade} level={level} label={'Button'} />         <Button             isShade={isShade}             level={level}             isBorderless             label={'Borderless button'}         />         <Button             isShade={isShade}             level={level}             isDangerouslyNaked             label={'Naked button'}         />     </div> ); ```  ### Icons  By default, an icon appears to the left of the text.  > **Warning** > Icons to the right of text (with the prop `iconRight`) should be used in contexts where forward motion is being suggested with an `` or `` (“Go,” “Next,” “Continue,” “Open externally,” etc.). Otherwise, stick to the default.  If there’s no text ([[dosAndDonts:icon_usage|use with caution]]), the Button will be square.  ```jsx name=\\\"Icons\\\" permutations=\\\"isPrimary,isBorderless\\\" <Button     {...useKnobs([         'isBorderless',         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',     ])}     {...usePermutations({         Default: {             icon: CogIcon,             label: 'Benjamin Button',         },         'Icon on the right': {             iconRight: ArrowRightIcon,             label: 'Forward Button',         },         'Icon on the both sides': {             icon: CogIcon,             iconRight: ArrowRightIcon,             label: 'Button with 2 icons',         },         'No label': {             icon: PlusIcon,         },     })} /> ```  ### Integration logos  To display the logo of a third-party integration or language, pass an `` component to the `icon` prop.  > **Warning: Remember to set the appropriate props on the IntegrationLogo** > > -   `isIcon` > -   `variant=\\\"avatar\\\"` > -   `isColorReversed` depending on whether the Button has a light or dark background >     -   If the Button’s background becomes dark on hover, makes sure to change `isColorReversed` in response.  ```jsx partial=\\\"logoAsIcon\\\" isHidden isMemoized const Logo = ({ ...props }) => (     <IntegrationLogo         {...props}         isIcon         integrationId=\\\"github\\\"         variant=\\\"avatar\\\"     /> );  const LogoWithColorReversed = ({ ...props }) => (     <IntegrationLogo         {...props}         isIcon         integrationId=\\\"github\\\"         variant=\\\"avatar\\\"         isColorReversed     /> );  const LogoWithColorReversedOnHover = ({ isHovered, ...props }) => (     <IntegrationLogo         {...props}         isIcon         integrationId=\\\"github\\\"         variant=\\\"avatar\\\"         isColorReversed={isHovered}     /> ); ```  ```jsx name=\\\"Integration logos\\\" withPartials=\\\"logoAsIcon\\\" <Button     {...useKnobs(['level', 'size', 'isDisabled', 'isLoading'])}     {...usePermutations({         Default: {             icon: Logo,         },         Primary: {             icon: LogoWithColorReversed,             isPrimary: true,         },         'Borderless Primary': {             icon: LogoWithColorReversedOnHover,             isPrimary: true,             isBorderless: true,         },     })}     label=\\\"GitHub\\\"     isTitleCased={false} /> ```  ### Disabled and loading  A Button can be `isDisabled` or `isLoading`.  ```jsx isList name=\\\"Disabled and loading\\\" <Button isDisabled label=\\\"Disabled Button\\\" /> <Button isLoading label=\\\"Loading Button\\\" /> <Button isDisabled isPrimary label=\\\"Disabled Primary Button\\\" /> <Button isLoading isPrimary label=\\\"Loading Primary Button\\\" /> <Button isDisabled isBorderless label=\\\"Disabled Borderless Button\\\" /> <Button isLoading isBorderless label=\\\"Loading Borderless Button\\\" /> <Button isDisabled isDangerouslyNaked label=\\\"Disabled Naked Button\\\" /> <Button isLoading isDangerouslyNaked label=\\\"Loading Naked Button\\\" /> ```  ### Width  A normal Button will automatically fit to its content size. But an `isFullWidth` Button will fill its container horizontally.  ```jsx width=\\\"500\\\" name=\\\"Width\\\" <Button isFullWidth={true} isPrimary label=\\\"Full-Width Button\\\" /> ```  ### Feature status  Any Button can be given a `` with the `featureStatus` prop. This shows it represents an alpha, beta, or new feature.  ```jsx name=\\\"Feature status\\\" isList <Button     level=\\\"default\\\"     label=\\\"Button is\\\"     featureStatus=\\\"beta\\\" /> <Button     level=\\\"default\\\"     isPrimary     label=\\\"Primary Button is\\\"     featureStatus=\\\"beta\\\" /> <Button     isBorderless     label=\\\"Borderless Button is\\\"     featureStatus=\\\"alpha\\\" /> <Button     isBorderless     isPrimary     label=\\\"Primary Borderless Button is\\\"     featureStatus=\\\"alpha\\\" /> <Button     isDangerouslyNaked     label=\\\"Naked Button is\\\"     featureStatus=\\\"new\\\" /> <Button     isDangerouslyNaked     isPrimary     label=\\\"Primary Naked Button is\\\"     featureStatus=\\\"new\\\" /> ```  ### Button as link  A “normal” link can be added by using the `href` prop.  ```jsx name=\\\"Button as normal link\\\" <Button     isPrimary     label=\\\"Button with link\\\"     href=\\\"http://www.google.com\\\"     isExternal /> ```  Complex links (e.g., ones that use react-router instead of `href`) can be passed in the `component` prop. They will be styled to appear identical to a Button.  This is an escape hatch so the Button can avoid relying on any routing logic (non-DRUIDS code). This is the only way routing links should be used with Button.  ```jsx name=\\\"Button as component link\\\" <Button isPrimary label=\\\"Button with component link\\\" component={<Link />} /> ```  {/* @if IS_PRIVATE */}  ## Interacting with `` in tests  ### Getting a handle to a &lt;Button&gt;  The `button()` function returns an object that you can use to query and manipulate a Button. To call it, just pass in the same label that you provided to the component’s `label` prop:  ```ts const myButton = button('My Button'); ```  Note that calling `button()` doesn’t actually _do_ anything; in particular, it doesn’t query the DOM looking for the Button. So, you shouldn’t expect `button()` itself to throw an error or cause the test to fail. The utility will start interacting with the DOM **only** when you call one of its methods to manipulate or query the Button.  ### Clicking a button  The most common thing you’ll need to do with a `` is to click it. You can do that with the `click()` method:  ```ts const myButton = button('My Button'); await myButton.click(); ```  ### Checking a button’s enabled state  You can check whether a Button is enabled with the `isEnabled()` method:  ```ts const myButton = button('My Button'); expect(myButton.isEnabled()).toBe(true); ```  ### Checking a button’s loading state  You can check whether a Button is loading with the `isLoading()` method:  ```ts const myButton = button('My Button'); expect(myButton.isLoading()).toBe(true); ```  {/* @endif */}  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"InputText_content":{"__data__":"{\"id_\":\"InputText_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/InputText\",\"title\":\"InputText\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/InputText/input-text.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"srV7a5aoyz700qmmteIudYLjnf0/7BUcylitbZNwGko=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { InputText } from '@druids/ui/form/InputText'; import { InputSearch } from '@druids/ui/form/InputSearch'; import { InputNumber } from '@druids/ui/form/InputNumber'; import { InputTime } from '@druids/ui/form/InputTime'; import { InputPassword } from '@druids/ui/form/InputPassword';          ## Example  ```jsx name=\\\"Base Example\\\" const [text, setText] = React.useState(''); return (     <InputText         placeholder=\\\"John Doe\\\"         value={text}         onChange={(event) => setText(event.target.value)}     /> ); ```  ## Variants  ### Levels  There are 4 different InputText levels: `default`, `success`, `warning`, and `danger`.  ```jsx name=\\\"Levels\\\" isList <InputText level=\\\"default\\\" placeholder=\\\"default\\\" /> <InputText level=\\\"success\\\" placeholder=\\\"success\\\" /> <InputText level=\\\"warning\\\" placeholder=\\\"warning\\\" /> <InputText level=\\\"danger\\\" placeholder=\\\"danger\\\" /> ```  ### Sizes  There are 3 different supported sizes.  ```jsx name=\\\"Sizes\\\" isList <InputText size=\\\"lg\\\" placeholder=\\\"Large\\\" /> <InputText size=\\\"md\\\" placeholder=\\\"Medium\\\" /> <InputText size=\\\"sm\\\" placeholder=\\\"Small\\\" /> ```  ### Types  There are 4 different subtypes: ``, ``, ``, ``.  ```jsx name=\\\"Types\\\" isList <InputText placeholder=\\\"text\\\" /> <InputSearch placeholder=\\\"search\\\" /> <InputNumber placeholder=\\\"number\\\" /> <InputTime /> <InputPassword placeholder=\\\"password\\\" /> <InputPassword placeholder=\\\"masked\\\" inputType=\\\"masked\\\" /> ```  > **Warning** > It is not recommended to use the deprecated `inputType` prop. Please use the correct subtype component.  ### Width  A normal InputText will automatically fit to its content size. But an `isFullWidth` InputText will fill its container horizontally.  ```jsx name=\\\"Width\\\" isFullWidth <InputText isFullWidth={true} placeholder=\\\"Full-width\\\" /> ```  ### Disabled  A disabled InputText isn’t editable, it can’t be focused via keyboard, and its contents aren’t sent when its form is submitted.  ```jsx name=\\\"Disabled\\\" isList <InputText isDisabled={true} placeholder=\\\"isDisabled\\\" /> ```  ### Read-only  Like the disabled variant, a read-only InputText isn’t editable. However, the read-only variant _can_ be focused via keyboard and its contents _are_ sent when its form is submitted.  ```jsx name=\\\"Read-only\\\" isList <InputText isReadOnly={true} placeholder=\\\"isReadOnly\\\" /> ```  ### Monospace  Monospace font characters all have the same width, using the same amount of horizontal space. They can make short strings of text, especially when numerical, more legible. Because you don't have to account for different text widths, a monospace inputText field can often be narrower than the normal field.  Avoid using for longer text blocks, since its spacing can reduce readability.  ```jsx name=\\\"Monospace\\\" <InputText isMonospace={true} placeholder=\\\"isMonospace\\\" /> ```  ### Soft  While effective, the visual stylings of our form elements (inputs, select, text area, toggle switch, inputs within facets, etc) can be distracting in relatively complex forms with lots of different inputs. Additionally, the way our inputs look can also potentially take the user’s attention away from the visualizations on a page.  We added an optional prop isSoft to our input components to show a more minimal input treatment better suited for high density forms. This treatment has a gray background color and no border color.  ```jsx name=\\\"Soft\\\" <InputText isSoft placeholder=\\\"isSoft\\\" /> ```  ### Soft + disabled  The disabled state of the isSoft input component needed to be adjusted so that the user clearly knew that it is disabled. If your form has several disabled inputs, we recommend not using the isSoft component for your form inputs.  ```jsx name=\\\"SoftDisabled\\\" <InputText isSoft isDisabled placeholder=\\\"isSoft isDisabled\\\" /> ```  ## Validation  ### Placement  Validation can be positioned in 2 ways: `inline` or `block`.  ```jsx name=\\\"Placement\\\" isList <InputText     validationMessage=\\\"I’ve made a huge mistake\\\"     placeholder=\\\"Inline (hover on me)\\\"     validationPlacement=\\\"inline\\\" /> <InputText     validationMessage=\\\"I’ve made a huge mistake\\\"     placeholder=\\\"Block\\\"     validationPlacement=\\\"block\\\" /> ```  ### Levels  Validation supports 2 levels: `success` and `danger`.  ```jsx name=\\\"Levels\\\" isList <InputText     validationLevel=\\\"success\\\"     validationMessage=\\\"This is a huge success\\\"     placeholder=\\\"Success\\\" /> <InputText     validationLevel=\\\"danger\\\"     validationMessage=\\\"Enemies of the Heir, beware! You’ll be next, Mudbloods!\\\"     placeholder=\\\"Danger\\\" /> ```  {/* @if IS_PRIVATE */}  ## Interacting with `` in tests  ### Making &lt;InputText&gt; testable  The `inputText()` helper relies on the `aria-label` attribute to identify various DOM elements that the `` component renders. Provide your `` with a descriptive and specific `aria-label` prop, which you can then use in your tests to locate it:  ```tsx return <InputText value={value} onChange={onChange} aria-label=\\\"My Input\\\" />; ```  Alternatively, you can use the `` element with the `htmlFor` prop to identify a particular label as belonging to the input:  ```tsx const inputId = React.useId(); return (     <>         <Label htmlFor={inputId}>My Input</Label>         <InputText id={inputId} value={value} onChange={onChange} />;     </> ); ```  ### Getting a handle to an &lt;InputText&gt;  The `inputText()` function returns an object that you can use to query and manipulate an InputText. To call it, just pass in the same label that you provided to the component’s `aria-label` prop:  ```ts const myInput = inputText('My Input'); ```  Note that calling `inputText()` doesn’t actually _do_ anything; in particular, it doesn’t query the DOM looking for the InputText. So, you shouldn’t expect `inputText()` itself to throw an error or cause the test to fail. The utility will start interacting with the DOM **only** when you call one of its methods to manipulate or query the InputText.  ### Typing into the input  The most common thing you’ll need to do with an `` is to type a value into it. Use the `type()` method:  ```ts const myInput = inputText('My Input'); await myInput.type('Hello World'); ```  #### Prepend or replace text  If you need to add text to the beginning of an input with an existing value, use the `prepend()` method. If you need to replace the entire value, use the `replace()` method.  #### Special keys  The input text helper has convenience methods for pressing the Return (Enter) key and the Escape key:  ```ts const myInput = inputText('My Input'); await mySelect.type('Hello World'); await mySelect.pressReturn(); // or await mySelect.pressEscape(); ```  ### Focus and blur  The `type()` method will automatically focus the input before typing into it. If you need to focus the input without typing anything, use the `focus()` method:  ```ts const myInput = inputText('My Input'); await mySelect.focus(); ```  After typing into the input, it will stay focused. If you want to explicitly unfocus it, use the `blur()` method:  ```ts const myInput = inputText('My Input'); await myInput.type('Hello World'); // The input is now focused. await myInput.blur(); // Now it’s not. ```  ### Checking enabled state  You can check whether the input is enabled or disabled using the `isEnabled()` method:  ```ts const myInput = inputText('My Input'); expect(myInput.isEnabled()).toBe(true); ```  ### Checking readonly state  You can check whether the input is readonly using the `isReadOnly()` method:  ```ts const myInput = inputText('My Input'); expect(myInput.isReadOnly()).toBe(false); ```  {/* @endif */}  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Select_content":{"__data__":"{\"id_\":\"Select_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Field } from '@druids/ui/form/Field'; import { Group } from '@druids/ui/form/Group'; import { Select, AsyncSelect, CreatableSelect } from '@druids/ui/form/Select'; import { defaultMenuRenderer } from '@druids/ui/form/Select/BaseSelect'; import { makeOptionGroup } from '@druids/ui/form/Select/OptionGroup'; import { CheckIcon } from '@druids/ui/icons/Check'; import { CiIcon } from '@druids/ui/icons/Ci'; import { DashboardIcon } from '@druids/ui/icons/Dashboard'; import { Icon } from '@druids/ui/icons/Icon'; import { NotebookIcon } from '@druids/ui/icons/Notebook'; import { SecurityPlatformIcon } from '@druids/ui/icons/SecurityPlatform'; import { SyntheticsIcon } from '@druids/ui/icons/Synthetics'; import { WatchdogIcon } from '@druids/ui/icons/Watchdog'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Spacing } from '@druids/ui/layout/Spacing'; import { Image } from '@druids/ui/misc/Image'; import { Text } from '@druids/ui/typography/Text';  import DosAndDontsExample_2A_Light from './dos-and-donts-images/select-2a-light.png'; import DosAndDontsExample_2A_Dark from './dos-and-donts-images/select-2a-dark.png'; import DosAndDontsExample_2B_Light from './dos-and-donts-images/select-2b-light.png'; import DosAndDontsExample_2B_Dark from './dos-and-donts-images/select-2b-dark.png'; import DosAndDontsExample_3_Light from './dos-and-donts-images/select-3-light.png'; import DosAndDontsExample_3_Dark from './dos-and-donts-images/select-3-dark.png';          ### Example  ```jsx partial=\\\"options\\\" isHidden const optionsNumber = [     { label: 'One', value: 1 },     { label: 'Two', value: 2 },     { label: 'Three', value: 3 },     { label: 'Four', value: 4 },     { label: 'Five', value: 5 },     { label: 'Six', value: 6 },     { label: 'Seven', value: 7 },     { label: 'Disabled', value: 8, disabled: true }, ];  const optionsString = [     { label: 'One', value: 'one' },     { label: 'Two', value: 'two' },     { label: 'Three', value: 'three' },     { label: 'Four', value: 'four' },     { label: 'Five', value: 'five' }, ];  const optionsBoolean = [     { label: 'True', value: true },     { label: 'False', value: false }, ]; ```  ```jsx name=\\\"Base Example\\\" withPartials=\\\"options\\\" const [value, setValue] = React.useState(null); return <Select options={optionsNumber} value={value} onChange={setValue} />; ```  ## Usage  ### Dos & Don’ts  -   **Do**                          combine verbs and nouns to create clear, actionable placeholder text (“Select” usually is the best verb). Use sentence case for placeholder text, without a trailing ellipsis.  -   **Don’t**                          use articles like “a” or “the” in placeholder text. Don’t use a trailing ellipsis.  -   **Do**               <Image             src={[DosAndDontsExample_2A_Light, DosAndDontsExample_2A_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, and its text and logo have been changed to white, making for high reading contrast.\\\"         />           use the reversed/knockout version of logos, icons, and text when a menu option is selected. (This happens automatically for text unless you’re using the custom `optionRenderer`.)  -   **Don’t**               <Image             src={[DosAndDontsExample_2B_Light, DosAndDontsExample_2B_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, but its text remains gray and its logo hasn’t changed, making for low reading contrast.\\\"         />           allow the base version of logos, icons, and text to persist when a menu option is selected. (Note that this is much more noticeable in the light theme, where base text is dark gray and base logos are colored.)  -   **Don’t**               <Image             src={[DosAndDontsExample_3_Light, DosAndDontsExample_3_Dark]}             width={161}             alt=\\\"A closed Select control with a red border and a circled red exclamation point icon in the top right corner, indicating that the selected option, named “Bad Selection,” is not valid.\\\"         />           use visual validation. We don’t want to give users the opportunity to a choose an invalid option in the first place, which is a poor user experience. Because of that, Select doesn’t support the same validation display options as other form elements.  -   **Do**      limit placeholder text and menu options to a single line whenever possible.  ## Variants  ### Sizes  There are 4 supported sizes.  ```jsx withPartials=\\\"options\\\" isList const [value, setValue] = React.useState({ label: 'One', value: 1 }); const baseProps = {     value,     options: optionsNumber,     onChange: setValue, }; return (     <>         <Select {...baseProps} size=\\\"xs\\\" placeholder=\\\"Extra Small Select\\\" />         <Select {...baseProps} size=\\\"sm\\\" placeholder=\\\"Small Select\\\" />         <Select {...baseProps} size=\\\"md\\\" placeholder=\\\"Medium Select\\\" />         <Select {...baseProps} size=\\\"lg\\\" placeholder=\\\"Large Select\\\" />     </> ); ```  ### On Change  The `onChange` prop determines what happens when the selected `value` changes. Most often, it is a useState hook.  ```jsx name=\\\"Value types\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [valueNumber, setValueNumber] = React.useState(null); const [valueString, setValueString] = React.useState(null); return (     <>         <Select             options={optionsNumber}             onChange={(value) => window.alert(JSON.stringify(value))}             value={valueNumber}             placeholder=\\\"onChange triggers an alert\\\"         />         <Select             options={optionsString}             onChange={setValueString}             value={valueString}             placeholder=\\\"onChange updates the selected value\\\"         />     </> ); ```  ### Values  There are 4 supported value types. It can either be boolean, number, null or string.  ```jsx name=\\\"Value types\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [valueNumber, setValueNumber] = React.useState(null); const [valueString, setValueString] = React.useState(null); const [valueBool, setValueBool] = React.useState(null); return (     <>         <Select             options={optionsNumber}             onChange={setValueNumber}             value={valueNumber}             placeholder=\\\"Number values\\\"         />         <Select             options={optionsString}             onChange={setValueString}             value={valueString}             placeholder=\\\"String values\\\"         />         <Select             options={optionsBoolean}             onChange={setValueBool}             value={valueBool}             placeholder=\\\"Boolean values\\\"         />         <Select             options={optionsNumber}             onChange={setValueNumber}             value={null}             placeholder=\\\"Null value\\\"         />     </> ); ```  ### Multiple values  ```jsx name=\\\"Multiple values\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [values, setValues] = React.useState(null); const [clearableValues, setClearableValues] = React.useState(null); const commonProps = {     options: optionsNumber,     multi: true,     size: 'md', }; return (     <>         <Select             {...commonProps}             placeholder=\\\"Select multiple values\\\"             value={values}             onChange={setValues}         />         <Select             {...commonProps}             placeholder=\\\"Select multiple values and clear them\\\"             value={clearableValues}             onChange={setClearableValues}             clearable         />         <Select             {...commonProps}             placeholder=\\\"Not multiline\\\"             isMultiLine={false}             value={clearableValues}             onChange={setClearableValues}             clearable         />     </> ); ```  ### Options  The prop `options` is an array of items, that all have a `label` that is a string and a `value`. They can also have extra attributes such as `icon` or `word`, in which case they need a `customRenderer` or a `menuRenderer`, as shown in the `customRenderer` and `menuRenderer` sections below.  ```jsx name=\\\"Option types\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [valueNumber, setValueNumber] = React.useState(null); const [valueString, setValueString] = React.useState(null); const [valueBool, setValueBool] = React.useState(null);  return (     <>         <Select             options={optionsNumber}             onChange={setValueNumber}             value={valueNumber}             placeholder=\\\"Number options\\\"         />         <Select             options={optionsString}             onChange={setValueString}             value={valueString}             placeholder=\\\"String options\\\"         />         <Select             options={optionsBoolean}             onChange={setValueBool}             value={valueBool}             placeholder=\\\"Boolean options\\\"         />     </> ); ```  ### Clearable  Use the `clearable` prop to include a button that clears the selected value(s) when clicked.  In case of regular selects, `null` will be given back when the “clear” button is clicked. And `[]` will used for `multi` selects.  ```jsx withPartials=\\\"options\\\" isVerticalList const [value, setValue] = React.useState(null); const [values, setValues] = React.useState([]);  return (     <>         <Select             options={optionsNumber}             value={value}             onChange={setValue}             clearable         />         <Select             placeholder=\\\"Select multiple values\\\"             multi             options={optionsNumber}             value={values}             onChange={setValues}             clearable         />     </> ); ```  ### Width  A normal Select’s width is determined by the width of its selected option(s). But an `isFullWidth` Select will fill its container horizontally.  ```jsx name=\\\"Full width\\\" withPartials=\\\"options\\\" width=\\\"400\\\" const [value, setValue] = React.useState(null); return (     <Select         isFullWidth         options={optionsNumber}         value={value}         onChange={setValue}     /> ); ```  ### Async  ```jsx static import { AsyncSelect } from '@druids/ui/form/Select'; ```  Use this version of Select when you can’t move all the menu options to the frontend and need to use type ahead search. For example: a metric tag selector, where a single org could have 1 million tags.  Use the `loadOptions` prop to fetch the options automatically after every keystroke and when the component is mounted.  ```jsx partial=\\\"loadOptions\\\" isHidden const loadOptions = (input) => {     // mocking an API call     return new Promise((resolve) => {         const options = [             { label: 'One', value: 1 },             { label: 'Two', value: 2 },             { label: 'Three', value: 3, disabled: true },             // And so on...         ];         setTimeout(() => {             resolve({                 options: options.filter((option) =>                     option.label.includes(input),                 ),                 complete: true,             });         }, 2000);     }); }; ```  ```jsx name=\\\"Async\\\" withPartials=\\\"loadOptions\\\" const [value, setValue] = React.useState(null); const [values, setValues] = React.useState(null); const [key, setKey] = React.useState(0); return (     <>         <Group>             <Field                 type=\\\"group\\\"                 label=\\\"Async\\\"                 input={                     <AsyncSelect                         key={key}                         value={value}                         async                         loadOptions={loadOptions}                         onChange={setValue}                     />                 }             />             <Button                 onClick={() => {                     setKey(key + 1);                     setValue(null);                 }}                 label=\\\"Reload\\\"             />         </Group>         <br />         <br />         <Group>             <Field                 type=\\\"group\\\"                 label=\\\"Async + multi\\\"                 input={                     <AsyncSelect                         placeholder=\\\"Async multi clearable select\\\"                         key={key}                         value={values}                         async                         multi                         loadOptions={loadOptions}                         onChange={setValues}                     />                 }             />             <Button                 onClick={() => {                     setKey(key + 1);                     setValue(null);                 }}                 label=\\\"Reload\\\"             />         </Group>     </> ); ```  > **Warning: Important notes** > > -   Do not try to paginate on scroll. It’s not trivial to do, and the output code is very hard to maintain. > -   Every prop available for a standard (non-Async) Select also works for AsyncSelect.  ### Creatable  ```jsx static import { CreatableSelect } from '@druids/ui/form/Select'; ```  Use this version of Select when you want the user to be able to select custom-entered tags which are not included in the dropdown options.  ```jsx name=\\\"Creatable\\\" withPartials=\\\"options\\\" const [values, setValues] = React.useState(null); return (     <CreatableSelect         multi         options={optionsNumber}         value={values}         onChange={setValues}     /> ); ```  ### Automatic transformation  Even if we recommend you to use the full object for the `options` and `value` when using the select, you can just use raw value and the `Select` component will transform it.  ```jsx name=\\\"Creatable\\\" withPartials=\\\"options\\\" isVerticalList const [value, setValue] = React.useState(1); return (     <>         <Text>The value is: {value}</Text>         <Select             options={[1, 2, 3, 4, 5, 6, 7, 8]}             value={value}             onChange={(newValue) => setValue(newValue.value)}         />         <Select             options={optionsNumber}             value={value}             onChange={(newValue) => setValue(newValue.value)}         />     </> ); ```  ### Custom Renderers  ```jsx partial=\\\"customOptions\\\" name=\\\"Custom renderers\\\" isHidden isMemoized const customOptions = [     {         label: 'Dashboard',         value: 'Dashboard',         icon: <DashboardIcon />,     },     {         label: 'Watchdog',         value: 'Watchdog',         icon: <WatchdogIcon />,     },     {         label: 'CI',         value: 'CI',         icon: <CiIcon />,     },     {         label: 'Synthetics',         value: 'Synthetics',         icon: <SyntheticsIcon />,     },     {         label: 'Security',         value: 'Security',         icon: <SecurityPlatformIcon />,     },     {         label: 'Notebook',         value: 'Notebook',         icon: <NotebookIcon />,         disabled: true,     }, ]; ```  If necessary, you can customize how the Select render its components:  #### Value renderer  You can pass up to 2 arguments. The first is the values to be rendered.  ```jsx static const valueRenderer = (option: Option, index: number) => React.ReactNode; ```  Use this prop to achieve custom rendering on a value selected, e.g. when adding an icon next to its label.  ```jsx withPartials=\\\"customOptions\\\" name=\\\"Value renderer\\\" const valueRenderer = ({ label, icon }) => {     return (         <Flex isFullWidth>             {icon}             <Text shouldInherit marginLeft=\\\"sm\\\">                 {label}             </Text>         </Flex>     ); };  const [value, setValue] = React.useState(customOptions[0]); return (     <Select         options={customOptions}         value={value}         valueRenderer={valueRenderer}         onChange={setValue}     /> ); ```  #### Option renderer  You can pass up to 4 arguments. The fourth gives you 3 extra props: `isDisabled`, `isFocused`, and `isSelected`.  ```jsx static const optionRenderer = (     option: Option,     index: number,     inputValue: string,     extraProps: {         isDisabled: boolean,         isFocused: boolean,         isSelected: boolean,     }, ) => React.ReactNode; ```  Use this prop to achieve custom options rendering, e.g. when adding icons next to each label. You can also use its extra props:  -   `isSelected` when you want to customize the option the user already picked, e.g. adding a check mark on selection. -   `isFocused` when you want to change the behavior of an option on hover, e.g. displaying text on item hovered. -   `isDisabled` when you want to change the behavior of a disabled option, e.g. converting labels to uppercase on the disabled ones.  > You can pass the same function to the props `optionRenderer` and `valueRenderer`.  ```jsx withPartials=\\\"customOptions\\\" name=\\\"Option renderer\\\" const optionRenderer = (     { label, icon },     index,     inputValue,     { isSelected, isFocused, isDisabled } = {}, ) => {     return (         <Flex isFullWidth justify=\\\"space-between\\\">             <Flex alignItems=\\\"center\\\">                 {icon}                 <Text shouldInherit marginLeft=\\\"sm\\\">                     {label}                     {isFocused ? (                         <Text shouldInherit size=\\\"sm\\\" marginLeft=\\\"sm\\\">                             -click me-                         </Text>                     ) : null}                 </Text>             </Flex>             {isSelected ? <CheckIcon /> : null}         </Flex>     ); };  const [value, setValue] = React.useState(customOptions[0]); return (     <Select         options={customOptions}         value={value}         optionRenderer={optionRenderer}         valueRenderer={optionRenderer}         onChange={setValue}     /> ); ```  ### MenuRenderer  ```jsx name=\\\"Menu Renderer\\\" const options = [     { label: 'French', value: 1, word: 'Bonjour' },     { label: 'English', value: 2, word: 'Hello' },     { label: 'Chinese', value: 3, word: '你好' },     { label: 'Korean', value: 4, word: '안녕하세요' },     { label: 'Japanese', value: 5, word: 'こんにちは' }, ];  const [value, setValue] = React.useState(1);  return (     <Select         minWidth=\\\"200px\\\"         options={options}         value={value}         onChange={setValue}         menuRenderer={(menuProps) => {             return (                 <Flex alignItems=\\\"stretch\\\">                     <FlexItem style={{ width: 200 }}>                         {defaultMenuRenderer(menuProps)}                     </FlexItem>                     <FlexItem style={{ width: 300 }} justify=\\\"center\\\">                         <Spacing as=\\\"div\\\" padding=\\\"md\\\">                             <Text as=\\\"div\\\" marginBottom=\\\"md\\\">                                 Language:{' '}                                 <Text weight=\\\"bold\\\">                                     {menuProps.focusedOption.label}                                 </Text>                             </Text>                             <Text as=\\\"div\\\">                                 This is how we say \\\"hello\\\" in                                 <Text weight=\\\"bold\\\">                                     {menuProps.focusedOption.label}                                 </Text>:                             </Text>                             <Text as=\\\"div\\\">{menuProps.focusedOption.word}</Text>                         </Spacing>                     </FlexItem>                 </Flex>             );         }}     /> ); ```  ### Option groups  You can use the `makeOptionGroup()` helper to group the dropdown options into sections.  ```jsx name=\\\"Make Option Group\\\" const options = [     makeOptionGroup({ label: 'France' }),     { label: 'Paris', value: 'paris' },     { label: 'Lyon', value: 'lyon' },     { label: 'Marseille', value: 'marseille' },     makeOptionGroup({ label: 'United States' }),     { label: 'New York', value: 'newYork' },     { label: 'Los Angeles', value: 'losAngeles' },     { label: 'Chicago', value: 'chicago' }, ];  const [value, setValue] = React.useState(null);  return (     <Select         options={options}         value={value}         onChange={setValue}         placeholder=\\\"Select city\\\"     /> ); ```  {/* @if IS_PRIVATE */}  ## Interacting with `` in tests  ### Making &lt;Select&gt; testable  The `select()` helper relies on the `aria-label` attribute to identify various DOM elements that the `` component renders. Provide your `` with a descriptive and specific `label` prop, which you can then use in your tests to locate it:  ```tsx return <Select options={options} onChange={onChange} label=\\\"My Select\\\" />; ```  ### Getting a handle to a &lt;Select&gt;  The `select()` function returns an object that you can use to query and manipulate a Select. To call it, just pass in the same label that you provided to the component’s `label` prop:  ```ts const mySelect = select('My Select'); ```  Note that calling `select()` doesn’t actually _do_ anything; in particular, it doesn’t query the DOM looking for the Select. So, you shouldn’t expect `select()` itself to throw an error or cause the test to fail. The utility will start interacting with the DOM **only** when you call one of its methods to manipulate or query the Select.  ### Selecting an option  The most common thing you’ll need to do with a `` is to select an option. Use the `selectOption()` method to do this:  ```ts const mySelect = select('My Select'); await mySelect.selectOption('First Option'); ```  The string that you pass to `selectOption()` should be the user-facing option value, i.e. the `label` property of the option object.  #### Working with &lt;AsyncSelect&gt;  `selectOption()` should work fine with ``, _as long as the option you’re trying to select is in the initial `loadOptions` response_. `selectOption()` doesn’t support the workflow of typing an option name into the Select, waiting for the response, then clicking the option. If you need support for that workflow, post a message in #frontend-testing on Slack.  #### Deselecting an option  If you need to deselect a selected option in a multi-select, use the `deselectOption()` method:  ```ts const mySelect = select('My Select'); await mySelect.deselectOption('A Selected Option'); ```  As usual, the string passed to `deselectOption()` should be the user-facing option value.  #### Clearing all selected options  To clear all selected options in a clearable select, use the `clear()` method:  ```ts const mySelect = select('My Select'); await mySelect.clear(); ```  > **Warning** > This only works for Selects with the `clearable` prop turned on. If you try to `clear()` a non-clearable Select, this method will throw an error.  ## Checking if an option is selected  To check if a given option value is selected, use `isSelected()`:  ```ts const mySelect = select('My Select'); expect(mySelect.isSelected('A Selected Option')).toBe(true); ```  ### Checking for the existence of an option  To check if a Select has a certain option, use `hasOption()`:  ```ts const mySelect = select('My Select'); expect(await mySelect.hasOption('Preferred Option')).toBe(true); ```  Note that `hasOption()` will open the Select’s dropdown, if it’s not already open. After checking if the option is present, the dropdown will be left in the same state that it started in.  {/* @endif */}  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ToggleButtons_content":{"__data__":"{\"id_\":\"ToggleButtons_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleButtons\",\"title\":\"ToggleButtons\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleButtons/toggle-buttons.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"O5/5sA8cTi/96GgNl10rNvaPbch7AnlYnVKchO5T7j8=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { ToggleButtons } from '@druids/ui/form/ToggleButtons'; import { GlobeIcon } from '@druids/ui/icons/Globe'; import { DatabaseIcon } from '@druids/ui/icons/Database'; import { CacheIcon } from '@druids/ui/icons/Cache'; import { CogMultiIcon } from '@druids/ui/icons/CogMulti'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators';       <ToggleButtons         canBeEmpty         options={[             { label: 'Web', value: 'web', icon: GlobeIcon },             { label: 'DB', value: 'db', icon: DatabaseIcon },             { label: 'Cache', value: 'cache', icon: CacheIcon },         ]}         value=\\\"1\\\"         size=\\\"lg\\\"     />   ToggleButtons combine multiple buttons in a lockup where they behave like radio buttons. It automatically groups the buttons and applies the appropriate styling for the selected option.  ToggleButtons accepts an `options` prop with an array of options:  ```jsx partial=\\\"options\\\" const options = [     { label: 'Web', value: 'web', icon: GlobeIcon },     { label: 'DB', value: 'db', icon: DatabaseIcon },     { label: 'Cache', value: 'cache', icon: CacheIcon },     {         label: 'Custom',         value: 'custom',         icon: CogMultiIcon,         featureStatus: 'beta',     }, ]; ```  ### Example  ```jsx withPartials=\\\"options\\\" name=\\\"Example\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}     /> ); ```  ## Usage  ### Dos & Don’ts  -   **Do**      use ToggleButtons for showing different representations of the same content (or subsets of it, like the inclusion or exclusion of certain data).  -   **Don’t**      use ToggleButtons for switching between alternative content — i.e., different information altogether. Instead use another approach, often a ``, ``, or custom tabs constructed with ``.  -   **Do**      use the `isSoft` variant when another set of ToggleButtons (or a primary ``) is the main focus of interaction.  -   **Don’t**      use the separate `` component to control the visibility of content. SoftToggle should be used only in a dedicated _editing_ context, like a config or creation form.  ## Variants  ### Strength  Use the `isSoft` prop when ToggleButtons need a more subdued appearance. It’s for situations where another set of ToggleButtons (or a primary ``) is the main focus of interaction on the page.  > **Warning** > This is not to be confused with the `` component. See Dos & Don’ts above for more.  ```jsx withPartials=\\\"options\\\" name=\\\"Strength\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         isSoft         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}     /> ); ```  ### Multi-select  `isMultiSelect` ToggleButtons always have an `isSoft` appearance to prevent overwhelming floods of color when multiple options are selected.  ```jsx withPartials=\\\"options\\\" name=\\\"Multi select\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         isMultiSelect={true}         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}     /> ); ```  ### Full Width  We can make the buttons take the full available width by a `isFullWidth` prop.  ```jsx withPartials=\\\"options\\\" name=\\\"Example\\\" isFullWidth const [value, setValue] = React.useState('web'); return (     <ToggleButtons         options={options}         value={value}         onChange={(value) => setValue(value)}         isFullWidth     /> ); ```  ### Select All button  Use the `hasSelectAllButton` prop to provide an easier ability to toggle all options at once (when there’s enough horizontal space). This inserts an “All” button at the beginning of the group:  ```jsx withPartials=\\\"options\\\" name=\\\"Select all button\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         isMultiSelect={true}         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}         hasSelectAllButton     /> ); ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ToggleSwitch_content":{"__data__":"{\"id_\":\"ToggleSwitch_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleSwitch\",\"title\":\"ToggleSwitch\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleSwitch/toggle-switch.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"+bmIc1vs9KsAquSU5wt9U1S4VhPCmS5KIF/72rriU+E=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { InputSearch } from '@druids/ui/form/InputSearch'; import { ToggleSwitch } from '@druids/ui/form/ToggleSwitch'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { Text } from '@druids/ui/typography/Text'; import { Title } from '@druids/ui/typography/Title';          ### Example  ```jsx partial=\\\"setup\\\" isHidden const [isChecked, setIsChecked] = React.useState(true); ```  ```jsx permutations=\\\"size\\\" withPartials=\\\"setup\\\" <ToggleSwitch     isChecked={isChecked}     onChange={() => setIsChecked(!isChecked)}     {...useKnobs([         'size',         'isDisabled',         {             label: {                 fallback: ({ size }) =>                     `${                         {                             xs: 'Extra Small',                             sm: 'Small',                             md: 'Medium',                             lg: 'Large',                         }[size]                     } Toggle`,             },         },     ])} /> ```  > **Danger: Avoid adding labels to describe the current state of a ToggleSwitch** > A ToggleSwitch is either on or off. Providing a label that describes the current state is redundant and clutters the interface.  ## Variants  ### Inline Centering  Sometimes we might want to have a ToggleSwitch inline with some text, for example when using with ``, for proper alignment we can use a `hasInlineCentering` prop.  ```jsx withPartials=\\\"setup\\\" name=\\\"Inline Centering\\\" <>     Here is a toggle:     <ToggleSwitch         isChecked={isChecked}         onChange={() => setIsChecked(!isChecked)}         hasInlineCentering         marginLeft=\\\"sm\\\"     /> </> ```  ## Usage  ### Dos & Don’ts  -   **Do**                                         Enable data collection                    combine verbs and nouns to create clear, actionable labels.  -   **Don’t**                                                          Turn on data collection for this feature.                                 use verbose labels with excessive text or full sentences.  -   **Do**                                         Show only complete days                    use affirmative verbs for labels.  -   **Don’t**                                         Hide incomplete days                    use negative verbs for labels, which force users to make sense of a negative-positive construction.  -   **Do**                                             Application Keys                                                                         Only my keys                                 omit the verb from the label when it’s unnecessary given the context.  -   **Do**                                                          Show widget title                                 allow labels to wrap to multiple lines when necessary.  -   **Don’t**                                                          Show widget title                                 truncate labels with ellipses unless you absolutely can’t avoid it.  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Accordion_content":{"__data__":"{\"id_\":\"Accordion_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Accordion\",\"title\":\"Accordion\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Accordion/accordion.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"BGUC0j6qFS5ENMbhoaWodkU//oApuLqKbWnqV1SJ7/A=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Accordion } from '@druids/ui/layout/Accordion'; import { Panel } from '@druids/ui/layout/Panel'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Spacing } from '@druids/ui/layout/Spacing'; import { BellIcon } from '@druids/ui/icons/Bell'; import { AttentionIcon } from '@druids/ui/icons/Attention'; import { WatchdogIcon } from '@druids/ui/icons/Watchdog'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { AccordionSkeleton } from '@druids/ui/layout/Accordion/AccordionSkeleton'; import { BooksIcon } from '@druids/ui/icons/Books';                                              Accordion Content                              ### Example  ```jsx name=\\\"Example\\\" <Panel padding=\\\"none\\\">     <Accordion         title=\\\"Here is Yet Another Title\\\"         isOpenByDefault         hasTopBorder={false}         hasBottomBorder={false}     >         <Spacing as=\\\"div\\\" padding=\\\"md\\\">             When an Accordion is directly inside an element that already has a             top and/or bottom border, set the{' '}             <InlineCode>hasTopBorder</InlineCode> and/or{' '}             <InlineCode>hasBottomBorder</InlineCode> props to{' '}             <InlineCode>false</InlineCode> to avoid rendering double borders.         </Spacing>     </Accordion> </Panel> ```  Accordion is based on the `` component.  ## Variants  ### Sizes  ```jsx name=\\\"Sizes\\\" <Accordion size=\\\"md\\\" title=\\\"Medium Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Medium Accordion</Spacing> </Accordion> <Accordion size=\\\"lg\\\" title=\\\"Large Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Large Accordion</Spacing> </Accordion> <Accordion title=\\\"Default (XL) Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Default (XL) Accordion</Spacing> </Accordion> <Accordion title=\\\"Here is Some Other Title\\\" isOpenByDefault>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Here is some other content. You’re responsible for handling the         padding of what you put inside an Accordion (here, we're using a         Panel component with no border).     </Spacing> </Accordion> ```  ### Additional content  Add content to the right side of the header by passing a `ReactNode` to the `headerAdditionalContent` prop.  ```jsx name=\\\"Additional content\\\" <Accordion     title=\\\"Foo Accordion Title\\\"     isOpenByDefault     headerAdditionalContent={<>👋</>} >     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Tincidunt ante augue pulvinar justo curae congue fusce condimentum, elit         ullamcorper sociosqu iaculis cras metus mauris senectus in, sit semper         dictum enim aptent conubia porta. Senectus in interdum conubia euismod         vel dictum sodales lobortis torquent proin, auctor sit ridiculus aptent         nisl dapibus nec phasellus mollis, primis ornare taciti nascetur         hendrerit risus augue eros luctus. Massa habitant lacus habitasse arcu         donec ante hac sed, faucibus volutpat id elementum turpis tortor         pretium. Posuere porttitor adipiscing.     </Spacing> </Accordion> ```  ### Landmarks and nesting  Use Accordions as linkable landmarks by adding `id`. Click these anchor links to jump to the corresponding Accordions: Jump to Foo / Jump to Bar / Jump to Baz (nested inside Bar)  Adding an `id` also adds a `` to the Accordion header.  ```jsx name=\\\"Landmarks and nesting\\\" <Accordion id=\\\"Foo-Accordion\\\" title=\\\"Foo Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Foo Accordion content</Spacing> </Accordion>  <Accordion id=\\\"Bar-Accordion\\\" title=\\\"Bar Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Bar Accordion content</Spacing>     <Accordion id=\\\"Baz-Accordion\\\" title=\\\"Baz Accordion Title\\\">         <Spacing as=\\\"div\\\" padding=\\\"md\\\">Baz Accordion content</Spacing>     </Accordion> </Accordion> ```  ### Caret position  It is possible to change the caret icon position via an `iconPosition` prop:  ```jsx name=\\\"Icon Position\\\" <Accordion     title=\\\"Accordion Title\\\"     iconPosition={useKnob('iconPosition', 'end')} >     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> ```  ### Title icon  Use the `titleIcon` prop to add any Icon to the left of the title. This forces the caret to the end.  ```jsx name=\\\"Title Icon\\\" <Accordion title=\\\"Notifications\\\" titleIcon={BellIcon}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> <Accordion title=\\\"Alert\\\" titleIcon={AttentionIcon}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> ```  ### Title badge  Use the `badgeProps` prop to add a `` to the right of the title. This is compatible with a `titleIcon`.  ```jsx name=\\\"Badge\\\" <Accordion title=\\\"Notifications\\\" titleIcon={BellIcon} badgeProps={{label:'3'}}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> <Accordion title=\\\"Alert\\\" badgeProps={{label:'3'}} iconPosition=\\\"end\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> <Accordion title=\\\"Alert\\\" badgeProps={{label:'3', backgroundColor: 'var(--ui-interaction-callout)', icon: WatchdogIcon}}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> ```  ### Animated content  The `` comes out of the box with an animated solution thanks to the prop `hasAnimatedHeight` (this uses under the hood the ``).  But there are multiple things to keep in mind:  -   this can create performance issues (as it’s animating the `height`), -   for performance reasons, the width of the children of the According won’t be able to impact the Accordion itself.\\\\     So you **need to set it yourself**.  ```jsx name=\\\"Sizes\\\" width=\\\"500px\\\" <Accordion hasAnimatedHeight size=\\\"lg\\\" title=\\\"1st Accordion\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Some content, that can be long, or short. It's up to you.</Spacing> </Accordion> <Accordion hasAnimatedHeight size=\\\"lg\\\" title=\\\"2nd Accordion\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Some content, that can be long, or short. It's up to you.</Spacing> </Accordion> <Accordion hasAnimatedHeight size=\\\"lg\\\" title=\\\"3rd Accordion\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Some content, that can be long, or short. It's up to you.</Spacing> </Accordion> ```  ## AccordionSkeleton  `` provides a skeleton for an accordion section. It has a simple collapse/expand functionality that will render a header with arrow and a conditionally displayed body.  ```jsx name=\\\"Example\\\" <AccordionSkeleton title=\\\"Accordion\\\">     <Panel>Body content</Panel> </AccordionSkeleton> ```  ## Header content  Choose custom header content to place to the right of the title  ```jsx name=\\\"HeaderContent\\\" <AccordionSkeleton     title=\\\"See more books\\\"     headerAdditionalContent={<BooksIcon marginLeft=\\\"md\\\" />} >     <Panel>Books</Panel> </AccordionSkeleton> ```  ## Variants  ### Sizes  The accordion uses the standard T-shirt sizes  ```jsx name=\\\"Sizes\\\" isList <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xxs\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xs\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"sm\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"md\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"lg\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xl\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xxl\\\"/> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Flex_content":{"__data__":"{\"id_\":\"Flex_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Flex\",\"title\":\"Flex\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Flex/flex.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"k4TQqhmwe+fRFMnMmJQVdBqeZOko/ktRi6AUjWpj/9s=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Code } from '@druids/ui/typography/Code'; import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text'; import { ExampleImage } from '@druids/ui/internals/ExampleImage';  ### Example  export const gapValues = [undefined, 0, 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'];  ```jsx partial=\\\"complexContent\\\" isHidden const content = (     <>         <Panel>             <Text>First element</Text>         </Panel>         <Panel>             <Text>                 Second element Second element                 <br />                 Second element Second element                 <br />                 Second element Second element             </Text>         </Panel>         <ExampleImage height=\\\"100\\\" width=\\\"200\\\" />         <Panel>             <Text>                 Fourth element                 <br />                 Fourth element                 <br />                 Fourth element                 <br />                 Fourth element                 <br />                 Fourth element             </Text>         </Panel>         <img src=\\\"https://imgix.bustle.com/rehost/2016/9/13/df46f351-b39c-49f4-af96-106b791f6de7.jpg?w=200&h=100&fit=crop&crop=faces&auto=format&q=100&dpr=2\\\" />     </> ); ```  ```jsx name=\\\"Example\\\" isScrollable withPartials=\\\"complexContent\\\" <Flex     {...useKnobs([         'alignItems',         'justify',         'direction',         'wrap',         { gap: { defaultValue: undefined } },     ])} >     {content} </Flex> ```  ### FlexItem  The Flex component works from the box with any nested components, however in some cases we might want to set some of the CSS flex properties (`flex-shrink`, `flex-grow` etc.) on the children — for this we have a `` component:  ```jsx name=\\\"FlexItem\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow as={<Panel variant=\\\"secondary\\\" />}>         <Text>This takes the rest</Text>     </FlexItem>     <FlexItem shrink as={Panel}>         <Text>This can shrink when there is not enough space</Text>     </FlexItem> </Flex> ```  ### Nested Flex components  In most cases there is no need to have nested Flex components. If you see a place like ``, it could probably be refactored using `` for the children, or by using a `` component for more complex layouts, or, in more simple cases, just by using `` or other more semantic elements or components.  Having big nested Flex structures can be bad for performance and maintainability, so think twice about what needs to be achieved when you see it in practice.  ## Variants  ### Basic Props  See the first example to see how props like `alignItems`, `justify`, `direction` `wrap` affect the rendering of the Flex' children.  ### Gap props  While the CSS property gap for Flex is still not yet supported enough, we have added a more simple implementation of it for our Flex component:  ```jsx partial=\\\"content\\\" isHidden const content = (     <>         <Panel>             <Text>One</Text>         </Panel>         <Panel>             <Text>Two</Text>         </Panel>         <Panel>             <Text>Three</Text>         </Panel>         <Panel>             <Text>Four</Text>         </Panel>         <Panel>             <Text>Five</Text>         </Panel>     </> ); ```  ```jsx name=\\\"Gap\\\" isFullWidth withPartials=\\\"content\\\" <Flex     {...useKnobs([         { gap: { initialValue: 'md', defaultValue: undefined } },         'direction',     ])} >     {content} </Flex> ```  Note how the gap works for both vertical and horizontal layouts.  #### Gaps in wrappable Flex  Unlike a regular Flex, the wrappable one (via a `wrap=\\\"wrap\\\"` prop, for example) would have both vertical and horizontal gaps available, set with `gapX` and `gapY` props (and also with a `gap` that sets both to the same value):  ```jsx name=\\\"WrappableGap\\\" width=\\\"200\\\" withPartials=\\\"content\\\" <Flex     {...useKnobs([         { wrap: 'wrap' },         { gapX: { initialValue: 'md', defaultValue: undefined } },         { gapY: { initialValue: 'md', defaultValue: undefined } },     ])} >     {content} </Flex> ```  **Important note:** due to the implementation details, the wrappable Flex component that have gaps would have negative margins on itself, so we should never use it alongside the `margin` props on it, as the result could be confusing.  ### Min-width and max-width  In rare cases there might be a need to have `min-width` (often for setting a `0` value as a workaround for a numerous overflow issues) or `max-width` (often as a `100%` to constrain the content to the parent box) for a Flex component. There are `minWidth` and `maxWidth` props for that:  ```jsx name=\\\"MinMaxWidth\\\" withPartials=\\\"content\\\" <Flex wrap=\\\"wrap\\\" minWidth={0} maxWidth={200}>     {content} </Flex> ```  ### Stretching the items to full width  If we'd want to stretch the items to take the full available width, we can use a `hasStretchedItems` prop.  ```jsx name=\\\"hasStretchedItems\\\" isFullWidth withPartials=\\\"content\\\" <Flex     {...useKnobs([         {             hasStretchedItems: true,             gap: { initialValue: 'md', defaultValue: undefined },         },         'wrap',     ])} >     {content}     <FlexItem as={Panel} grow={2} maxWidth={150}>         Six     </FlexItem> </Flex> ```  > Stretching works by adding `flex: 1` to the children, so if we'd want to override it there, or limit how much things could grow, we could use a `` component.  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"FlexItem_content":{"__data__":"{\"id_\":\"FlexItem_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/FlexItem\",\"title\":\"FlexItem\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/FlexItem/flex-item.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"j8Dv5e7bSbg6JmOmChcuDMQVjBFvVXKU35a9CnxDfrY=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text';  While `` doesn’t require wrapping its children with any components, some things can be achieved easier by using a FlexItem component, like setting various `flex` properties.  ### Example  By default, a FlexItem has `flex-shrink` and `flex-grow` equal to zero, so a basic FlexItem won't shrink by itself. To control these, there are `shrink` and `grow` props, that can be either a number, corresponding with its CSS value, or a boolean, with `true` corresponding with `1`, making it easier to create the common layouts.  ```jsx name=\\\"Example\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow as={<Panel variant=\\\"secondary\\\" />}>         <Text>This takes the rest</Text>     </FlexItem>     <FlexItem shrink as={Panel}>         <Text>This can shrink when there is not enough space</Text>     </FlexItem> </Flex> ```  Note how we can use an `as` prop to combine multiple elements on one DOM element, this can often be better than nesting elements like ``, so it is better to use this by default, and fall back to the nesting only for more complex cases.  ## Variants  ### Basis and min-width  Sometimes there might be a need to override a `flex-basis`, or set the `min-width` in order for a component to shrink below its `min-content`. For example, if we'd want the last item in the previous example to shrink up to zero, we could use the `minWidth` prop:  ```jsx name=\\\"minWidth\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow as={<Panel variant=\\\"secondary\\\" />}>         <Text>This takes the rest</Text>     </FlexItem>     <FlexItem shrink minWidth={0} as={Panel}>         <Text>This can shrink up to zero when there is not enough space</Text>     </FlexItem> </Flex> ```  The `flex-basis` property has more specific uses, often more dependent on a specific use case. Below is one of such cases:  ```jsx name=\\\"Basis\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow basis={0} as={Panel}>         <Text>             This element would grow to take the rest, but would shrink up to             zero when there would be not enough space.         </Text>     </FlexItem> </Flex> ```  Unlike `minWidth`, `basis` would actually work here, as it affects the implicit `min-content` value of the element.  ### Alignment  If we'd resize the above example, we would see how elements would align vertically. By default this is controlled by the `alignItems` prop on the parent `` element (and has `center` value by default).  In case we'd want to change it only on a specific FlexItem, we can do it via an `align` prop (basically, a shortcut to an `align-self` CSS property):  ```jsx name=\\\"Align\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem         align={useKnob('align', [             'center',             'flex-start',             'flex-end',             'stretch',         ])}         as={Panel}     >         <Text>One line</Text>     </FlexItem>     <FlexItem as={Panel}>         <Text>             Multiple             <br />             lines             <br />             for             <br />             demonstration         </Text>     </FlexItem> </Flex> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Grid_content":{"__data__":"{\"id_\":\"Grid_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Grid\",\"title\":\"Grid\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Grid/grid.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ogvdEfjRKEkD3vPJOlGGFNJ28yknpBxb6QthkmGkVGU=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Grid } from '@druids/ui/layout/Grid'; import { GridItem } from '@druids/ui/layout/GridItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text';  ### Example  ```jsx isFullWidth name=\\\"Example\\\" <Grid columns={1}>     <Grid>         <Panel>             <Text>foo</Text>         </Panel>         <Panel>             <Text>bar</Text>         </Panel>     </Grid>     <Grid>         <Panel>             <Text>foo</Text>         </Panel>         <Panel>             <Text>bar</Text>         </Panel>         <Panel>             <Text>baz</Text>         </Panel>     </Grid>     <Grid>         {Array(9)             .fill()             .map((_, i) => (                 <Panel key={i}>                     <Text>{i}</Text>                 </Panel>             ))}     </Grid> </Grid> ```  ## Variants  ### Fixed columns  ```jsx isFullWidth name=\\\"Fixed columns\\\" <Grid columns={3}>     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Minimum width  Set a `minWidth` on a Grid to display a responsive number of columns. (Resize the example to see it in action.)  ```jsx isFullWidth name=\\\"Minimum width\\\" <Grid minWidth={150}>     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Width  To make the width strict, use the `width` prop instead.  ```jsx isFullWidth name=\\\"Width\\\" <Grid width={250}>     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  > The `width` prop doesn’t override the minimum width. The columns will still shrink if not enough space exists.  ### Areas  ```jsx isFullWidth name=\\\"Areas\\\" <Grid areas=\\\"a b c\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Gap  ```jsx isFullWidth name=\\\"Gap\\\" <Grid minWidth={100} gap=\\\"xs\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  To define a different gap for each axis, use the `gapX` and `gapY` props instead of `gap`.  ```jsx isFullWidth name=\\\"GapXY\\\" <Grid minWidth={100} gapX=\\\"sm\\\" gapY=\\\"xl\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Custom Columns  It is possible to provide a custom string to `columns`, which will be, essentially, a custom `grid-template-columns` value:  ```jsx isFullWidth name=\\\"Custom\\\" <Grid columns=\\\"repeat(auto-fit, minmax(clamp(50% - var(--grid-gap), 200px, 100%), 1fr))\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  In the above example, we will get a grid with up to two columns, each with a min-width of `200px`, but which could go lower if there is not enough space. Resize the example to see it in action!  ### Padding  Use the `padding` prop to define space around a Grid’s exterior.  ```jsx isFullWidth name=\\\"Padding\\\" <Grid padding=\\\"xl\\\">     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Justify items  Grid items are stretched to their grid cell’s width by default. Use the `justifyItems` prop to change this.  ```jsx isFullWidth name=\\\"Justify items\\\" <Grid justifyItems=\\\"center\\\">     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Justify content  Grid content are stretched to their parent by default. Use the `justifyContent` prop to change this.  ```jsx isFullWidth name=\\\"Justify Content\\\" <div     style={{         border: '1px solid var(--ui-border)',         padding: '16px',         width: '100%',     }} >     <Grid columns=\\\"repeat(3, 100px)\\\" justifyContent=\\\"center\\\">         {Array(3)             .fill()             .map((_, i) => (                 <div                     key={i}                     style={{                         border: '1px solid var(--ui-border)',                         padding: '16px',                         width: '100px',                     }}                 >                     <Text textAlign=\\\"center\\\">{i}</Text>                 </div>             ))}     </Grid> </div> ```  ### Align content  When the height of the grid container is larger than the height of the rows, rows are stretched to fill the whole grid by default. Use the `alignContent` prop to change this and place items at the `start`, `end`, or `center` without stretching.  ```jsx isFullWidth name=\\\"Align content center\\\" <Grid alignContent=\\\"center\\\" style={{ height: 200 }}>     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  When there are multiple rows, `space-between` and `space-evenly` can also be used as values for the `alignContent` prop.  ```jsx isFullWidth name=\\\"Align content space between\\\" <Grid alignContent=\\\"space-between\\\" columns={2} style={{ height: 200 }}>     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Auto rows  By default, each row is sized by the largest item it contains. Use the `autoRows` prop to make each row the same size instead. (Resize the example to see it in action.)  ```jsx isFullWidth name=\\\"Auto rows\\\" <Grid columns={2} autoRows>     <Panel>         <Text>foo</Text>     </Panel>     <Panel>         <Text>bar</Text>     </Panel>     <Grid minWidth={100} gap=\\\"sm\\\">         {Array(4)             .fill()             .map((_, i) => (                 <Panel key={i}>                     <Text>{i}</Text>                 </Panel>             ))}     </Grid> </Grid> ```  ### Spanning  Use the `` component for more control over specific Grid items.  ```jsx isFullWidth name=\\\"Spanning\\\" <Grid columns={2}>     <Panel>         <Text>foo</Text>     </Panel>     <GridItem as={Panel} colSpan={2}>         <Text>bar</Text>     </GridItem>     <Panel>         <Text>baz</Text>     </Panel> </Grid> ```  ### Density  Use the `isDense` prop to reduce the vertical and horizontal space between Grid items.  ```jsx isFullWidth name=\\\"Density\\\" <Grid columns={2} isDense>     <Panel>         <Text>foo</Text>     </Panel>     <GridItem as={Panel} colSpan={2}>         <Text>bar</Text>     </GridItem>     <Panel>         <Text>baz</Text>     </Panel> </Grid> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Overflower_content":{"__data__":"{\"id_\":\"Overflower_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Overflower\",\"title\":\"Overflower\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Overflower/overflower.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"vQwPeYFNw+2vVbMTZCdnThfZWAuuDkBTKk1kvwtItGs=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Checkbox } from '@druids/ui/form/Checkbox'; import { Field } from '@druids/ui/form/Field'; import { FieldSet } from '@druids/ui/form/FieldSet'; import { InputText } from '@druids/ui/form/InputText'; import { RadioButtons } from '@druids/ui/form/RadioButtons'; import { Flex } from '@druids/ui/layout/Flex'; import { Overflower } from '@druids/ui/layout/Overflower'; import { Panel } from '@druids/ui/layout/Panel'; import { Spacing } from '@druids/ui/layout/Spacing'; import { Link } from '@druids/ui/nav/Link'; import { Text } from '@druids/ui/typography/Text'; import { ORDERED_SIZES } from '@druids/ui/ui-constants'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';  Overflower hides the overflowed content beyond an ellipsis and displays a `` with the original content when you hover it. It will only clip contents if the content is actually overflown, if there is enough room it is displayed without truncation.  ### Example  ```jsx width=\\\"280\\\" name=\\\"Example\\\" <Overflower     {...useKnobs([         'size',         'type',         'position',         'tooltipContent',         'beforeContent',         'afterContent',     ])} >     {useKnob(         'children',         'Just a long-long-long line of text that would get overflowed.',         {             type: 'string',             options: ['Short text'],         },     )} </Overflower> ```  ## Usage  -   `beforeContent` and `afterContent` could be achieved with another layout, but making them a part of Overflower allows for better handling of the ``.  -   When the `type` of the Overflower is `ellipsis` and its `position` is `start`, the display of the ellipsis is not perfect due to CSS limitations. (CSS doesn’t support reverse ellipsis, so we must implement a custom version of it with a regular `overflow: clip` of the content instead of a per-letter one.)  -   The `` doesn’t currently support changing its `tagName`, so the `hasInlineContext` prop disables the Tooltip component and the component is rendered with a `title` attribute instead.  ## Dos & Don’ts  -   **Do**               ```jsx name=\\\"Do\\\" isVertical isExpanded width=\\\"330\\\"         }>             Some long content that would get overflown due to being that long                  ```           use with an `as` prop as a way to make interactive elements like a `` or `` work with the ``.  -   **Don’t**               ```jsx name=\\\"Don’t\\\" isVertical isExpanded width=\\\"330\\\"                                       Some long content that would get overflown due to being that                 long                               ```           nest interactive elements inside the ``.  ## Variants  ### Gradient mask  ```jsx width=\\\"200\\\" name=\\\"Gradient mask\\\" <Overflower type=\\\"gradient\\\">     Just a long line of text that would get overflowed. </Overflower> ```  ### Padding  Tooltip can have a padding, in this case the tooltip which would appear when there is an overflow would be shown over the whole Overflower area instead of only its insides.  ```jsx width=\\\"200\\\" name=\\\"Padding\\\" <Panel padding=\\\"none\\\">     <Overflower padding=\\\"md\\\">         Just a long line of text that would get overflowed.     </Overflower> </Panel> ```  ### Max width  By default, Overflower tries to take all the available space, but it is possible to limit it with a `maxWidth` prop.  ```jsx width=\\\"300\\\" name=\\\"Max width\\\" <Overflower maxWidth={200}>     Just a long line of text that would get overflowed. </Overflower> ```  ### Line height  When the line-height of Overflower's context is big, the Overflower is positioned at the baseline. It is possible to control this using a `verticalAlign` prop.  ```jsx width=\\\"300\\\" name=\\\"lineHeight\\\" <Flex style={{ lineHeight: '100px' }}>     <Overflower maxWidth={200}>         Just a long line of text that would get overflowed.     </Overflower>     <Overflower verticalAlign=\\\"start\\\" maxWidth={200}>         Just a long line of text that would get overflowed.     </Overflower> </Flex> ```  ### Nested  It is possible to use nested Overflowers, for example when we need to have a single tooltip over multiple lines. To do so we need to add `isNested` to the inner Overflowers.  ```jsx name=\\\"Nested\\\" const line1 = 'Just a long line of text that would get overflowed.'; const line2 = 'Another shorter line.'; return (     <Overflower height=\\\"auto\\\" tooltipContent={`${line1} ${line2}`}>         <Flex direction=\\\"column\\\" alignItems=\\\"flex-start\\\">             <Overflower isNested>{line1}</Overflower>             <Overflower isNested>{line2}</Overflower>         </Flex>     </Overflower> ); ```  ### After content  A short filename, displayed as is, without a Tooltip or mask, and a long one.  ```jsx width=\\\"200\\\" name=\\\"After Content\\\" <Overflower afterContent=\\\".jpg\\\" hasExtraContentInTooltip>Design_final</Overflower> <Overflower afterContent=\\\".psd\\\" hasExtraContentInTooltip>     Design_final copy (fixed 3) preview copy (final) </Overflower> ```  ### Before content  Example with an Icon+Text, where the text disappears when it won't fit and the icon stays, with a tooltip displaying only the text.  ```jsx width=\\\"200\\\" name=\\\"Before content\\\" <Overflower size=\\\"lg\\\" beforeContent=\\\"🙀\\\" shorterContent=\\\"\\\">     Some icon </Overflower> ```  ### Position  A case for a `position`, when we need to show the end of the string.  ```jsx width=\\\"200\\\" name=\\\"Position\\\" <Overflower position=\\\"start\\\" beforeContent=\\\"@druids/\\\" hasExtraContentInTooltip>     {/* We need to split it for a better tooltip display */}     <span>         {'ui/layout/Overflower/overflower.mdx'.split(/(?=\\\\/)/).map((item) => (             <span style={{ display: 'inline-block' }} key={item}>                 {item}             </span>         ))}     </span> </Overflower> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Panel_content":{"__data__":"{\"id_\":\"Panel_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Panel\",\"title\":\"Panel\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Panel/panel.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"LGy3hQJAkkvZRRUnzii2zWZ8eKddi0EhP7vhGE1t8eQ=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Flex } from '@druids/ui/layout/Flex'; import { Image } from '@druids/ui/misc/Image'; import { ExampleImage } from '@druids/ui/internals/ExampleImage'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                                              Lorem ipsum dolor amet photo booth wolf mixtape, hell of                 williamsburg selfies kogi tumblr synth schlitz. XOXO air plant                 pok pok chia tumeric squid venmo. Bitters fingerstache beard art                 party subway tile.                              ### Example  ```jsx partial=\\\"content\\\" isHidden const content = (     <Flex alignItems=\\\"flex-start\\\">         <ExampleImage width=\\\"100\\\" height=\\\"100\\\" />         <Text marginLeft=\\\"md\\\">             Lorem ipsum dolor amet photo booth wolf mixtape, hell of             williamsburg selfies kogi tumblr synth schlitz. XOXO air plant pok             pok chia tumeric squid venmo. Bitters fingerstache beard art party             subway tile, raw denim next level asymmetrical mlkshk mumblecore             plaid trust fund 90's hella. Direct trade intelligentsia godard             chartreuse flannel etsy shoreditch small batch pok pok typewriter             palo santo pitchfork listicle green juice four dollar toast.         </Text>     </Flex> ); ```  ```jsx name=\\\"Example\\\" withPartials=\\\"content\\\" <Panel     {...useKnobs([         'padding',         'variant',         'isBorderless',         'isInteractive',         'isRounded',     ])} >     {content} </Panel> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Spacing_content":{"__data__":"{\"id_\":\"Spacing_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Spacing\",\"title\":\"Spacing\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Spacing/spacing.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"rLdv51HK1uJeXpMrRFwWWbmeIPhpitG7VO4JiNWTS/I=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Spacing } from '@druids/ui/layout/Spacing'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Panel } from '@druids/ui/layout/Panel'; import { Button } from '@druids/ui/form/Button'; import { Text } from '@druids/ui/typography/Text'; import { LEVEL_SHADOWS } from '@druids/ui/ui-constants';  ### Example  ```jsx name=\\\"Example\\\" const pStyles = {     backgroundColor: 'salmon',     display: 'inline-block', }; const cStyles = {     backgroundColor: 'lightblue',     display: 'inline-block', }; return (     <div>         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} margin=\\\"md\\\">                 (margin: md)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} padding=\\\"md\\\">                 (padding: md)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} marginRight=\\\"md\\\">                 (margin-right: md)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} paddingBottom=\\\"sm\\\">                 (padding-bottom: sm)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} marginX=\\\"md\\\" paddingY=\\\"md\\\">                 (margin-left: md, margin-right: md, padding-top: md,                 padding-bottom: md)             </Spacing>         </Spacing>     </div> ); ```  ## Variants  ### Individual sides  You can use the props `marginTop`, `marginRight`, `marginBottom`, and `marginLeft` to set the four margins based on T-shirt sizes.  ```jsx name=\\\"Individual sides\\\" <Spacing marginTop=\\\"xl\\\" marginRight=\\\"xl\\\" marginBottom=\\\"xl\\\" marginLeft=\\\"xl\\\">     <Button isTitleCased={false} label={`I have $\\\"xl\\\" margins on all sides`} /> </Spacing> ```  The margins are smart, so `margin` has less priority than `marginX` and `marginY`, which have less priority than `marginLeft`, `marginRight`, `marginBottom`, and `marginTop`.  ```jsx name=\\\"Individual sides priority\\\" <Spacing     margin=\\\"xl\\\"     marginX=\\\"md\\\"     marginY=\\\"md\\\"     marginTop=\\\"sm\\\"     marginRight=\\\"sm\\\"     marginBottom=\\\"sm\\\"     marginLeft=\\\"sm\\\" >     <Button         isTitleCased={false}         label={`I have $\\\"sm\\\" margins on all sides even if the other props are set to different values.`}     /> </Spacing> ```  ### Horizontal / Vertical  To avoid repetition, you can use the props `marginX`, `marginY`, and `margin`, which will set the margin on, respectively, the **left** and **right** margins, the **top** and **bottom** margins, and **all four** margins.  ```jsx name=\\\"Horizontal Vertical\\\" <Spacing marginX=\\\"md\\\" marginY=\\\"sm\\\">     <Button         isTitleCased={false}         label={`I have an x margin of $\\\"md\\\" and a y margin of $\\\"sm\\\".`}     /> </Spacing> ```  ### Additional margins  In addition to the T-shirt sizes, you can also use the keyword `auto` and `none`.  ```jsx name=\\\"Additional margins\\\" <Spacing margin=\\\"xl\\\" marginRight=\\\"none\\\">     <Button         isTitleCased={false}         label={`I have $\\\"xl\\\" margins on all sides except the right one.`}     /> </Spacing> <Spacing marginX=\\\"auto\\\">     <Spacing as=\\\"div\\\" style={{ width: 'fit-content' }}>         <Button             isTitleCased={false}             label={`I have an auto horizontal margin.`}         />     </Spacing> </Spacing> ```  ### Alternate rendering  As Spacing injects classNames in its first child, not every margin has an effect due to the `display` CSS property.  ```jsx name=\\\"Alternate rendering\\\" <Spacing marginTop=\\\"xl\\\" marginRight=\\\"xl\\\" marginBottom=\\\"xl\\\" marginLeft=\\\"xl\\\">     <Text>         I have \\\"xl\\\" margins on all sides — but they have no effect on the top         and bottom because I have a span layout.     </Text> </Spacing> ```  To change this, you can specify to Spacing to render `as` another component / element.  ```jsx name=\\\"Alternate rendering as\\\" <Spacing     as=\\\"div\\\"     marginTop=\\\"xl\\\"     marginRight=\\\"xl\\\"     marginBottom=\\\"xl\\\"     marginLeft=\\\"xl\\\" >     <Text>         I, too, have \\\"xl\\\" margins on all sides — and now they have an effect         because I have an automatically created parent block element.     </Text> </Spacing> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"IntegrationLogo_content":{"__data__":"{\"id_\":\"IntegrationLogo_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"uTCg0VBQDHkR1AVgyD2gY3b4dfQvo5nmFG3g/YGf2wQ=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { PopoverMenuItem } from '@druids/ui/dialogs/PopoverMenuItem'; import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import DosAndDontsExample_4A_Light from '@druids/ui/form/Select/dos-and-donts-images/select-2a-light.png'; import DosAndDontsExample_4A_Dark from '@druids/ui/form/Select/dos-and-donts-images/select-2a-dark.png'; import DosAndDontsExample_4B_Light from '@druids/ui/form/Select/dos-and-donts-images/select-2b-light.png'; import DosAndDontsExample_4B_Dark from '@druids/ui/form/Select/dos-and-donts-images/select-2b-dark.png'; import { InputText } from '@druids/ui/form/InputText'; import { Label } from '@druids/ui/form/Label'; import { ArrowRightIcon } from '@druids/ui/icons/ArrowRight'; import { CancelIcon } from '@druids/ui/icons/Cancel'; import { CheckIcon } from '@druids/ui/icons/Check'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Link } from '@druids/ui/nav/Link'; import { Flex } from '@druids/ui/layout/Flex'; import { Panel } from '@druids/ui/layout/Panel'; import { Image } from '@druids/ui/misc/Image'; import { IntegrationLogo } from '@druids/ui/misc/IntegrationLogo'; import { Tag } from '@druids/ui/pills/Tag'; import { Text } from '@druids/ui/typography/Text';  import DosAndDontsExample_1A_Light from './dos-and-donts-images/integration-logo-1a-light.png'; import DosAndDontsExample_1A_Dark from './dos-and-donts-images/integration-logo-1a-dark.png'; import DosAndDontsExample_1B_Light from './dos-and-donts-images/integration-logo-1b-light.png'; import DosAndDontsExample_1B_Dark from './dos-and-donts-images/integration-logo-1b-dark.png';                        {/* @if IS_PRIVATE */}  > If you need a logo to be created or edited, see the Creating Logos page.  {/* @endif */}  ### Example  ```jsx name=\\\"Example\\\" <IntegrationLogo     {...useKnobs([         { variant: { options: ['avatar-chip', 'avatar', 'small', 'large'] } },         { integrationId: 'amazon-web-services' },         { width: 64 },     ])} /> ```  ## Usage  The DRUIDS Logo Gallery displays a list of all possible integration logos.  The name of each logo is passed to the IntegrationLogo via the `integrationId` prop.  Some also have “aliases”: additional values that can be passed to `integrationId` to display the same logo. They’re listed on the Logo Aliases page.  ### Dos & Don’ts  -   **Do**                                        <Image                     src={[DosAndDontsExample_1A_Light, DosAndDontsExample_1A_Dark]}                     alt=\\\"A list of events in a 3-column table, with the columns representing event source, event message, and date. The event source column consists of large, easy-to-recognize logos.\\\"                 />                                make logos as large and recognizable as possible — at least 24px&thinsp;&times;&thinsp;24px, but ideally even larger. In almost every case, a layout can be reconfigured to give a logo more room (e.g., most tables).          Large, recognizable logos reflect better on our partners and ourselves — and they’re better at quickly orienting users.  -   **Don’t**                                        <Image                     src={[DosAndDontsExample_1B_Light, DosAndDontsExample_1B_Dark]}                     alt=\\\"A list of events in a 3-column table, with the columns representing event source, event message, and date. The event source column consists only of very small, hard-to-recognize logos.\\\"                 />                                make logos small and inscrutable.          The only acceptable place to display a smaller logo is in a granular interactive component with a naturally constrained size (e.g., Facet, Button, ``, ``, Tag, etc.).  -   **Do**                                      use `variant=\\\"avatar\\\"` if a logo _absolutely must_ be smaller than 32px&thinsp;&times;&thinsp;32px. (But try to make logos as big as possible anyway; see the first Do/Don’t above.)  -   **Don’t**                                      use `variant=\\\"avatar-chip\\\"` if the the logo can’t be at least 32px&thinsp;&times;&thinsp;32px.  -   **Do**               <Image             src={[DosAndDontsExample_4A_Light, DosAndDontsExample_4A_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, and its text and logo have been changed to white, making for high reading contrast.\\\"         />           use the reversed/knockout version of a logo (the `isColorReversed` prop) when it sits atop a “selected” background.  -   **Don’t**               <Image             src={[DosAndDontsExample_4B_Light, DosAndDontsExample_4B_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, but its text remains gray and its logo hasn’t changed, making for low reading contrast.\\\"         />           allow the base version of a logo to persist when it sits atop a “selected” background.  ## Variants  All integration logos are SVGs, so they scale to any size with no loss of fidelity.  They come in 4 “variants”: `avatar-chip`, `avatar`, `small`, and `large`.  | Variant                                                  | Aspect Ratio | Examples                                                                                                                                                                                                                                                                                     | Description                                                                                                                            | Themed?                                                                                                                                                                                                      | Usage                                                                                                                                                                              | | -------------------------------------------------------- | ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `avatar-chip` | 1:1          |  | Square logo which typically is icon-only — no wordmark. Often analogous to the favicon of the company’s website or mobile app icon.    | No. Always full-color with a white or colored background and a shadow.                                                       | See Dos & Don’ts above                                                                               | | `avatar`           | 1:1          |                 | Like `avatar-chip` — but doesn’t sit inside a containing element                                                                       | Yes. Light theme version is full-color. Dark theme version is white (slightly dimmed to match the color of dark theme text). | See Dos & Don’ts above | | `small`             | 2:1          |                           | Typically contains an icon and wordmark. For most companies you can think of it as the “full” logo.                                    | Yes. Light theme version is full-color. Dark theme version is white (slightly dimmed to match the color of dark theme text). |                                                                                                                                                                                    | | `large`             | 1.5625:1     |                           | Identical to `small` in many cases. In other cases, the stacked version when companies provide multiple versions of their “full” logo. | Yes. Light theme version is full-color. Dark theme version is white (slightly dimmed to match the color of dark theme text). |                                                                                                                                                                                    |  ## Color  ### Theming  Each variant except `avatar-chip` has a `reversed` version, which is used for the dark theme.  > **Warning** > > **We use all-white artwork for every `reversed` logo** because determining the ideal dark theme logo on a case-by-case basis is impossible at our scale. All-white is a consistent pattern that can always apply and ensures a cohesive overall look and feel.  `reversed` logos are dimmed slightly to match the brightness of the DRUIDS --ui-text color in the dark theme.  ### Forcing reversed color  The `isColorReversed` prop forces the `reversed` version of the logo, regardless of light or dark theme.  This is most commonly used when a logo sits within a colored block, which typically indicates it’s selected in some way.  ```jsx name=\\\"Forcing reversed color\\\" isList <Panel shouldShrinkToContent>     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"go\\\" /> </Panel> <Panel shouldShrinkToContent>     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"javascript\\\" /> </Panel> <Panel     isBorderless     shouldShrinkToContent     style={{ background: 'var(--ui-interaction-primary)' }} >     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"python\\\" isColorReversed /> </Panel> <Panel shouldShrinkToContent>     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"ruby\\\" /> </Panel> ```  ### Inherited color  The `hasInheritedColor` prop renders the logo in a single color inherited from its parent. For example, using an `hasInheritedColor` logo inside the `` component means the logo will inherit the `var(--ui-text)` color.  > **Warning: Use with caution** > > -   This may not produce a coherent result for complex logos. > -   It’s ignored for any variant of the Datadog logo to prevent Bits from being rendered with ghostly “x-ray eyes.” > -   It’s ignored for the `avatar-chip` variant of every logo.  ```jsx name=\\\"hasInheritedColor\\\" isList <IntegrationLogo     hasInheritedColor     variant=\\\"small\\\"     integrationId=\\\"amazon-web-services\\\" /> <Text variant=\\\"tertiary\\\">     <IntegrationLogo         variant=\\\"large\\\"         hasInheritedColor         integrationId=\\\"amazon-web-services\\\"     /> </Text> <Link>     <IntegrationLogo         variant=\\\"avatar\\\"         hasInheritedColor         integrationId=\\\"amazon-web-services\\\"     /> </Link> <Text>     <IntegrationLogo         variant=\\\"large\\\"         hasInheritedColor         integrationId=\\\"_datadog\\\"     /> </Text> ```  ## Cloud provider services (“sub-integrations”)  The 3 major cloud providers — AWS, Azure, and Google Cloud — have dozens of “sub-integrations” each. These are the individual services that make up the platform (Amazon EC2, Azure VM, Google Compute Engine, etc.).  Use the `isDisplayedAsCloudProvider` prop to replace an individual sub-integration logo with its parent cloud provider’s logo.  ```jsx name=\\\"Cloud_provider_services\\\" <Flex gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-ec2\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-ec2\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-s3\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-s3\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-cloudfront\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-cloudfront\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"xl\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-vm\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-vm\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-networkinterface\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-networkinterface\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-app-services\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-app-services\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"xl\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-compute-engine\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-compute-engine\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-container-engine\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-container-engine\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-cloud-run\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-cloud-run\\\"         isDisplayedAsCloudProvider     /> </Flex> ```  ## Fallback  Use the `integrationIdFallback` prop to specify a fallback logo to display if the primary `integrationId` doesn’t match an existing logo.  This is useful when `integrationId` values come from an API for which the full possibility of data sources isn’t known.  ```jsx name=\\\"Fallback\\\" <IntegrationLogo     variant=\\\"small\\\"     integrationId=\\\"foobarbaz\\\"     integrationIdFallback=\\\"_datadog\\\" /> ```  If the `integrationId` doesn’t match a known value and `integrationIdFallback` isn’t set (or if `integrationIdFallback` also is invalid), nothing will display.  ```jsx name=\\\"Invalid source\\\" <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"foobarbaz\\\" /> ```  ## Dimension overrides  Use the `width` and `height` props to override default dimensions.  Make sure to respect the aspect ratio of the variant in question.  ```jsx name=\\\"Dimension overrides\\\" isList <IntegrationLogo variant=\\\"large\\\" width={100} height={64} integrationId=\\\"apache\\\" /> <IntegrationLogo variant=\\\"large\\\" width=\\\"60%\\\" height=\\\"60%\\\" integrationId=\\\"apache\\\" /> ```  ## As Icon component  The `isIcon` prop renders an IntegrationLogo as an `` component instead of an ``.  This is useful when the logo must appear inside another element that accepts an Icon, like a `` or ``.  > **Two important notes to remember** > > 1. Only the `avatar-chip` or `avatar` variants should be used with `isIcon`. Never use it with the `large` or `small` variants. > 2. Make sure to set `isColorReversed` if the logo must become `reversed` conditionally — e.g., when the element has a dark background on hover.  ```jsx partial=\\\"logoAsIcon\\\" isHidden const LogoAsIcon = ({ ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         isIcon     /> );  const LogoAsIconThatChangesOnHover = ({ isHovered, ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         isIcon         isColorReversed={isHovered}     /> ); ```  ```jsx name=\\\"As Icon component\\\" withPartials=\\\"logoAsIcon\\\" isList <Button size=\\\"lg\\\" label=\\\"I’m a Button\\\" icon={LogoAsIcon} /> <Button     size=\\\"lg\\\"     isBorderless     isPrimary     label=\\\"I’m a Button variant with a dark hover state\\\"     icon={LogoAsIconThatChangesOnHover} /> <Tag     size=\\\"lg\\\"     isClickable     label=\\\"i’m:a-tag-which-always-has-a-dark-hover-state\\\"     icon={LogoAsIconThatChangesOnHover} /> <PopoverMenuItem     label=\\\"I’m a PopoverMenuItem\\\"     description=\\\"Which always has a dark hover state \\\"     hasIntegrationLogo     icon={LogoAsIconThatChangesOnHover} /> ```  The `isIcon` prop also can be used together with the `hasInheritedColor` prop:  ```jsx partial=\\\"logoAsIcon\\\" isHidden const LogoAsIcon2 = ({ ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         hasInheritedColor         isIcon     /> );  const LogoAsIconThatChangesOnHover2 = ({ isHovered, ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         hasInheritedColor         isIcon         isColorReversed={isHovered}     /> ); ```  ```jsx name=\\\"As Icon component\\\" withPartials=\\\"logoAsIcon\\\" isList <Button size=\\\"lg\\\" label=\\\"I’m a Button\\\" icon={LogoAsIcon2} /> <Button     size=\\\"lg\\\"     isBorderless     isPrimary     label=\\\"I’m a Button variant with a dark hover state\\\"     icon={LogoAsIconThatChangesOnHover2} /> <Tag     size=\\\"lg\\\"     isClickable     label=\\\"i’m:a-tag-which-always-has-a-dark-hover-state\\\"     icon={LogoAsIconThatChangesOnHover2} /> <PopoverMenuItem     label=\\\"I’m a PopoverMenuItem\\\"     description=\\\"Which always has a dark hover state \\\"     hasIntegrationLogo     icon={LogoAsIconThatChangesOnHover2} /> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"MessageBox_content":{"__data__":"{\"id_\":\"MessageBox_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/MessageBox\",\"title\":\"MessageBox\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/MessageBox/message-box.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"M4d+u0sGMwYlhoHFBxY1P0Yo1V4yF/LQM2qaFG/cN0Y=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { RefreshIcon } from '@druids/ui/icons/Refresh'; import { Spacing } from '@druids/ui/layout/Spacing'; import { MessageBox } from '@druids/ui/misc/MessageBox'; import { Link } from '@druids/ui/nav/Link'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Text } from '@druids/ui/typography/Text'; import { Flex } from '@druids/ui/layout/Flex'; import { AttentionIcon } from '@druids/ui/icons/Attention'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                MessageBox text content        ### Example  ```jsx isVerticalList name=\\\"Example\\\" <MessageBox>     <Text>Basic MessageBox</Text> </MessageBox> <MessageBox>     <Text>         You can put rich content in a MessageBox, too. You can{' '}         <Link isExternal href=\\\"#\\\">             include links         </Link>         . You can         <InlineCode>include InlineCode snippets</InlineCode>.     </Text>     <Spacing as=\\\"div\\\" marginTop=\\\"md\\\">         <Text>             And you even can{' '}             <Button size=\\\"sm\\\" isPrimary label=\\\"Include Buttons\\\" />         </Text>     </Spacing> </MessageBox> ```  > **Warning** > Wrap MessageBox content with components like `` and `` to ensure a consistent display of typographic content. However, use the `title` prop to set an optional title (instead of the DRUIDS `` component).  ## Variants  ### Levels  ```jsx name=\\\"Levels\\\" permutations=\\\"level\\\" <MessageBox {...useKnobs(['level', 'isDismissible'])}>     <Text>         {useKnob('children', '', {             fallback: ({ level }) =>                 `${                     {                         default: 'Default',                         success: 'Success',                         warning: 'Warning',                         danger: 'Danger',                     }[level]                 } MessageBox`,         })}     </Text> </MessageBox> ```  ### Dismissible  ```jsx name=\\\"Dismissible\\\" const [nb, setNb] = React.useState(1); if (nb === 0) {     return <Button onClick={() => setNb(1)} icon={RefreshIcon} label=\\\"Reset\\\" />; } return (     <>         <MessageBox isDismissible onDismiss={() => setNb(nb - 1)}>             <Text>                 A MessageBox can be optionally dismissible. It disappears with a                 snappy animation and a callback is fired{' '}                 <InlineCode>onDismiss</InlineCode>.             </Text>         </MessageBox>     </> ); ```  ### Title  Use the `title` prop to accentuate a MessageBox by adding a bold, color-coded title. The coordinating left stripe also is added automatically to any MessageBox with a title.  ```jsx name=\\\"Title\\\" permutations=\\\"level\\\" <MessageBox     {...useKnobs(['level', 'isDismissible'])}     title=\\\"Title of the MessageBox\\\" >     <Text>         I am a MessageBox         <br />         with the <InlineCode>title</InlineCode> prop set.     </Text> </MessageBox> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Link_content":{"__data__":"{\"id_\":\"Link_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/Link\",\"title\":\"Link\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/Link/link.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"s+CMNThn8TNm5lzLJ6oPOc/RElTb+QwhDRaqMK/U+U8=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Link } from '@druids/ui/nav/Link'; import { Panel } from '@druids/ui/layout/Panel'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                I’m a simple Link        {/* @if IS_PRIVATE */}  > **Warning: Heads up** > When inside the Datadog SPA, always import the SPALink instead. > > The `` is a thin wrapper around the DRUIDS ``, but automatically connected to our router for faster page transitions. > Even for external links, please prefer using ``. > > Check out the differences when migrating.  {/* @endif */}  ### Example  ```jsx name=\\\"Example\\\" knobsState=\\\"hidden\\\" <Link href=\\\"#example\\\" {...useKnobs(['size', 'linkType', 'isExternal'])}>     I’m a simple Link </Link> ```  > The Link component should be used for _all_ links within the Datadog platform. This ensures a consistent presentation and that a consistent set of attributes, like `rel` and `target`, are applied when necessary.  ## Variants  ### Types  ```jsx isVerticalList name=\\\"Types\\\" permutations=\\\"linkType\\\" <Link href=\\\"#types\\\" {...useKnobs(['linkType', 'size', 'isExternal'])}>     {useKnob('children', '', {         fallback: ({ linkType }) =>             `I’m a ${                 {                     default: 'default Link',                     plain: 'plain Link',                     'color-on-hover': 'Link that only has colors on hover',                     'no-class-names': 'Link with no styles at all',                 }[linkType]             }`,     })} </Link> ```  > **Warning** > Only the `default` type of Link has `font-family` styles applied.  ### Sizes  ```jsx isVerticalList name=\\\"Sizes\\\" permutations=\\\"size\\\" <Link href=\\\"#types\\\" {...useKnobs(['size', 'linkType', 'isExternal'])}>     {useKnob('children', '', {         fallback: ({ size }) => `I’m an ${size.toUpperCase()} link`,     })} </Link> ```  ### External  The `isExternal` prop will open the link in another tab by injecting the appropriate `rel` and `target` attributes into the underlying `` element.  For example, we must use it when we link to things outside the Datadog platform. Or if we always want to open an internal link in a new tab.  By default an `` is added as well. It can be disabled by setting the `hasExternalIcon` prop to `false`.  ```jsx isVerticalList name=\\\"External\\\" <Link     href=\\\"https://datadoghq.com\\\"     {...usePermutations({         regular: {},         isExternal: true,         'no external icon': {             isExternal: true,             hasExternalIcon: false,         },     })}     {...useKnobs(['size', 'linkType'])} >     {useKnob('children', '', {         fallback: ({ isExternal, hasExternalIcon }) =>             isExternal && hasExternalIcon === false                 ? 'External link without an icon'                 : isExternal                 ? 'External link that opens in a new tab'                 : 'Link that opens in the same tab',     })} </Link> ```  ### Alternate component  Complex links (e.g., ones that use react-router instead of `href`) can be passed in the `component` prop. They will be styled to appear identical to a regular Link.  This is an escape hatch so the Link can avoid relying on any routing logic (non-DRUIDS code). This is the only way routing links should be used with Link.  ```jsx partial=\\\"router-link\\\" isMemoized isHidden const CustomLink = ({ href, className, children }) => (     <a         className={className}         href={href}         onClick={(event) => {             event.preventDefault();             alert(`Redirect to ${href}`);         }}     >         {children}     </a> ); ```  ```jsx withPartials=\\\"router-link\\\" name=\\\"Alternate component\\\" <Link component={<CustomLink href=\\\"/hello\\\" />}>Custom link</Link> <Link component={CustomLink} href=\\\"/world\\\">Custom link</Link> ```  ### Inline links  By default (and for legacy reasons) our links could have an `inline-block` display. For contexts like inside `` we would prefer them to be `inline` — for this we can use an `isInline` prop:  ```jsx name=\\\"Inline\\\" width=\\\"300px\\\" <Panel>     Hello,     <Link href=\\\"#hello\\\">I'll wrap completely, as I'm inline-block.</Link> </Panel> <Panel>     Hello,     <Link isInline href=\\\"#hello\\\">I'll wrap word-by-word, as I'm inline.</Link> </Panel> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"TabList_content":{"__data__":"{\"id_\":\"TabList_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/TabList\",\"title\":\"TabList\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/TabList/tab-list.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"r7iptiMKtSBYUxcUovzydYw4T3DacvXHlhhylpgs/ho=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { TabList, Tab } from '@druids/ui/nav/TabList'; import { Panel } from '@druids/ui/layout/Panel'; import { Spacing } from '@druids/ui/layout/Spacing'; import { ContentSwitcher } from '@druids/ui/layout/ContentSwitcher'; import { Text } from '@druids/ui/typography/Text'; import { List } from '@druids/ui/typography/List'; import { RadioButtons } from '@druids/ui/form/RadioButtons'; import { ExternalLinkIcon } from '@druids/ui/icons/ExternalLink'; import { LightningFilledIcon } from '@druids/ui/icons/LightningFilled'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                <Tab             key=\\\"hello\\\"             value=\\\"hello\\\"             isActive             label=\\\"hello\\\"             featureStatus=\\\"beta\\\"             maxCount={50000}         />         <Tab             key=\\\"hello\\\"             value=\\\"It’s Me\\\"             isActive={false}             label=\\\"It’s Me\\\"             maxCount={50000}         />         <Tab             key=\\\"some-page\\\"             value=\\\"Some Page\\\"             isActive={false}             label=\\\"Some Page\\\"             maxCount={50000}         />        TabList is the standard component for navigating between sections of content. It’s populated with `` components.  -   For multi-purpose lists that invoke a callback and keep the user on the same page, use size `MEDIUM` for the Tabs. -   Any Tab can be made a standard HTML link by using the `href` prop. -   Alternatively, you can pass a link component (such as `` or ``) by using the `linkComponent` prop. This will automatically apply styling to the component. -   For lists that navigate between entire sections of the app, use size `LARGE` for the Tabs and ``/`` inside `linkComponent`. -   You can include an icon to the right of a Tab’s text by using the `icon` prop. -   You can include a count pill to the right of a Tab’s text by using the `count` prop. It will be capped at 99 by default (this value can be tweaked with the `maxCount` prop). Values are displayed in human readable format.  ### Example  ```jsx partial=\\\"menu\\\" isHidden isMemoized const menu = [     {         key: 'hello',         name: 'Hello',         isDisabled: false,         controls: 'my-hello-panel-id',         featureStatus: 'beta',     },     {         key: 'me',         name: \\\"It's me\\\",         isDisabled: false,         controls: 'my-itsme-panel-id',         tooltipOnTab: 'It still is me',     },     {         key: 'toto',         href: 'https://www.datadoghq.com/',         name: 'External page',         isDisabled: false,         icon: ExternalLinkIcon,     },     {         key: 'foo',         name: 'Disabled',         isDisabled: true,         controls: 'my-foo-panel-id',     },     {         key: 'count',         name: 'Count',         controls: 'count',         count: 11345,     },     {         key: 'suffix',         name: 'Has a suffix',         controls: 'suffix',         rightElement: (             <StatusPill level=\\\"success\\\" icon={LightningFilledIcon}>                 Live             </StatusPill>         ),     }, ]; ```  ```jsx partial=\\\"wrapper\\\" isHidden const hasConstantHeight = useKnob('Content has constant height', false); const TabListWrapper = React.useCallback(({ overflow, size }) => {     const [isActive, setIsActive] = React.useState(menu[0].key);     return (         <>             <TabList overflow={overflow} size={size}>                 {menu.map((tab) => (                     <Tab                         {...tab}                         key={tab.key}                         value={tab.key}                         featureStatus={tab.featureStatus}                         isActive={isActive === tab.key}                         onSelectTab={setIsActive}                         label={tab.name}                         maxCount={50000}                     />                 ))}             </TabList>             <ContentSwitcher                 hasConstantHeight={hasConstantHeight}                 index={isActive}                 content={{                     hello: (                         <div id=\\\"my-hello-panel-id\\\">                             <Panel isBorderless>                                 <Text>… darkness my old friend.</Text>                             </Panel>                         </div>                     ),                     me: (                         <div id=\\\"my-itsme-panel-id\\\">                             <Panel isBorderless>                                 <img src=\\\"https://media.giphy.com/media/3oEjI2hdCm6HODQsdq/giphy.gif\\\" />                             </Panel>                         </div>                     ),                     toto: null,                     foo: (                         <div id=\\\"my-foo-panel-id\\\">                             <Panel isBorderless>                                 <Text>                                     Here’s some content you’re never going to                                     see.                                 </Text>                             </Panel>                         </div>                     ),                     count: (                         <div id=\\\"my-count-panel-id\\\">                             <Panel isBorderless>                                 <Text>                                     I learned how to count when I was young...                                 </Text>                             </Panel>                         </div>                     ),                     suffix: (                         <div id=\\\"my-suffix-panel-id\\\">                             <Panel isBorderless>                                 <Text>Example of a trailing pill</Text>                             </Panel>                         </div>                     ),                 }}             />         </>     ); }, []); ```  ```jsx withPartials=\\\"menu,wrapper\\\" <TabListWrapper /> ```  Note how we can use a `` component with a `hasConstantHeight` prop in order to maintain the same height for all the rendered components, so the content won't jump when we switch between the tabs.  ## Variants  ### Overflow  You can choose how the TabList will behave when it doesn't have the room to render every tab:  ```jsx withPartials=\\\"menu,wrapper\\\" <TabListWrapper overflow={useKnob('overflow')} /> ```  -   Use the `scroll` prop when overflowing content should scroll horizontally (this is the default behavior) -   Or use the `popover` prop to wrap each overflowing tab into a Popover.  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Badge_content":{"__data__":"{\"id_\":\"Badge_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/Badge\",\"title\":\"Badge\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/Badge/badge.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"WBqSdVUwCVgwSpqxIvLIoMgNW8Ey1OlMldIJXf8U0wQ=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Popover } from '@druids/ui/dialogs/Popover'; import { Button } from '@druids/ui/form/Button'; import { ArrowDownIcon } from '@druids/ui/icons/ArrowDown'; import { TagsIcon } from '@druids/ui/icons/Tags'; import { WatchdogIcon } from '@druids/ui/icons/Watchdog'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { Badge } from '@druids/ui/pills/Badge'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { Title } from '@druids/ui/typography/Title'; import themeColors from '@druids/ui/theme-colors.json'; import { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants';          ### Example  ```jsx name=\\\"Example\\\" <Badge label=\\\"Watchdog\\\" icon={WatchdogIcon} /> ```  ## Usage  ### Dos & Don’ts  -   **Do**                          limit the amount of text inside a Badge. It’s designed to be a concise identifier.  -   **Don’t**                          put long phrases or sentences inside a Badge.  -   **Don’t**                          use a Badge as a replacement for a ``. The concept of “tag” has a distinct visual presentation throughout Datadog.  -   **Do**                            Alert             Warn             OK                    use a `` instead of a Badge when communicating an explicit status — especially one that’s typically expressed with “stoplight” colors.  -   **Don’t**                                                                          use a Badge as replacement for a ``.  -   **Do**                                             Metrics                          <Popover                 isHoverable                 isPadded                 width={300}                 handle={}             >                 I’m a Popover that contains additional information when hovering                 on the Badge.                                 trigger an action via hover when a Badge provides additional contextual info about another element (like a count next to a text header or label).  -   **Don’t**                                             Metrics                          <Popover                 isPadded                 handle={}             >                 I should’ve been triggered on hover instead.                                 hide an action behind a click when a Badge provides additional contextual info about another element (like a count next to a text header or label). Users may attempt to _hover_ a Badge in this context, but they likely won’t expect to click.  -   **Do**               <Badge             label=\\\"Proper Contrast\\\"             backgroundColor=\\\"#111\\\"             textColor=\\\"#fff\\\"         />           make sure that custom text and background colors have sufficient contrast (a minimum of 4.5:1 using the WCAG 2.1 AA standard).  -   **Don’t**               <Badge             label=\\\"Not Enough Contrast\\\"             backgroundColor=\\\"lightgray\\\"             textColor=\\\"#999\\\"         />           use custom text and background colors without checking their contrast ratios.  ## Variants  ### Sizes  There are 4 supported sizes: `xs`, `sm`, `md`, and `lg`  ```jsx isList name=\\\"Size\\\" <Badge label=\\\"Extra small badge\\\" size=\\\"xs\\\" icon={WatchdogIcon} /> <Badge label=\\\"Small badge\\\" size=\\\"sm\\\" icon={WatchdogIcon} /> <Badge label=\\\"Medium badge\\\" icon={WatchdogIcon} /> <Badge label=\\\"Large badge\\\" size=\\\"lg\\\" icon={WatchdogIcon} /> ```  ### Colors  The Badge supports custom background and text color values using `backgroundColor` and `textColor` props  > **Important notes** > > -   If `backgroundColor` is set but `textColor` is not, a light or dark text color will automatically be applied depending on the brightness of `backgroundColor`. > -   `textColor` can’t be used on its own. If `textColor` is set but `backgroundColor` is not, nothing will take effect. > -   Both props accept either a CSS variable or an array of 2 colors, for the light and dark themes, respectively. > -   Although the examples use hardcoded values in practice, you should always create a CSS variable instead of importing from the JSON if at all possible.  ```jsx isList name=\\\"Colors\\\" <Badge     label=\\\"Blue badge\\\"     icon={WatchdogIcon}     backgroundColor=\\\"darkblue\\\"     textColor=\\\"lightblue\\\" /> <Badge     label=\\\"Pink badge\\\"     icon={WatchdogIcon}     backgroundColor=\\\"var(--ui-interaction-callout)\\\" /> <Badge label=\\\"Green badge\\\" icon={WatchdogIcon} backgroundColor=\\\"#96dda2\\\" /> <Badge     label=\\\"Yellow badge\\\"     icon={WatchdogIcon}     backgroundColor={[         themeColors.underlying['@yellow-500--light'],         themeColors.underlying['@yellow-500--dark']     ]} /> ```  ### Icons  Use the `icon` prop to add any Icon to the left or right of the Badge  ```jsx isList name=\\\"Icon\\\" <Badge label=\\\"Right icon badge\\\" size=\\\"lg\\\" icon={WatchdogIcon} /> <Badge     label=\\\"Left icon badge\\\"     iconPosition=\\\"right\\\"     size=\\\"lg\\\"     icon={WatchdogIcon} /> <Badge label=\\\"No icon badge\\\" size=\\\"lg\\\" /> ```  ### Count  Use the `count`, `maxCount`, and `level` props to use a formatted count value. This will override `label` and custom colors.  ```jsx isList name=\\\"Count\\\" <Badge count={100} size=\\\"xs\\\" /> <Badge count={8362} maxCount={10000} size=\\\"xs\\\" /> <Badge count={8362} maxCount={10000} level=\\\"warning\\\" size=\\\"xs\\\" /> <Badge count={8362} maxCount={10000} level=\\\"danger\\\" size=\\\"xs\\\" /> <Badge count={0} size=\\\"xs\\\" /> ```  ### Interaction  Use the `isInteractive` prop to give any Badge a differentiated hover state to indicate that it’s an interaction target. It can open a `` or `` on hover.  ```jsx isList name=\\\"Interaction\\\" <Badge label=\\\"Watchdog\\\" isInteractive icon={WatchdogIcon} /> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"StatusPill_content":{"__data__":"{\"id_\":\"StatusPill_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"GXFXJzHQw6NVj6s+s1jGYnUX8IPAVgjxKhlPPTtLN3E=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import { ArrowDownIcon } from '@druids/ui/icons/ArrowDown'; import { ArrowUpIcon } from '@druids/ui/icons/ArrowUp'; import { AttentionCircledIcon } from '@druids/ui/icons/AttentionCircled'; import { FlakyTestIcon } from '@druids/ui/icons/FlakyTest'; import { LightningFilledIcon } from '@druids/ui/icons/LightningFilled'; import { LockIcon } from '@druids/ui/icons/Lock'; import { MinusIcon } from '@druids/ui/icons/Minus'; import { PlusIcon } from '@druids/ui/icons/Plus'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { ChangePill } from '@druids/ui/pills/ChangePill'; import { HttpStatusPill } from '@druids/ui/pills/HttpStatusPill'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { Text } from '@druids/ui/typography/Text'; import { Table } from '@druids/ui/table/Table'; import { Panel } from '@druids/ui/layout/Panel'; import { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator'; import themeColors from '@druids/ui/theme-colors.json';       404   ### Example  ```jsx isList name=\\\"Base Example\\\" <StatusPill level=\\\"default\\\">StatusPill</StatusPill> <StatusPill level=\\\"success\\\" icon={LightningFilledIcon} /> <StatusPill level=\\\"warning\\\" /> ```  ## Usage  ### Dos & Don’ts  -   **Do**                            <ChangePill                 value=\\\"1,000\\\"                 direction=\\\"up\\\"                 suffix=\\\"%\\\"                 level=\\\"danger\\\"             />                                 use a `` instead of a StatusPill to display color-coded change with a directional indicator.  -   **Don’t**                                             1,000%                                           2x                                           1,000%                                           2x                          + 1,000%             – 2x                    use a StatusPill to display color-coded change with a directional indicator.  -   **Do**                            200             301             404             503             512             error                              200                                           301                                           404                                           503                                 use an `` instead of a StatusPill to display [HTTP status codes](). Its API automatically maps status codes to colors and provides corresponding descriptions.  -   **Do**                                                              Warning                                                            Success                                 include a text representation of the status when an empty (color-only) StatusPill is displayed.  -   **Don’t**                                                             display an empty (color-only) StatusPill without an accompanying text representation of the status. Users with color-blindness or partial/no sight won’t be able to interpret it.  -   **Do**                            Proper Contrast                    make sure that custom text and background colors have sufficient contrast (a minimum of 4.5:1 using the WCAG 2.1 AA standard).  -   **Don’t**                            Not Enough Contrast                    use custom text and background colors without checking their contrast ratios.  -   **Do**                                                                                  Lorem ipsum dolor sit amet consectetur, adipisicing elit. Assumenda tempora sed ipsam in nesciunt                                                     use the `hasAutoHeight` prop only when there are no `children` and the pill is displayed as a vertical bar.  -   **Don’t**                            A pill                                 use `hasAutoHeight` when there are `children` nor as a label instead of a status marker.  ### Custom colors  Sometimes, a StatusPill needs to be colored differently than the `levels` scale. Use the `backgroundColor` and `textColor` props to define custom colors.  > **Important notes** > > -   `backgroundColor` takes precedence over `level` if both are set. > -   When `backgroundColor` is used, `isSoft` has no effect. > -   If `backgroundColor` is set but `textColor` is not, a light or dark text color will automatically be applied depending on the brightness of `backgroundColor`. > -   `textColor` can’t be used on its own. If `textColor` is set but `backgroundColor` is not, nothing will take effect. > -   Both props accept either a CSS variable or an array of 2 colors, for the light and dark themes, respectively. > -   Although the examples use hardcoded values in practice, you should always create a CSS variable instead of importing from the JSON if at all possible.  ```jsx isList name=\\\"Custom colors\\\" <StatusPill backgroundColor=\\\"var(--ui-interaction-secondary)\\\">Custom bg color from a CSS variable</StatusPill>  <StatusPill backgroundColor={[themeColors.underlying['@yellow-500--light'], themeColors.underlying['@yellow-500--dark']]}>Custom bg color set directly in the light and dark themes</StatusPill>  <StatusPill backgroundColor={[\\\"#efe8ef\\\", \\\"#551734\\\"]} textColor={[\\\"#551734\\\", \\\"#efe8ef\\\"]}>Custom bg and text colors set directly in the light and dark themes</StatusPill> ```  ### Interaction  Use the `isClickable` prop to give any StatusPill a differentiated hover state to indicate that it’s an interaction target.  ```jsx isList name=\\\"Interaction\\\" <StatusPill level=\\\"default\\\" isClickable>Default</StatusPill> <StatusPill level=\\\"success\\\" isClickable>Success</StatusPill> <StatusPill level=\\\"warning\\\" isClickable>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isClickable>Danger</StatusPill> ```  ```jsx isList name=\\\"Interaction soft\\\" <StatusPill level=\\\"default\\\" isSoft isClickable>Default</StatusPill> <StatusPill level=\\\"success\\\" isSoft isClickable>Success</StatusPill> <StatusPill level=\\\"warning\\\" isSoft isClickable>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isSoft isClickable>Danger</StatusPill> ```  ```jsx isList name=\\\"Interaction custom\\\" <StatusPill backgroundColor=\\\"var(--ui-interaction-secondary)\\\" isClickable>Custom bg color from a CSS variable</StatusPill>  <StatusPill backgroundColor={[themeColors.underlying['@yellow-500--light'], themeColors.underlying['@yellow-500--dark']]} isClickable>Custom bg color set directly in the light and dark themes</StatusPill>  <StatusPill backgroundColor={[\\\"#efe8ef\\\", \\\"#551734\\\"]} textColor={[\\\"#551734\\\", \\\"#efe8ef\\\"]} isClickable>Custom bg and text colors set directly in the light and dark themes</StatusPill> ```  ### Truncation  By default, StatusPill text is truncated with an ellipsis if it can’t fit horizontally in its container.  Use the `hasResponsiveBehavior` prop to automatically add a `` that reveals the truncated text on hover.  ```jsx isList name=\\\"Truncation\\\" width=\\\"128\\\" <StatusPill level=\\\"default\\\" hasResponsiveBehavior>Default that overflows</StatusPill> <StatusPill level=\\\"success\\\" hasResponsiveBehavior>Success that overflows</StatusPill> <StatusPill level=\\\"warning\\\" hasResponsiveBehavior>Warning that overflows</StatusPill> <StatusPill level=\\\"danger\\\" hasResponsiveBehavior>Danger that overflows</StatusPill> ```  ## Variants  ### Levels  There are 4 StatusPill `level`s: `danger`, `warning`, `success`, and `default`.  ```jsx isList name=\\\"Levels\\\" <StatusPill level=\\\"default\\\">Default</StatusPill> <StatusPill level=\\\"success\\\">Success</StatusPill> <StatusPill level=\\\"warning\\\">Warning</StatusPill> <StatusPill level=\\\"danger\\\">Danger</StatusPill> ```  ### Sizes  StatusPills come in 4 `size`s: `xs`, `sm`, `md`, and `lg`.  > Unlike most other DRUIDS components, `xs` is the default size — not `md`.  ```jsx isList name=\\\"Sizes\\\" <StatusPill level=\\\"default\\\">Default XS</StatusPill> <StatusPill level=\\\"success\\\" size=\\\"sm\\\">Success SM</StatusPill> <StatusPill level=\\\"warning\\\" size=\\\"md\\\">Warning MD</StatusPill> <StatusPill level=\\\"danger\\\" size=\\\"lg\\\">Danger LG</StatusPill> ```  ### Strength  Use the `isSoft` prop when a StatusPill needs a more subdued appearance. This typically is reserved for situations where the StatusPill is not the primary focus or piece of information in the given context.  ```jsx isList name=\\\"Strength\\\" <StatusPill level=\\\"default\\\" isSoft>Default</StatusPill> <StatusPill level=\\\"success\\\" isSoft>Success</StatusPill> <StatusPill level=\\\"warning\\\" isSoft>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isSoft>Danger</StatusPill> ```  ### Full-width  The `isFullWidth` prop makes any StatusPill fill its container horizontally. This is ideal for tabular contexts, when a StatusPill appears in the same column of each table row.  ```jsx isList name=\\\"Width\\\" width=\\\"200\\\" <StatusPill level=\\\"default\\\" isFullWidth>Default</StatusPill> <StatusPill level=\\\"success\\\" isFullWidth>Success</StatusPill> <StatusPill level=\\\"warning\\\" isFullWidth>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isFullWidth>Danger</StatusPill> ```  ### Icons  Use the `icon` prop to add any DRUIDS icon to the left of a StatusPill’s text.  If there’s no text, the StatusPill will be square.  ```jsx isList name=\\\"Icons\\\" <StatusPill level=\\\"success\\\" icon={LightningFilledIcon}>Live</StatusPill> <StatusPill level=\\\"success\\\" icon={LightningFilledIcon} /> <StatusPill level=\\\"warning\\\" icon={FlakyTestIcon} size=\\\"sm\\\" /> <StatusPill level=\\\"danger\\\" icon={AttentionCircledIcon} size=\\\"md\\\" /> <StatusPill level=\\\"default\\\" icon={LockIcon} size=\\\"lg\\\" /> ```  ### Empty  An empty StatusPill can be displayed in one of two ways. To render either, simply don’t include any `children` content.  #### Vertical bar  ```jsx isList name=\\\"Vertical bar\\\" <StatusPill level=\\\"default\\\" /> <StatusPill level=\\\"success\\\" /> <StatusPill level=\\\"warning\\\" /> <StatusPill level=\\\"danger\\\" /> ```  #### Circle  Use `isCircle` to render an empty circle instead.  ```jsx isList name=\\\"Vertical bar\\\" <StatusPill level=\\\"default\\\" isCircle /> <StatusPill level=\\\"success\\\" isCircle /> <StatusPill level=\\\"warning\\\" isCircle /> <StatusPill level=\\\"danger\\\" isCircle /> ```  ### Count  Use the `count` prop to prepend a number to a StatusPill  ```jsx isList name=\\\"Count\\\" <StatusPill level=\\\"default\\\" count=\\\"15\\\">Default</StatusPill> <StatusPill level=\\\"success\\\" count=\\\"1\\\">Success</StatusPill> <StatusPill level=\\\"warning\\\" count=\\\"9\\\">Warning</StatusPill> <StatusPill level=\\\"danger\\\" count=\\\"50\\\">Danger</StatusPill> ```  ### Auto height  Use the `hasAutoHeight` prop in cases where the StatusPill needs to stretch vertically to fill the available context.  ```jsx partial=\\\"data\\\" isHidden isMemoized const data = [     { id: 0, foo: 'Success', baz: true, bar: 1200 },     { id: 1, foo: 'Warning', baz: false, bar: 5200 }, ]; ```  ```jsx id=\\\"auto-height-example\\\" withPartials=\\\"data\\\" <Table     data={data}     columns={React.useMemo(         () => [             {                 id: 'status',                 accessor: 'baz',                 Cell: ({ value }) => (                     <StatusPill                         hasAutoHeight                         level={                             value                                 ? 'success'                                 : value !== undefined                                 ? 'warning'                                 : 'danger'                         }                     />                 ),                 width: 'min-content',                 cellProps: { rowSpan: 2 },                 verticalAlign: 'stretch',             },             { Header: 'Season', accessor: 'foo' },             { Header: 'Avg. Temp', accessor: 'bar', type: 'numeric' },             {                 id: 'second-floor',                 type: 'rowGroup',                 columns: [                     {                         id: 'description',                         Cell: () => 'Lorem ipsum dolor sit amet.',                         cellProps: { colSpan: 2 },                     },                 ],             },         ],         [],     )} /> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Table_content":{"__data__":"{\"id_\":\"Table_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/table/Table\",\"title\":\"Table\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/table/Table/table.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1jRpi9jmZSXorsbJz5+BvI7efqx3gMvbOPL82FmUG0Y=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Checkbox } from '@druids/ui/form/Checkbox'; import { Code } from '@druids/ui/typography/Code'; import { FieldSet } from '@druids/ui/form/FieldSet'; import { InputText } from '@druids/ui/form/InputText'; import { RadioButtons } from '@druids/ui/form/RadioButtons'; import { AttentionIcon } from '@druids/ui/icons/Attention'; import { CancelIcon } from '@druids/ui/icons/Cancel'; import { CheckIcon } from '@druids/ui/icons/Check'; import { ExternalLinkIcon } from '@druids/ui/icons/ExternalLink'; import { PencilIcon } from '@druids/ui/icons/Pencil'; import { RefreshIcon } from '@druids/ui/icons/Refresh'; import { TrashIcon } from '@druids/ui/icons/Trash'; import { VolumeMuteIcon } from '@druids/ui/icons/VolumeMute'; import { Grid } from '@druids/ui/layout/Grid'; import { Flex } from '@druids/ui/layout/Flex'; import { Panel } from '@druids/ui/layout/Panel'; import { PercentBar } from '@druids/ui/measures/PercentBar'; import { HighlightKeywords } from '@druids/ui/misc/HighlightKeywords'; import { IntegrationLogo } from '@druids/ui/misc/IntegrationLogo'; import { Table } from '@druids/ui/table/Table'; import {     compareStrings,     compareNumbers, } from '@druids/ui/table/Table/plugin-hooks/use-sorting'; import { Link } from '@druids/ui/nav/Link'; import { Text } from '@druids/ui/typography/Text'; import { TextPlaceholder } from '@druids/ui/typography/TextPlaceholder'; import { Title } from '@druids/ui/typography/Title'; import { PopoverMenuItem } from '@druids/ui/dialogs/PopoverMenuItem'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { TableExpander } from '@druids/ui/table/Table/TableExpander'; import { useCopyAction } from '@druids/ui/lib/action/use-copy-action';  import ColumnsAndDataSection from '@druids/ui/table/Table/docs/columns-and-data.section.mdx'; import CSSVariablesAPI from '@druids/ui/table/Table/docs/css-variables-api.section.mdx'; import SummarySection from '@druids/ui/table/Table/docs/summary.section.mdx'; import SortingSection from '@druids/ui/table/Table/docs/sorting.section.mdx'; import ManualStateSection from '@druids/ui/table/Table/docs/manual-state.section.mdx'; import SelectableRowsSection from '@druids/ui/table/Table/docs/selectable-rows.section.mdx'; import EmptyStateSection from '@druids/ui/table/Table/docs/empty-state.section.mdx'; import ExtraColumnsSection from '@druids/ui/table/Table/docs/extra-columns.section.mdx'; import SubComponentSection from '@druids/ui/table/Table/docs/sub-component.section.mdx'; import GlobalFilterSection from '@druids/ui/table/Table/docs/global-filter.section.mdx';  export * from '@druids/ui/table/Table/docs/global-filter.section.mdx'; import MenuSection from '@druids/ui/table/Table/docs/menu.section.mdx';  export * from '@druids/ui/table/Table/docs/menu.section.mdx'; import ColumnActionsSection from '@druids/ui/table/Table/docs/column-actions.section.mdx'; import PaginationSection from '@druids/ui/table/Table/docs/pagination.section.mdx'; import PlaceholdersSection from '@druids/ui/table/Table/docs/placeholders.section.mdx';  export * from '@druids/ui/table/Table/docs/placeholders.section.mdx'; import RowActionsSection from '@druids/ui/table/Table/docs/row-actions.section.mdx';  export * from '@druids/ui/table/Table/docs/row-actions.section.mdx'; import PresentationSection from '@druids/ui/table/Table/docs/presentation.section.mdx'; import ActionTraySection from '@druids/ui/table/Table/docs/action-tray.section.mdx';  export * from '@druids/ui/table/Table/docs/action-tray.section.mdx'; import ComplexExampleSection from '@druids/ui/table/Table/docs/complex-example.section.mdx';  export * from '@druids/ui/table/Table/docs/complex-example.section.mdx'; import PerformanceSection from '@druids/ui/table/Table/docs/performance.section.mdx'; import { useHighlightedRows } from '@druids/ui/table/Table/shared/use-highlighted-rows'; import { useSlicedColumns } from '@druids/ui/table/Table/shared/use-sliced-columns';  export * from '@druids/ui/table/Table/docs/performance.section.mdx'; import ExtraElementsSection from '@druids/ui/table/Table/docs/extra-elements.section.mdx'; import RowsAndCellsProps from '@druids/ui/table/Table/docs/rows-and-cells-props.section.mdx'; import MiscSections from '@druids/ui/table/Table/docs/misc.section.mdx'; import HiddenColumnsSection from '@druids/ui/table/Table/docs/hidden-columns.section.mdx'; import ResizableColumnsSection from '@druids/ui/table/Table/docs/resizable-columns.section.mdx'; import AdvancedSection from '@druids/ui/table/Table/docs/advanced.section.mdx'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                <Table             columns={[                 { Header: 'Season', accessor: 'foo' },                 { Header: 'Avg. temp', accessor: 'bar', type: 'numeric' },             ]}             data={[                 { id: 0, foo: 'Winter', bar: 30, baz: true },                 { id: 1, foo: 'Spring', bar: 63, baz: false },                 { id: 2, foo: 'Summer', bar: 92, baz: true },                 { id: 3, foo: 'Fall', bar: 72 },             ]}         />        ### Example  ```jsx partial=\\\"columns\\\" isHidden isMemoized const columns = [     { Header: 'Season', accessor: 'foo' },     { Header: 'Avg. temp', accessor: 'bar', type: 'numeric' }, ]; ```  ```jsx partial=\\\"data\\\" isHidden isMemoized const data = [     { id: 0, foo: 'Winter', bar: 30, baz: true },     { id: 1, foo: 'Spring', bar: 63, baz: false },     { id: 2, foo: 'Summer', bar: 92, baz: true },     { id: 3, foo: 'Fall', bar: 72 }, ]; ```  ```jsx partial=\\\"moreData\\\" isHidden const getMoreData = (count, template = (value) => `whatever ${value}`) =>     Array(Math.min(count, 10000)) // To prevent occasional freeze if too high         .fill({})         .map((item, index) => ({             id: index,             foo: template(Math.random()),             bar: index + 1,         })); ```  ```jsx name=\\\"Example\\\" withPartials=\\\"columns,data\\\" <Table columns={columns} data={data} /> ```  ## Variants  ### Complex    ## Columns API    ## CSS Variables API    ## Variants  ### Resizing    ### Custom header & footer    ### Summary element    ### Search & filter inside table    ### Table settings menu    ### Toggling columns    ### Pagination    ### Sorting    ### Column header actions    ### Loading with placeholders    ### Empty state    ### Styling    ### Editing columns    ### Row actions    ### Selectable rows    ### Action tray    ### Sub component    ### Adding Extra Props    ### Manual state management    ### Tweaking performance    ### Miscellaneous    ### Advanced    \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Code_content":{"__data__":"{\"id_\":\"Code_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"LzgMi0fMoueq9TDKxolsJv7LOwUhJT1ClNinkCVYZic=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Code } from '@druids/ui/typography/Code'; import { ToggleButtons } from '@druids/ui/form/ToggleButtons'; import { KeyboardShortcut } from '@druids/ui/typography/KeyboardShortcut'; import React from 'react'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                {`{     \\\"name\\\": \\\"dogweb\\\",     \\\"version\\\": \\\"0.0.1\\\",     \\\"description\\\": \\\"Dogweb frontend\\\",     \\\"private\\\": true }`}        ### Examples  export const Sample = () => {     const [value, setValue] = React.useState('json');     const samples = {         json: {             label: 'JSON',             content: `{     \\\"name\\\": \\\"dogweb\\\",     \\\"version\\\": \\\"0.0.1\\\",     \\\"description\\\": \\\"Dogweb frontend - To update this file, refer to the wiki\\\",     \\\"private\\\": true }`,         },         sql: {             label: 'SQL',             content:                 'select h.name from vs.host_alias ha join vs.host h on ha.host_id = h.id where ha.org_id = ? and ha.name = ? vs.host h and  ha.host_id = h.id where ha.org_id = ? and ha.name = ?',         },         typescript: {             label: 'TypeScript',             content: `interface Props {     name: string;     amount: number; } function yourComponent(props: Props) {     const { x, y } = useMousePosition();     return (                      x: {x}, y: {y}              ); }`,         },         yaml: {             label: 'YAML',             content: `# Log section - type: file path: /var/log/pg_log/pg.log log_processing_rules:   - type: multi_line     pattern: \\\\\\\\d{4}\\\\\\\\-(0?[1-9]|1[012])\\\\\\\\-(0?[1-9]|[12][0-9]|3[01]) `,         },     };     const options = Object.keys(samples).map((s) => {         return { label: samples[s].label, value: s };     });     return (         <>             <ToggleButtons                 options={options}                 isTitleCased={false}                 value={value}                 onChange={setValue}                 marginBottom=\\\"sm\\\"             />             {samples[value].content}              ); };    ## Usage  ```jsx partial=\\\"Code\\\" <Code language=\\\"sql\\\">     {`select h.name from vs.host_alias ha join vs.host h on ha.host_id = h.id where ha.org_id = ? and ha.name = ? vs.host h and  ha.host_id = h.id where ha.org_id = ? and ha.name = ?`} </Code> ```  #### Supported languages  Supported languages are defined by the `LANGUAGES` union type. They are:  -   Bash (`'bash'`) -   BrightScript (`'brightscript'`) -   C# (`'csharp'`) -   C++ (`'cpp'`) -   CSS (`'css'`) -   CSV (`'csv'`) -   Dart (`'dart'`) -   DIFF (`'diff'`) -   Docker (`'docker'`) -   Go (`'go'`) -   GraphQL (`'graphql'`) -   HTML (`'html'`) -   INI (`'ini'`) -   Java (`'java'`) -   JavaScript (`'javascript'`) -   JSON (`'json'`) -   JSX (`'jsx'`) -   Kotlin (`'kotlin'`) -   Log (`'log'`) -   Markdown (`'markdown'`) -   PHP (`'php'`) -   Puppet (`'puppet'`) -   Python (`'python'`) -   Python Traceback (`'python-traceback'`) -   Ruby (`'ruby'`) -   SQL (`'sql'`) -   SVG (`'svg'`) -   Swift (`'swift'`) -   Objective-C (`'objectivec'`) -   TypeScript (`'typescript'`) -   XML (`'xml'`) -   YAML (`'yaml'`)  ## Variants  ### Sizes  Code supports 3 different sizes: `sm` `md` and `lg`. Default `size` is set to `md`.  ```jsx name=\\\"Sizes\\\" <Code size=\\\"sm\\\">     Code block example in \\\"sm\\\" size </Code> <Code size=\\\"md\\\" marginTop=\\\"lg\\\">     Code block example in \\\"md\\\" (default) size </Code> <Code size=\\\"lg\\\" marginTop=\\\"lg\\\">     Code block example in \\\"lg\\\" size </Code> ```  ### Editable code  A Code block can be made editable if the `onChange` prop is set. This works with every supported language.  ```jsx partial=\\\"EditableCode\\\" name=\\\"EditableCode\\\" isMemoized const EditableCode = ({ children, ...props }) => {     const [text, setText] = React.useState(children);     return (         <Code {...props} onChange={setText}>             {text}         </Code>     ); }; ```  ### Validation  An editable Code block can have ``-style validation.  ```jsx withPartials=\\\"EditableCode\\\" name=\\\"Validation\\\" <EditableCode     language=\\\"json\\\"     validationMessage=\\\"This is valid\\\"     validationLevel=\\\"success\\\"     onSubmit={() => alert('success!')} >{`{     \\\"am_I_editable\\\": true }`}</EditableCode> ```  ### Width  A Code block is full-width by default. Set `isFullWidth={false}` to make it fit to its content.  ```jsx width=\\\"500\\\" name=\\\"Width\\\" <Code isFullWidth={false} language=\\\"json\\\">{`{     \\\"isFullWidth\\\": false }`}</Code> ```  ### Naked  The border and background of a Code block can be removed with the `isNaked` prop. This is used by the editable Code variant.  ```jsx name=\\\"Naked\\\" <Code isNaked language=\\\"json\\\">{`{     \\\"isNaked\\\": true }`}</Code> ```  ### Line numbers and highlights  A Code block can show line numbers with the `hasLineNumbers` prop and highlight one or more specific lines with the `markers` prop.  ```jsx isFullWidth name=\\\"Line numbers and highlights\\\" <Code     language=\\\"typescript\\\"     hasLineNumbers     markers={[7, 8, 9, 10, 11]} >{`interface Props {     name: string;     amount: number; } function yourComponent(props: Props) {     const { x, y } = useMousePosition();     return (         <div>             x: {x}, y: {y}         </div>     ); }`}</Code> ```  We can highlight specific columns inside the highlighted lines.  ```jsx isFullWidth name=\\\"Line numbers and highlights\\\" <Code     language=\\\"typescript\\\"     {...useKnobs([         {             hasLineNumbers: true,             doesHighlightWholeLines: {                 type: 'radiobuttons',                 defaultValue: undefined,                 options: [undefined, true, false],             },         },     ])}     markers={[         {             line: 5,             column: [                 { start: 4, end: 4 },                 { start: 7, end: 9 },                 { start: 21, end: 28 },             ],         },         {             line: 6,             column: [                 { start: 4, end: 14 },                 { start: 4, end: 25 },             ],         },         { line: 9, column: 5 },         { line: 10, column: [{ start: 9, end: 13 }] },         { line: 11, column: [{ start: 12, end: 999 }] },     ]} >{`interface Props {     name: string;     amount: number; } // We can highlight multiple columns per line // Overlapping highlights are only highlighted once function yourComponent(props: Props) {     const { x, y } = useMousePosition();     return (         <div>             x: {x}, y: {y}         </div>     ); }`}</Code> ```  #### Marker override options  Sometimes we might want to enhance the highlighted code even more, for example we could want to add tooltips over certain nodes, or over the marked spans.  To do so we can supply the `as` prop to either the line marker, or a column marker:  ```jsx name=\\\"Marker Overrides\\\" width=\\\"450\\\" // --- MarkerTooltip const MarkerTooltip = React.useCallback(     ({ content, 'data-line-code': dataLineCode, ...props }) => {         const ref = React.useRef(null);         return (             <Tooltip                 content={`${content}. Faulty code: ${dataLineCode}`}                 reference={ref}             >                 <span ref={ref} {...props} />             </Tooltip>         );     },     [], ); // --- return (     <Code         language=\\\"typescript\\\"         markers={[             {                 line: 2,                 column: [                     {                         start: 33,                         end: 44,                         level: useKnob('level', [                             'danger',                             'warning',                             'success',                             undefined,                         ]),                         as: (                             <MarkerTooltip                                 content={`Type '\\\"Watermelon\\\"' is not assignable to type 'Fruit'. ts(2322)`}                             />                         ),                     },                 ],             },         ]}     >         {`type Fruit = 'Apple' | 'Tomato';\\\\nexport const basket: Fruit[] = ['Watermelon'];`}     </Code> ); ```  > Note that the markers also accept the `level` prop, allowing styling errors and warnings from the box.  > **Warning** > Also note that inside editable code interactive components like `` won't be interactive due to the way the editable `` is implemented: it would have a textarea over the content area, preventing any mouse events from going to the interactive elements added to the highlighted code.  ### Padding  A Code block’s padding can be changed to any `size` from the DRUIDS spacing scale.  ```jsx isFullWidth name=\\\"Padding\\\" <Code padding=\\\"lg\\\" language=\\\"json\\\">{`{     \\\"padding\\\": \\\"lg\\\" }`}</Code> ```  ### Copy and paste  When a Code block contains only text, a `` appears by default in the top-right corner. It can be hidden with `hasCopyButton={false}`.  When a Code block contains rich content, the `` is hidden unless we pass an explicit value to be copied via the `copyValue` prop.  ```jsx name=\\\"Copy and paste\\\" <Code hasCopyButton={false} language=\\\"json\\\">{`{     \\\"If we don’t see the CopyButton\\\": \\\"hasCopyButton={false}\\\" }`}</Code> ```  ```jsx name=\\\"CopyValue\\\" <Code copyValue=\\\"Just the text\\\" language=\\\"json\\\">{`{     \\\"More than just\\\": \\\"<strong>text</stong>\\\" }`}</Code> ```  We can have a callback when the copy button is clicked.  ```jsx name=\\\"Copy and paste callback\\\" <Code     onCopy={() => {         console.log('Text has been copied');     }} >     Callback when text is copied </Code> ```  ### More  Code is built on top of react-simple-code-editor and accepts most of its props.  It also accepts props from ``, which means it’s possible to redefine the number of spaces for the  key, add event handles, etc.  ```jsx withPartials=\\\"EditableCode\\\" name=\\\"More\\\" <EditableCode     tabSize={2}     onFocus={() => console.log('focused!')}     language=\\\"json\\\" >{`{     \\\"onFocus\\\": true }`}</EditableCode> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Text_content":{"__data__":"{\"id_\":\"Text_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Text\",\"title\":\"Text\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Text/text.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"sGNCW3BLmpv/BY2bvVrtXEAw869LuZwu0t7FkNvwRU4=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Text } from '@druids/ui/typography/Text'; import { Flex } from '@druids/ui/layout/Flex'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';       Regular text   ### Example  export const knobsSetup = {     variant: {         previewStyle: ({ variant }) =>             variant === 'knockout'                 ? { background: 'var(--ui-background-shade)' }                 : {},     }, };  ```jsx name=\\\"Example\\\" <Text     {...usePermutations({         regular: {},         isItalic: true,         isMonospace: true,     })}     {...useKnobs(['size', 'variant', 'weight', knobsSetup])} >     {useKnob('children', '', {         fallback: ({ isItalic, isMonospace }) =>             `${                 isItalic ? 'Italic' : isMonospace ? 'Monospace' : 'Regular'             } text`,     })} </Text> ```  ## Variants  ### Sizes  There are 7 different Text sizes plus an ability to use an `inherit` for the size from a CSS context (otherwise with an undefined `size` the Text component would get its size from a `React.Context` of a wrapping `` or would fall back to a `md`).  ```jsx name=\\\"Sizes\\\" permutations=\\\"size\\\" <Text     {...useKnobs([         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ size }) =>             ({                 inherit: 'Inherited',                 xxl: 'Extra extra large',                 xl: 'Extra large',                 lg: 'Large',                 md: 'Medium (default)',                 sm: 'Small',                 xs: 'Extra small',                 xxs: 'Extra extra small',             }[size]),     })} </Text> ```  ### Styles  There are 8 supported styles.  > Note that the `knockout` variant is the same for light & dark modes, so we need to always provide a contrasting background for it.  ```jsx name=\\\"Styles\\\" permutations=\\\"variant\\\" <Text     {...useKnobs([         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ variant }) =>             ({                 default: 'Primary (default)',                 secondary: 'Secondary',                 tertiary: 'Tertiary',                 knockout: 'Knockout',                 success: 'Success',                 warning: 'Warning',                 danger: 'Danger',                 disabled: 'Disabled',             }[variant]),     })} </Text> ```  ### Weights  There are 3 supported weights. Note that `thin` should be rarely used outside of ``.  > Currently, the `bold` weight of Text component is rendered in `semibold` since it provides better visual balance compared to true `bold`. There are few places in the app that uses true `bold` weight, but the Text component does not support true `bold` as of now.  ```jsx name=\\\"Weights\\\" permutations=\\\"weight\\\" <Text     {...useKnobs([         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ weight }) =>             `${                 {                     normal: 'Normal (default)',                     bold: 'Bold',                     thin: 'Thin',                 }[weight]             } text`,     })} </Text> ```  ### Transforms  Text exposes props to control the 3 most common `text-transform` CSS properties, as well as an ability to remove it via a `none` value.  ```jsx name=\\\"Transforms\\\" permutations=\\\"textTransform\\\" <Text     {...useKnobs([         'textTransform',         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ textTransform }) =>             `${                 {                     none: 'Default',                     uppercase: 'Uppercased',                     capitalize: 'Capitalized',                     lowercase: 'Lowercased',                 }[textTransform]             } text`,     })} </Text> ```  ### Align  ```jsx name=\\\"Align\\\" isList isFullWidth <Flex direction=\\\"column\\\" isFullWidth alignItems=\\\"stretch\\\">     <Text as=\\\"div\\\" align=\\\"center\\\">         Centered text. Curae consectetur fermentum ut odio blandit cras.     </Text>     <Text as=\\\"div\\\" align=\\\"right\\\">         Right aligned text. Curae consectetur fermentum ut odio blandit cras.     </Text> </Flex> ```  ### Ellipsis  Text with the `hasEllipsis` prop must be placed inside a container with an explicit `width` for the truncation to take effect.  ```jsx name=\\\"Ellipsis\\\" <Text hasEllipsis>     I’m Text with an ellipsis. Resize me to see the truncation in action. </Text> ```  ### Overflow-wrap (word-break)  If we want to control how text wraps inside a narrow context, we can use an `overflowWrap` prop.  ```jsx partial=\\\"wrapperStyle\\\" isHidden // Making it so the difference between `anywhere` // and `break-word` would be visible. const wrapperStyle = {     display: 'block',     minWidth: '50px',     width: 'min-content',     maxWidth: '100%',     overflow: 'auto', }; ```  ```jsx name=\\\"OverflowWrap\\\" permutations=\\\"overflowWrap\\\" width=\\\"240\\\" withPartials=\\\"wrapperStyle\\\" <Text overflowWrap={useKnob('overflowWrap')} style={wrapperStyle}>     {useKnob('children', '', {         fallback: ({ overflowWrap }) =>             `A text containing a veryveryveryveryveryveryveryveryveryveryvery long word with “${overflowWrap}” overflow-wrap.`,     })} </Text> ```  > **Warning** > The difference between `anywhere` and `break-word` can be seen only in very specific contexts where the `min-content` of the element matters — `anywhere` makes the element shrink, while `break-word` does not. See an MDN entry for `overflowWrap` for more details.  ### Inheritance  If a `color`, `text-align`, or `font-weight` rule needs to be inherited from a Text’s parent or ancestor, use the `shouldInherit` prop.  It can be combined with the `align`, `variant`, and `weight` props if a specific part of the inheritance needs to be overridden.  ```jsx name=\\\"Inheritance\\\" <div style={{ color: 'var(--ui-status-success-contrast)', fontWeight: 'bold' }}>     <Text shouldInherit>         I’m Text that’s inheriting color and weight from my parent div.     </Text>     <br />     <br />     <Text shouldInherit size=\\\"xl\\\" weight=\\\"normal\\\">         I’m inheriting color, too — but I’m defining my own size and weight.     </Text> </div> ```  ### Margins  Text accepts `margin` props directly. It’s not necessary to wrap it in a `` component. (Margins will only have an effect if the specific instance of the Text component has a compatible CSS `display` property.)  ```jsx name=\\\"Margins\\\" <Flex alignItems=\\\"center\\\">     <Text marginBottom=\\\"sm\\\">I have a SMALL marginBottom.</Text>     <Text marginX=\\\"md\\\">I have a MEDIUM marginX.</Text>     <Text marginTop=\\\"sm\\\">I have a SMALL marginTop.</Text> </Flex> ```  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"about-druids_content":{"__data__":"{\"id_\":\"about-druids_content\",\"metadata\":{\"url\":\"\",\"title\":\"about-druids\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageAboutDruids/about-druids.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"j+XjnAhbcKQBDcHVs+P7pp5P673me6Fvg+kPUqcDxM8=\",\"text\":\"import { Title } from '@druids/styleguide-builder/components/ui/Title'; import { VisualExample } from '@druids/styleguide-builder/components/ui/VisualExample'; import imgDruidsLoupeDark from '@druids/styleguide/components/foundations/PageTipsAndTricks/images/druids-loupe_dark.png'; import imgDruidsLoupeLight from '@druids/styleguide/components/foundations/PageTipsAndTricks/images/druids-loupe_light.png'; import { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage'; import { Link } from '@druids/styleguide/lib/routing/Link'; import { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import * as React from 'react';  ## What is DRUIDS?  DRUIDS stands for “Datadog Reusable User Interface Design System.” It’s the primary UI foundation of the Datadog platform as well as numerous internal apps for our company.  (Is the name redundant? Yes! Was the acronym — and the accompanying logo — too awesome to pass up? Also yes!)  Its goals are to help designers and developers throughout Datadog build products and features that feel familiar to customers, interconnected, and highly usable — and to do it all efficiently.  ---  ## Is it available to use externally?  **As of now, DRUIDS is for Datadog internal use only.** We’ve made the docs public to share our approach to building UI at scale, to show how we try to make naturally complex workflows feel as user-friendly as possible, and to highlight ways we keep DRUIDS an integral part of the daily workflow for hundreds of people throughout Datadog.  Read more on the Datadog engineering blog!  ---  ## Internal tips and tricks  A design system isn’t much without designers and developers actually _using_ it to build features and products for end users. To that end, we’ve built a bunch of helpful tooling into DRUIDS to facilitate ease of use and encourage high quality contributions. These include:  ### DRUIDS Loupe  Datadog employees can press a keyboard shortcut on any Datadog page to see every DRUIDS component. Hovering discloses links to view it in source code, design tools, and the docs.  <VisualExample     src={[imgDruidsLoupeLight, imgDruidsLoupeDark]}     imageWidth={583}     hasImageShadow />  ### Contribution guidelines  DRUIDS always should be evolving as the needs of Datadog and our customers evolve. It’s important that contributions back to the design system by developers and designers throughout the company have a clear set of expectations while simultaneously feeling lightweight.  We publish a set of contribution guidelines, which we ask internal contributors to follow. They’re mostly common sense, and the goal isn’t to be intimidating or inefficient. They’re simply a way to reinforce best practices from the ground up.  #### 🧬 Core considerations  It should be  -   Easy for developers to implement -   Easy for designers to understand -   Flexible enough to integrate with our other components -   Resilient enough to be modified in the future -   Rendered in a way that’s completely independent and free from external dependencies  ---  #### 🏗 Structure and formatting  -   It should not import dependencies or styles from anywhere outside DRUIDS. -   It should be written in TypeScript. -   It should have a well-thought-out name.     -   We strive for names that are generic enough to be intuitive,         specific enough to eliminate ambiguity, and flexible enough to         account for future modifications.     -   A good real-life example is `` instead of ``, which clearly         conveys what it does but allows us to replace it with something         else in the future without having to rename the component.  ---  #### 🔖 Prop naming  -   Boolean props should be prefixed with `is`, `are`, `has`, `will`, `can`, `should`, `do`, or `does` (e.g., `isDisabled`, `hasBorder`, `canBeEmpty`, `willFocusOnMount`).     -   These all refer to state and make the overall component API easier to reason about.     -   Boolean props should not use a positive-negative construction (e.g., `shouldSkipRender` or `hasNoBorder`). -   Handler props should start with the `on` prefix (e.g., `onChange`, `onSelect`, `onClick`) and must not use past tense.  ---  #### 📝 Documentation  -   Each of its props should be clearly documented in its `.tsx` file.     -   These are used to automatically generate the prop descriptions for each component in this style guide. -   It should have a one- or two-sentence description in its `.metadata.ts` file. -   The same description should be added as part of the JSDoc comment block in the component’s `.tsx` file. -   If applicable, its related components should be listed in its `.metadata.ts` file. -   It should have a co-located, kebab-cased SVG illustration (e.g., `input-text.illustration.svg`). -   Its `.mdx` style guide entry should be thorough and well-considered.  ---  #### 💄 Styling  -   It should use the BEM naming convention, starting with the module name (e.g., `.druids_form_input-text`). -   It should support the dark theme by using themed CSS color variables. -   It should, to the greatest extent possible, use DRUIDS global spacing, line height, and size constants. -   It may define a `size` prop. -   It may define a `level` prop.  ---  #### 📱 Responsiveness  -   It should scale responsively in relation to the viewport width and in     relation to other elements inside which it might be nested. -   It should be mobile-friendly (touch-accessible, etc.).  ---  #### ♿️ Accessibility  -   It should be functional using only keyboard navigation. -   Its markup should be ordered so its elements have a logical tabbing     order. -   It should use appropriate semantic tags, such as ``&thinsp;–&thinsp;`` headings, ``, ``, ``, etc. -   It should use HTML elements in their intended roles (`` for     navigation, `` for actions, `` for unordered lists,     etc.).     -   If this somehow isn’t possible, it should have appropriate         `aria` or `role` attributes on non-standard elements that act         like links, buttons, modals, etc.  ---  #### ✅ Testing  -   It should have a co-located, kebab-cased `.unit.tsx` file for unit     tests. -   It should be thoroughly QA’d in the latest version of each browser we     officially support (Chrome, Firefox, Safari, and Edge).  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"PageSpacingAndLayout_content":{"__data__":"{\"id_\":\"PageSpacingAndLayout_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageSpacingAndLayout\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageSpacingAndLayout/PageSpacingAndLayout.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"zzg3Rxfuk6UwPbBj/l18rOLsuCH7/RnXbjDTVXDQANk=\",\"text\":\"import { useComponentsContext } from '@druids/druids-pages/lib/components-parser/components.context';\\nimport { ComponentTile } from '@druids/styleguide-builder/components/components-explorer/ComponentTile/ComponentTile';\\nimport { Title } from '@druids/styleguide-builder/components/ui/Title';\\nimport { EditorialAttentionMessage } from '@druids/styleguide/components/ui/EditorialAttentionMessage';\\nimport { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage';\\nimport { Grid } from '@druids/ui/layout/Grid';\\nimport { Spacing } from '@druids/ui/layout/Spacing';\\nimport { Code } from '@druids/ui/typography/Code';\\nimport { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants';\\nimport { InlineCode } from '@druids/ui/typography/InlineCode';\\nimport { Paragraph } from '@druids/ui/typography/Paragraph';\\nimport * as React from 'react';\\n\\nimport { RedlineExample } from './RedlineExample';\\nimport { SpacingScale } from './SpacingScale';\\n\\nexport const PageSpacingAndLayout: React.FunctionComponent = () => {\\n    const { components } = useComponentsContext();\\n    const layoutComponentsToList = React.useMemo(() => {\\n        return components.filter(({ name }) => {\\n            if (\\n                name === 'Flex' ||\\n                name === 'FlexItem' ||\\n                name === 'Grid' ||\\n                name === 'GridItem' ||\\n                name === 'Spacing'\\n            ) {\\n                return true;\\n            }\\n            return false;\\n        });\\n    }, [components]);\\n\\n    return (\\n        <EditorialPage pageSection=\\\"Foundations\\\" pageName=\\\"Spacing & Layout\\\">\\n            <Title as=\\\"h2\\\" className={EDITORIAL_COPY_ELEMENT} id=\\\"spacing\\\">\\n                Spacing\\n            </Title>\\n            <p>\\n                DRUIDS uses an <InlineCode>8px</InlineCode> scale for spacing\\n                between elements.\\n            </p>\\n            <p>\\n                Exceptions are at the extremes. The scale starts with{' '}\\n                <InlineCode>2px</InlineCode> and <InlineCode>4px</InlineCode> to\\n                allow for finer-grained margins when necessary, and it jumps{' '}\\n                <InlineCode>16px</InlineCode> between the two largest steps.\\n            </p>\\n            <Spacing marginY=\\\"xxl\\\">\\n                <SpacingScale />\\n            </Spacing>\\n            <Paragraph size=\\\"sm\\\" variant=\\\"secondary\\\">\\n                Real-world example:\\n            </Paragraph>\\n            <Spacing as=\\\"div\\\" marginTop=\\\"xs\\\">\\n                <RedlineExample />\\n            </Spacing>\\n            <Title\\n                as=\\\"h3\\\"\\n                className={EDITORIAL_COPY_ELEMENT}\\n                id=\\\"basic-spacing-components\\\"\\n            >\\n                Basic spacing components\\n            </Title>\\n            <p>\\n                DRUIDS includes numerous components that make it easy to lay out\\n                elements on pages in a consistent, expected way.\\n            </p>\\n            <Spacing as=\\\"div\\\" marginY=\\\"xxl\\\">\\n                <Grid gap=\\\"xl\\\" minWidth={348}>\\n                    {layoutComponentsToList.map((component) => (\\n                        <ComponentTile\\n                            illustration={component.illustration}\\n                            statusLevel={component.metadata.statusLevel}\\n                            link={`/components/${component.moduleName}/${component.name}`}\\n                            name={component.name}\\n                            description={component.metadata.description}\\n                            key={component.name}\\n                            showDescription\\n                        />\\n                    ))}\\n                </Grid>\\n            </Spacing>\\n            <Title\\n                as=\\\"h3\\\"\\n                className={EDITORIAL_COPY_ELEMENT}\\n                id=\\\"how-to-import-spacing-values\\\"\\n            >\\n                How to import spacing values\\n            </Title>\\n            <p>\\n                If you can’t use the basic spacing components, the values are\\n                available to use directly.\\n            </p>\\n            <Grid minWidth={350}>\\n                <div>\\n                    <Paragraph size=\\\"sm\\\" variant=\\\"secondary\\\">\\n                        In Less:\\n                    </Paragraph>\\n                    <Code language=\\\"css\\\" marginTop=\\\"xs\\\">\\n                        {`@import (reference) '@druids/ui/ui-constants.less';\\n\\n.myComponent {\\n    right: @spacing-sm;\\n}`}\\n                    </Code>\\n                </div>\\n                <div>\\n                    <Paragraph size=\\\"sm\\\" variant=\\\"secondary\\\">\\n                        In TypeScript:\\n                    </Paragraph>\\n                    <Code language=\\\"typescript\\\" marginTop=\\\"xs\\\">\\n                        {`import { SPACING_VALUES } from '@druids/ui/ui-constants';\\n\\n// Don’t set inline styles except as\\n// an absolute last resort\\n<div\\n    style={{\\n        right: SPACING_VALUES.md\\n    }}\\n/>`}\\n                    </Code>\\n                </div>\\n            </Grid>\\n            <hr />\\n            {IS_DRUIDS_PRIVATE && (\\n                <>\\n                    <Title\\n                        as=\\\"h2\\\"\\n                        className={EDITORIAL_COPY_ELEMENT}\\n                        id=\\\"line-height\\\"\\n                    >\\n                        Line height\\n                    </Title>\\n                    <EditorialAttentionMessage>\\n                        <p>Content coming soon!</p>\\n                    </EditorialAttentionMessage>\\n                    <hr />\\n                    <Title\\n                        as=\\\"h2\\\"\\n                        className={EDITORIAL_COPY_ELEMENT}\\n                        id=\\\"page-layout\\\"\\n                    >\\n                        Page layout\\n                    </Title>\\n                    <EditorialAttentionMessage>\\n                        <p>Content to come!</p>\\n                    </EditorialAttentionMessage>\\n                    <hr />\\n                </>\\n            )}\\n        </EditorialPage>\\n    );\\n};\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"PageTypography_content":{"__data__":"{\"id_\":\"PageTypography_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ArF19crMwqHJMqs0V0OgDCa9SRi+f/e8bVL3OLUdqy4=\",\"text\":\"import { useComponentsContext } from '@druids/druids-pages/lib/components-parser/components.context';\\nimport { ComponentTile } from '@druids/styleguide-builder/components/components-explorer/ComponentTile/ComponentTile';\\nimport { Title } from '@druids/styleguide-builder/components/ui/Title';\\nimport { VisualExample } from '@druids/styleguide-builder/components/ui/VisualExample';\\nimport { useDesktop } from '@druids/styleguide-builder/lib/breakpoints';\\nimport {\\n    TypefacesNotoSans,\\n    TypefacesRobotoMono,\\n} from '@druids/styleguide/components/foundations/PageTypography/Typefaces';\\nimport { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage';\\nimport { Link } from '@druids/styleguide/lib/routing/Link';\\nimport { Flex } from '@druids/ui/layout/Flex';\\nimport { Grid } from '@druids/ui/layout/Grid';\\nimport { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator';\\nimport { Spacing } from '@druids/ui/layout/Spacing';\\nimport { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants';\\nimport { EditorialCopy } from '@druids/ui/typography/EditorialCopy';\\nimport { InlineCode } from '@druids/ui/typography/InlineCode';\\nimport * as React from 'react';\\n\\nimport { HeaderExample, ScaleExample, ParagraphExample } from './ScaleExample';\\nimport imgBasicTypographyDark from './images/basic-typography-dark.png';\\nimport imgBasicTypographyExample1Dark from './images/basic-typography-example-1-dark.png';\\nimport imgBasicTypographyExample1Light from './images/basic-typography-example-1-light.png';\\nimport imgBasicTypographyExample2Dark from './images/basic-typography-example-2-dark.png';\\nimport imgBasicTypographyExample2Light from './images/basic-typography-example-2-light.png';\\nimport imgBasicTypographyExampleDark from './images/basic-typography-examples-dark.png';\\nimport imgBasicTypographyExampleLight from './images/basic-typography-examples-light.png';\\nimport imgBasicTypographyLight from './images/basic-typography-light.png';\\nimport imgEditorialTypographyDark from './images/editorial-typography-dark.png';\\nimport imgEditorialTypographyExample1Dark from './images/editorial-typography-example-1-dark.png';\\nimport imgEditorialTypographyExample1Light from './images/editorial-typography-example-1-light.png';\\nimport imgEditorialTypographyExample2Dark from './images/editorial-typography-example-2-dark.png';\\nimport imgEditorialTypographyExample2Light from './images/editorial-typography-example-2-light.png';\\nimport imgEditorialTypographyExample3Dark from './images/editorial-typography-example-3-dark.png';\\nimport imgEditorialTypographyExample3Light from './images/editorial-typography-example-3-light.png';\\nimport imgEditorialTypographyLight from './images/editorial-typography-light.png';\\n\\nexport const BasicTypographyImg = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={300}\\n            imageHeight={179}\\n            src={[imgBasicTypographyLight, imgBasicTypographyDark]}\\n        />\\n    );\\n};\\nexport const EditorialTypographyImg = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={300}\\n            imageHeight={179}\\n            src={[imgEditorialTypographyLight, imgEditorialTypographyDark]}\\n        />\\n    );\\n};\\nexport const BasicTypographyExampleImg = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={271}\\n            src={[\\n                imgBasicTypographyExampleLight,\\n                imgBasicTypographyExampleDark,\\n            ]}\\n            caption=\\\"Examples of components that use Basic Typography Components inside\\\"\\n        />\\n    );\\n};\\nexport const BasicTypographyExample1Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            height={475}\\n            src={[\\n                imgBasicTypographyExample1Light,\\n                imgBasicTypographyExample1Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/logs\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Logs Explorer\\n                    </Link>{' '}\\n                    Overview Page Layout (complex layout + content set in small\\n                    space)\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const BasicTypographyExample2Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            height={475}\\n            src={[\\n                imgBasicTypographyExample2Light,\\n                imgBasicTypographyExample2Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/watchdog\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Watchdog\\n                    </Link>{' '}\\n                    Stories List Page\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const EditorialTypographyExample1Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={475}\\n            src={[\\n                imgEditorialTypographyExample1Light,\\n                imgEditorialTypographyExample1Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/release-notes/\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Release Notes Page\\n                    </Link>{' '}\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const EditorialTypographyExample2Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={475}\\n            src={[\\n                imgEditorialTypographyExample2Light,\\n                imgEditorialTypographyExample2Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/security/getting-started\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Security Getting Started Page\\n                    </Link>{' '}\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const EditorialTypographyExample3Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={475}\\n            src={[\\n                imgEditorialTypographyExample3Light,\\n                imgEditorialTypographyExample3Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/help/quick-start\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Quick Start Page\\n                    </Link>{' '}\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\n\\nexport const PageTypography: React.FunctionComponent = () => {\\n    const isDesktop = useDesktop();\\n    const { components } = useComponentsContext();\\n    const basicTypographyComponentsToList = React.useMemo(() => {\\n        return components.filter(({ name }) =>\\n            ['Text', 'Title', 'Code', 'Paragraph', 'List'].includes(name),\\n        );\\n    }, [components]);\\n\\n    return (\\n        <EditorialPage pageSection=\\\"Foundations\\\" pageName=\\\"Typography\\\">\\n            <EditorialCopy\\n                size=\\\"lg\\\"\\n                initialHeaderSize=\\\"xl\\\"\\n                maxWidthType=\\\"text-only\\\"\\n            >\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"about-side-panels\\\"\\n                >\\n                    Typography in DRUIDS\\n                </Title>\\n                <p>\\n                    DRUIDS offers two types of typographic styles —{' '}\\n                    <Link\\n                        hasSmoothAnchorLink\\n                        url=\\\"#basic-typography\\\"\\n                        title=\\\"Basic Typography Styles | DRUIDS\\\"\\n                        isInline\\n                    >\\n                        Basic Basic Typography\\n                    </Link>{' '}\\n                    style, which includes most of the components inside the\\n                    Datadog app and{' '}\\n                    <Link\\n                        hasSmoothAnchorLink\\n                        url=\\\"#editorial-typography\\\"\\n                        title=\\\"Editorial Typography Styles | DRUIDS\\\"\\n                        isInline\\n                    >\\n                        Editorial Typography\\n                    </Link>{' '}\\n                    style, which is intended for specific parts of the app with\\n                    more extensive and elaborate typographic needs.\\n                </p>\\n                <p>\\n                    Both typography sets use the open-source typeface{' '}\\n                    <Link\\n                        url=\\\"https://fonts.google.com/specimen/Noto+Sans\\\"\\n                        isExternal\\n                        hasExternalIcon\\n                        isInline\\n                    >\\n                        Noto Sans\\n                    </Link>{' '}\\n                    as a main typeface, and{' '}\\n                    <Link\\n                        url=\\\"https://fonts.google.com/specimen/Roboto+Mono\\\"\\n                        isExternal\\n                        hasExternalIcon\\n                        isInline\\n                    >\\n                        Roboto Mono\\n                    </Link>{' '}\\n                    to render codes, and in all logs tables.\\n                </p>\\n            </EditorialCopy>\\n            <Flex\\n                justify=\\\"flex-start\\\"\\n                alignItems=\\\"flex-start\\\"\\n                gap=\\\"lg\\\"\\n                direction={isDesktop ? 'row' : 'column'}\\n            >\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        {isDesktop ? (\\n                            <>\\n                                <BasicTypographyImg />\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"basic-typography-overview\\\"\\n                                >\\n                                    Style 1: Basic Typography Components\\n                                </Title>\\n                            </>\\n                        ) : (\\n                            <>\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"basic-typography-overview\\\"\\n                                >\\n                                    Style 1: Basic Typography Components\\n                                </Title>\\n                                <BasicTypographyImg />\\n                            </>\\n                        )}\\n                        <p>\\n                            Basic Typography Components refers to and consists\\n                            of the majority of individual typography components,\\n                            such as{' '}\\n                            <Link url=\\\"/components/typography/Text\\\" isInline>\\n                                Text\\n                            </Link>\\n                            ,{' '}\\n                            <Link url=\\\"/components/typography/Title\\\" isInline>\\n                                Title\\n                            </Link>{' '}\\n                            and{' '}\\n                            <Link url=\\\"/components/typography/Code\\\" isInline>\\n                                Code\\n                            </Link>{' '}\\n                            components, and often is used in more independent\\n                            and discrete occasions when compared to its\\n                            counterpart, Editorial Typography.\\n                        </p>\\n                        <p>\\n                            Basic Typographic Components are used readily\\n                            throughout the app when the typographic element is\\n                            supposed to be used on it’s own, usually shorter in\\n                            length, and meant to be consumed as a discrete\\n                            readable unit or is in a smaller chunk of\\n                            text/information.\\n                        </p>\\n                        <p>\\n                            Another characteristic of Basic Typography\\n                            Components is the fact that there is no built in\\n                            spacing in between these individual elements, as\\n                            opposed to how Editorial Typography is set up.\\n                        </p>\\n                    </EditorialCopy>\\n                </div>\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        {isDesktop ? (\\n                            <>\\n                                <EditorialTypographyImg />\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"editorial-typography-overview\\\"\\n                                >\\n                                    Style 2: Editorial Typography\\n                                </Title>\\n                            </>\\n                        ) : (\\n                            <>\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"editorial-typography-overview\\\"\\n                                >\\n                                    Style 2: Editorial Typography\\n                                </Title>\\n                                <EditorialTypographyImg />\\n                            </>\\n                        )}\\n                        <p>\\n                            Editorial Typography is designed to be used when the\\n                            content it holds is longer in length, generally more\\n                            lines of text, and it allows for a more dramatic,\\n                            graphic use of type in editorial context, in terms\\n                            of scale, spacing and layout.\\n                        </p>\\n                        <p>\\n                            It is accessible by a wrapper component,{' '}\\n                            <Link\\n                                url=\\\"/components/typography/EditorialCopy\\\"\\n                                isInline\\n                            >\\n                                EditorialCopy\\n                            </Link>\\n                            , which wraps naked HTML typography elements such as{' '}\\n                            <InlineCode>h1</InlineCode>–\\n                            <InlineCode>h6</InlineCode> header tags, and many\\n                            others.\\n                        </p>\\n                    </EditorialCopy>\\n                </div>\\n            </Flex>\\n            <EditorialCopy\\n                size=\\\"lg\\\"\\n                initialHeaderSize=\\\"xl\\\"\\n                marginTop=\\\"xl\\\"\\n                maxWidthType=\\\"text-only\\\"\\n            >\\n                <HorizontalSeparator />\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"basic-typography\\\"\\n                >\\n                    Basic Typography\\n                </Title>\\n                <p>\\n                    Basic Typography Components include all of the typography\\n                    components, except for the{' '}\\n                    <Link url=\\\"/components/typography/EditorialCopy\\\" isInline>\\n                        EditorialCopy\\n                    </Link>{' '}\\n                    is designed to be used for more extensive blocks of text.\\n                </p>\\n                <BasicTypographyExampleImg />\\n                <p>\\n                    Basic Typography Components are widely used inside other\\n                    components as a supporting element such as in{' '}\\n                    <Link\\n                        url=\\\"/components/dialogs/KeyboardShortcutList\\\"\\n                        isInline\\n                    >\\n                        KeyboardShortcutList\\n                    </Link>\\n                    ,{' '}\\n                    <Link url=\\\"/components/nav/PaginationSummary\\\" isInline>\\n                        PaginationSummary\\n                    </Link>\\n                    ,{' '}\\n                    <Link url=\\\"/components/time/TimeRangeIndicator\\\" isInline>\\n                        TimeRangeIndicator\\n                    </Link>{' '}\\n                    and many other components with short blocks of typographic\\n                    elements.\\n                </p>\\n                <Title as=\\\"h3\\\" className={EDITORIAL_COPY_ELEMENT}>\\n                    DRUIDS Typography Font-Size / Line-Height Scale\\n                </Title>\\n                <ScaleExample />\\n                <Title\\n                    as=\\\"h3\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"examples-of-basic-typography-components\\\"\\n                >\\n                    Examples of Layout / Page using Basic Typography Components\\n                </Title>\\n                <BasicTypographyExample1Img />\\n                <BasicTypographyExample2Img />\\n\\n                <Title\\n                    as=\\\"h3\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"key-basic-typography-components\\\"\\n                >\\n                    Key Basic Typography Components\\n                </Title>\\n                <Spacing as=\\\"div\\\" marginY={isDesktop ? 'xxl' : 'sm'}>\\n                    <Grid gap=\\\"xl\\\" minWidth={348}>\\n                        {basicTypographyComponentsToList.map((component) => (\\n                            <ComponentTile\\n                                illustration={component.illustration}\\n                                statusLevel={component.metadata.statusLevel}\\n                                link={`/components/${component.moduleName}/${component.name}`}\\n                                name={component.name}\\n                                description={component.metadata.description}\\n                                key={component.name}\\n                                showDescription\\n                            />\\n                        ))}\\n                    </Grid>\\n                </Spacing>\\n                <HorizontalSeparator />\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"editorial-typography\\\"\\n                >\\n                    Editorial Typography\\n                </Title>\\n                <p>\\n                    Editorial Typography set is meant to be used in places where\\n                    there’s more than just a few lines of copy. The typography\\n                    set contains optimized pre-set configurations of typographic\\n                    elements such as the relationship between font sizes, line\\n                    heights, vertical spacing, letter spacing, and word spacing\\n                    so the user’s focus is not distracted from the content.\\n                </p>\\n                <p>\\n                    When HTML elements are wrapped inside the{' '}\\n                    <Link url=\\\"/components/typography/EditorialCopy\\\" isInline>\\n                        EditorialCopy\\n                    </Link>{' '}\\n                    component, preset values of spacings in between containing\\n                    elements and font-size hierarchy in between different\\n                    headlines and body text is automatically applied, which\\n                    helps designers and developers to use the component\\n                    conveniently without having to redesign the size / spacing\\n                    in a custom way.\\n                </p>\\n                <Title as=\\\"h3\\\" className={EDITORIAL_COPY_ELEMENT}>\\n                    Editorial Typography Header Scale\\n                </Title>\\n                <HeaderExample />\\n                <Title as=\\\"h3\\\" className={EDITORIAL_COPY_ELEMENT}>\\n                    Editorial Typography Paragraph Scale\\n                </Title>\\n                <ParagraphExample />\\n                <Title\\n                    as=\\\"h3\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"examples-of-layouts-that-uses-editorial-copy\\\"\\n                >\\n                    Examples of Layouts that are using Editorial Typography\\n                </Title>\\n                <EditorialTypographyExample1Img />\\n                <EditorialTypographyExample3Img />\\n                <EditorialTypographyExample2Img />\\n                <HorizontalSeparator />\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"typefaces\\\"\\n                >\\n                    Typefaces\\n                </Title>\\n            </EditorialCopy>\\n            <Flex\\n                justify=\\\"flex-start\\\"\\n                alignItems=\\\"flex-start\\\"\\n                gap=\\\"lg\\\"\\n                direction={isDesktop ? 'row' : 'column'}\\n            >\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        <Title\\n                            as=\\\"h3\\\"\\n                            className={EDITORIAL_COPY_ELEMENT}\\n                            id=\\\"noto-sans\\\"\\n                        >\\n                            Noto Sans\\n                        </Title>\\n                        <TypefacesNotoSans />\\n                        <p>\\n                            The primary DRUIDS typeface is a sans-serif called{' '}\\n                            <Link\\n                                url=\\\"https://fonts.google.com/specimen/Noto+Sans\\\"\\n                                isExternal\\n                                hasExternalIcon\\n                                isInline\\n                            >\\n                                Noto Sans\\n                            </Link>\\n                            . It was commissioned by Google to bedesigned with\\n                            the goal of achieving visual harmony and supporting\\n                            a wide range of characters and glyphs to remove all\\n                            substitute characters (which is called “tofu”,\\n                            therefore “No more Tofu”). It is one of the most\\n                            widely used typefaces on the web because of its\\n                            flexibility.\\n                        </p>\\n                    </EditorialCopy>\\n                </div>\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        <Title\\n                            as=\\\"h3\\\"\\n                            className={EDITORIAL_COPY_ELEMENT}\\n                            id=\\\"roboto-mono\\\"\\n                        >\\n                            Roboto Mono: Code\\n                        </Title>\\n                        <TypefacesRobotoMono />\\n                        <p>\\n                            To display code snippets and logs, DRUIDS uses a\\n                            monospace font called{' '}\\n                            <Link\\n                                url=\\\"https://fonts.google.com/specimen/Roboto+Mono\\\"\\n                                isExternal\\n                                hasExternalIcon\\n                                isInline\\n                            >\\n                                Roboto Mono\\n                            </Link>\\n                            . Roboto Mono was originally developed by Google for\\n                            its mobile operating system, Android, in 2011 and\\n                            was designed with the goal of creating a\\n                            approachable and emotional typeface.\\n                        </p>\\n                    </EditorialCopy>\\n                </div>\\n            </Flex>\\n        </EditorialPage>\\n    );\\n};\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"page-high-level-design-themes_content":{"__data__":"{\"id_\":\"page-high-level-design-themes_content\",\"metadata\":{\"url\":\"\",\"title\":\"page-high-level-design-themes\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/principles/PageHighLevelDesignThemes/page-high-level-design-themes.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"50nIn0wSYRjyZp5hVutKpYCjn5THUIY83P7CkV3mMpM=\",\"text\":\"import { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants'; import { HIGH_LEVEL_DESIGN_THEMES } from '@druids/druids-pages/lib/principles/high-level-design-themes/high-level-design-themes.tsx'; import { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator'; import { Text } from '@druids/ui/typography/Text'; import { Grid } from '@druids/ui/layout/Grid'; import { DesignThemeCard } from './DesignThemeCard'; import { DesignThemeDetail } from './DesignThemeDetail'; import { Title } from '@druids/ui/typography/Title';  export const BLOCK = 'styleguide_principles_high-level-design-themes';  export const HiddenTitle = ({ title, ...props }) => (              {title}      );  export const DesignThemeCards = ({ header, parent, ...props }) => {     return (         <>             <Title                 size=\\\"xl\\\"                 id={header}                 marginBottom=\\\"lg\\\"                 style={{                     fontWeight: '400',                 }}             >                 {header}                                           {Object.entries(HIGH_LEVEL_DESIGN_THEMES).map(                     ([theme_title, theme]) =>                         theme.parent === parent && (                             <DesignThemeCard                                 key={theme_title}                                 id={theme_title}                                 {...theme}                             />                         ),                 )}                           ); };  export const DesignThemeDetails = ({ parent, ...props }) => {     return (                      {Object.entries(HIGH_LEVEL_DESIGN_THEMES).map(                 ([theme_title, theme]) =>                     theme.parent === parent && (                         <DesignThemeDetail                             key={theme_title}                             id={theme_title}                             {...theme}                         />                     ),             )}              ); };      Datadog has so many features and so much data that users are always at risk of **confusion** and **frustration**. Our design principles are based on providing **clarity** and **confidence** in the face of these risks.  Throughout the platform, we want our users to know what they are looking at and what they are supposed to do with it.  ---  <DesignThemeCards     header=\\\"High-level values\\\"     parent=\\\"general\\\"     marginBottom=\\\"xxl\\\" />  Here are principles that follow from these high-level values:                    \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"PageDruidsPhilosophy_content":{"__data__":"{\"id_\":\"PageDruidsPhilosophy_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageDruidsPhilosophy\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/principles/PageDruidsPhilosophy/PageDruidsPhilosophy.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"MtweqaMIsdiyeaWpFg3574HcNH0VUXTAN3/C7C+sgCc=\",\"text\":\"import { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage';\\nimport { FlexItem } from '@druids/ui/layout/FlexItem';\\nimport { Flex } from '@druids/ui/layout/Flex';\\nimport { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator';\\nimport { EditorialCopy } from '@druids/ui/typography/EditorialCopy';\\nimport * as React from 'react';\\n\\nimport {\\n    ConsistencyAnimation,\\n    FasterAnimation,\\n    BalanceAnimation,\\n} from './DruidsPhilosophyAnimations/DruidsPhilosophyAnimations';\\n\\nexport const PageDruidsPhilosophy = () => (\\n    <EditorialPage pageSection=\\\"Principles\\\" pageName=\\\"DRUIDS Philosophy\\\">\\n        <h1 style={{ fontWeight: 400 }}>\\n            The design system is a means to an end. <br />\\n            The system works for us, we don’t work for it.\\n        </h1>\\n        <HorizontalSeparator />\\n        <Flex wrap=\\\"wrap\\\" justify=\\\"center\\\" alignItems=\\\"center\\\">\\n            <FlexItem maxWidth={200} marginRight=\\\"lg\\\">\\n                <FasterAnimation />\\n            </FlexItem>\\n            <EditorialCopy\\n                marginLeft=\\\"lg\\\"\\n                marginY=\\\"lg\\\"\\n                size=\\\"lg\\\"\\n                maxWidth={550}\\n            >\\n                <h2>Make design faster and more confident</h2>\\n                <p>\\n                    Designers and developers can do their jobs more quickly and\\n                    work more intuitively when they can take advantage of the\\n                    hard work and thinking that has been applied in the past.\\n                    This minimizes time-to-value and smooths the path from\\n                    design to implementation.\\n                </p>\\n            </EditorialCopy>\\n        </Flex>\\n        <Flex wrap=\\\"wrap\\\" justify=\\\"center\\\" alignItems=\\\"center\\\">\\n            <FlexItem maxWidth={200} marginRight=\\\"lg\\\">\\n                <ConsistencyAnimation />\\n            </FlexItem>\\n            <EditorialCopy\\n                marginLeft=\\\"lg\\\"\\n                marginY=\\\"lg\\\"\\n                size=\\\"lg\\\"\\n                maxWidth={550}\\n            >\\n                <h2>\\n                    Consistency is also only a means to an end — predictability\\n                    is the payoff that makes a more usable product\\n                </h2>\\n                <p>\\n                    We should not pursue consistency for its own sake. Users\\n                    benefit from established components and patterns when\\n                    repetition makes them easier to understand. This can be\\n                    especially true as new products and features are added.\\n                    Consistency is a useful tool, but it should not be an\\n                    obstacle to creating the right solutions.\\n                </p>\\n            </EditorialCopy>\\n        </Flex>\\n        <Flex wrap=\\\"wrap\\\" justify=\\\"center\\\" alignItems=\\\"center\\\">\\n            <FlexItem maxWidth={200} marginRight=\\\"lg\\\">\\n                <BalanceAnimation />\\n            </FlexItem>\\n            <EditorialCopy\\n                marginLeft=\\\"lg\\\"\\n                marginY=\\\"lg\\\"\\n                size=\\\"lg\\\"\\n                maxWidth={550}\\n            >\\n                <h2>Balance between the established and the new</h2>\\n                <p>\\n                    DRUIDS does not define what is possible to create; it is\\n                    here to make it easier to design and build what we already\\n                    know best. Strive for the best design and technical\\n                    solutions for the product you are building. Take advantage\\n                    of the work already done — but seek out new designs and\\n                    solutions to push the platform forward, too.\\n                </p>\\n                <p>\\n                    When giving feedback on new work, if you see something\\n                    unfamiliar, don’t assume it must be brought into existing\\n                    patterns and solutions. Instead ask how using DRUIDS and\\n                    known patterns might help, and focus on the positives.\\n                </p>\\n            </EditorialCopy>\\n        </Flex>\\n    </EditorialPage>\\n);\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"tips-and-tricks_content":{"__data__":"{\"id_\":\"tips-and-tricks_content\",\"metadata\":{\"url\":\"\",\"title\":\"tips-and-tricks\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTipsAndTricks/tips-and-tricks.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"qV9dhN/XxhSqyRV24ecbit8sBH9Jq8gPOb8NTaHb4s0=\",\"text\":\"import { EditorialAttentionMessage } from '@druids/styleguide/components/ui/EditorialAttentionMessage'; import { KeyboardShortcut } from '@druids/ui/typography/KeyboardShortcut'; import { VisualExample } from '@druids/styleguide-builder/components/ui/VisualExample';  import imgDruidsLoupeDark from './images/druids-loupe_dark.png'; import imgDruidsLoupeLight from './images/druids-loupe_light.png';  ## Treat components as black boxes  Props are for styling components and allowing them to behave within a predefined range of possibilities. If you have an unsupported use case or style, don’t hack it yourself. Talk to DesignOps. We literally exist to help!  <EditorialAttentionMessage     marginBottom=\\\"lg\\\"     title=\\\"Whatever you do, don’t “customize” components by overriding their internal CSS.\\\" >     DRUIDS is not designed to support this. Because DRUIDS is not versioned,     overriding component internals via CSS creates a risk for silent regressions     when components are updated in the future.   A few common usage anti-patterns:  -   Overriding component’s `padding` or `display` properties     -   Usually a sign it would be better to integrate your new use case into the component itself (if possible). -   Referencing DRUIDS-specific `classNames` like `.druids_form_input-text`     -   Creates a “silent” dependency that exists in CSS but not in JavaScript, which is brittle and hard to test for/debug. -   Applying `margin`, `display`, or `position` rules directly to components, even via `classNames`{' '} props.     -   Sometimes it’s unavoidable, but it’s preferable to use DRUIDS layout components when possible. This means you’re constructing things         in a much more modular, future-proof way.  ---  ## Check if it actually is a component  Some elements may appear at a glance to be a DRUIDS component but are not. To check, press  on any page in Datadog.  All DRUIDS components (except the most basic ones for typography and spacing) will be outlined in red. Hover any outlined component to see details and links to GitHub, Figma, and this style guide.  <VisualExample     src={[imgDruidsLoupeLight, imgDruidsLoupeDark]}     imageWidth={583}     hasImageShadow />  ---  ## Separation of concerns is important  Components shouldn’t try to do too much. If we reach a point where a component’s logic and behavior start to feel too complex, it’s probably time to make a separate component (e.g., `` and ``).  ---  ## Not everything needs to be a shared component  Components that are used only for a single feature should live in that feature’s codebase rather than in DRUIDS.  Components tied to specific data sources or business logic should never be part of DRUIDS, either. This guarantees DRUIDS stays free of external dependencies, which in turn ensures it can be used anywhere in the Datadog platform without side effects.  ---  ## Side effects are symptomatic  Occasionally a DRUIDS component will look or behave different in actual use than in this style guide. Because DRUIDS is free of external dependencies it’s almost certainly symptomatic of a larger problem: usually that some global CSS and/or JavaScript is leaking into and overriding the component’s styles.  This means you’re likely importing code that you didn’t realize, which in turn can lead to bloated bundles and even degraded browser performance.  \",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"54c43dd4-cb93-4ee3-b67e-73d408aef864":{"__data__":"{\"id_\":\"54c43dd4-cb93-4ee3-b67e-73d408aef864\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Modal\",\"title\":\"Modal\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Modal/modal.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Modal_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Modal\",\"title\":\"Modal\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Modal/modal.mdx\"},\"hash\":\"1MW3RHbsiBKzEQJgQqUsQxAy310vnOvnHMs/ioBzbvQ=\"},\"NEXT\":{\"nodeId\":\"93c0500b-e12b-478b-b34d-e3d0921d0852\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Modal\",\"title\":\"Modal\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Modal/modal.mdx\"},\"hash\":\"7mMDNqhCeV9z+ADAXPYIiWueVOVdJbwHMyFuOKE7Y8w=\"}},\"hash\":\"ST5gMe0sEAirWol82hHk8bHmQZsS76b49Wur9PKaVdY=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Modal } from '@druids/ui/dialogs/Modal'; import { Button } from '@druids/ui/form/Button'; import { Checkbox } from '@druids/ui/form/Checkbox'; import { ToggleButtons } from '@druids/ui/form/ToggleButtons'; import { Spacing } from '@druids/ui/layout/Spacing';  ```jsx partial=\\\"modalContentOptions\\\" isCollapsed isHidden const sizeOptions = ['Expand to Content', 'sm', 'md', 'lg'].map((key) => ({     label: key,     value: key === 'Expand to Content' ?\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"93c0500b-e12b-478b-b34d-e3d0921d0852":{"__data__":"{\"id_\":\"93c0500b-e12b-478b-b34d-e3d0921d0852\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Modal\",\"title\":\"Modal\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Modal/modal.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Modal_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Modal\",\"title\":\"Modal\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Modal/modal.mdx\"},\"hash\":\"1MW3RHbsiBKzEQJgQqUsQxAy310vnOvnHMs/ioBzbvQ=\"},\"PREVIOUS\":{\"nodeId\":\"54c43dd4-cb93-4ee3-b67e-73d408aef864\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Modal\",\"title\":\"Modal\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Modal/modal.mdx\"},\"hash\":\"ST5gMe0sEAirWol82hHk8bHmQZsS76b49Wur9PKaVdY=\"}},\"hash\":\"7mMDNqhCeV9z+ADAXPYIiWueVOVdJbwHMyFuOKE7Y8w=\",\"text\":\"'' : key, }));  const SHORT_TEXT = 'SHORT_TEXT'; const LONG_TEXT = 'LONG_TEXT'; const texts = {     [SHORT_TEXT]: `consectetur cillum cupidatat sed labore ea sit dolor amet, ipsum labore culpa elit, pariatur cillum et nisi adipiscing nostrud qui in eu et ex dolor aute voluptate qui occaecat cupidatat in Duis aute fugiat nisi anim dolor nisi est irure exercitation sit commodo aute eiusmod Duis laboris aliqua ex culpa`,     [LONG_TEXT]: `laboris elit, commodo voluptate deserunt id occaecat eu deserunt dolor nisi Lorem ut nulla eiusmod Lorem ex quis id ex in in ea proident, irure cupidatat ullamco velit magna quis amet, eiusmod fugiat officia enim id in dolore pariatur culpa incididunt consectetur reprehenderit mollit Duis id ex irure voluptate officia magna minim elit, Excepteur nostrud ullamco non adipiscing et aliquip sint est in in ullamco in ex labore fugiat cupidatat nostrud ut in dolore eu consequat ea esse tempor ipsum officia aliqua incididunt minim qui mollit ea elit, dolore nostrud do proident, dolore tempor id sit aute esse irure enim quis sint commodo mollit quis exercitation exercitation Excepteur ut reprehenderit enim occaecat tempor cupidatat qui in ut aliquip aliqua voluptate deserunt dolor sed aute veniam, id nostrud nisi sunt dolore sint sit Duis sed non laborum quis deserunt Lorem labore cillum incididunt pariatur nostrud id culpa aliqua in laborum do cupidatat mollit ex quis occaecat aliquip Lorem anim ut non in sed Lorem reprehenderit velit sed irure consectetur laboris cupidatat voluptate quis magna dolore nulla non minim nisi magna enim sint commodo amet, pariatur aliquip laborum ipsum irure sint proident, ipsum nostrud laborum cupidatat laboris exercitation dolor veniam, elit, amet, magna nisi consequat eiusmod cupidatat aliqua enim et sit culpa laboris veniam, mollit ullamco pariatur non nulla minim deserunt laboris aute irure adipiscing incididunt cupidatat sint mollit commodo Excepteur deserunt nisi in incididunt sit aliquip ea irure qui officia commodo ad anim exercitation voluptate eu exercitation aliquip Excepteur laboris tempor laboris consectetur in cupidatat et officia non id cillum sunt Excepteur ullamco dolore consectetur voluptate culpa sint magna eiusmod ut non consectetur in exercitation amet, consequat eu sit eiusmod commodo ut est Excepteur cillum ea dolor anim reprehenderit consectetur officia dolor occaecat eiusmod proident, magna ad eu magna elit, exercitation do pariatur nostrud Lorem pariatur enim ad eiusmod ea amet, ut irure ipsum est dolor non Ut Ut in et Lorem aliqua dolore ea ullamco nulla velit Lorem commodo laboris sit sed officia nulla ut nostrud ipsum elit, in in est pariatur ea officia eiusmod commodo cillum ut quis ut ad enim id ut Excepteur ut tempor sint dolore sunt nisi sit do elit`, }; const textLengthOptions = [     { label: 'Short Text', value: SHORT_TEXT },     { label: 'Long Text', value: LONG_TEXT }, ]; ```  ### Example  ```jsx withPartials=\\\"modalContentOptions\\\" name=\\\"Example\\\" const [isOpen, setIsOpen] = React.useState(false); const [hasSeparator, setHasSeparator] = React.useState(false); const [isCloseable, setIsCloseable] = React.useState(true); const [isFixedScrollable, setIsFixedScrollable] = React.useState(false); const [isRounded, setIsRounded] = React.useState(false); const [size, setSize] = React.useState(''); const position = useKnob('position', ['top', 'center']); const [mode, setMode] = React.useState(SHORT_TEXT);  return (     <div>         <Button             isPrimary             onClick={() => setIsOpen(!isOpen)}             label=\\\"Toggle Modal\\\"         />         <Modal             title=\\\"Modal Title\\\"             isOpen={isOpen}             onClose={() => setIsOpen(false)}             isCloseable={isCloseable}             hasSeparator={hasSeparator}             isRounded={isRounded}             isFixedScrollable={isFixedScrollable}             size={size}             position={position}             footer={                 <React.Fragment>                     <Spacing marginRight=\\\"sm\\\">                         <Button                             onClick={() => setIsOpen(false)}                             label=\\\"Cancel\\\"                         />                     </Spacing>                     <Button                         isPrimary                         onClick={() => setIsOpen(false)}                         label=\\\"Confirmation Action\\\"                     />                 </React.Fragment>             }         >             <div>                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"isCloseable\\\"                     onChange={() => setIsCloseable(!isCloseable)}                     isChecked={isCloseable}                     marginRight=\\\"md\\\"                 />                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"hasSeparator\\\"                     onChange={() => setHasSeparator(!hasSeparator)}                     isChecked={hasSeparator}                     marginRight=\\\"md\\\"                 />                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"isFixedScrollable\\\"                     onChange={() => setIsFixedScrollable(!isFixedScrollable)}                     isChecked={isFixedScrollable}                     marginRight=\\\"md\\\"                 />                 <Checkbox                     type=\\\"checkbox\\\"                     label=\\\"isRounded\\\"                     onChange={() => setIsRounded(!isRounded)}                     isChecked={isRounded}                 />             </div>             <div>                 <ToggleButtons                     options={sizeOptions}                     value={size}                     onChange={(size) => setSize(size)}                     isTitleCased={false}                     marginTop=\\\"md\\\"                     marginRight=\\\"md\\\"                 />                 <ToggleButtons                     options={textLengthOptions}                     value={mode}                     onChange={(mode) => setMode(mode)}                     marginTop=\\\"md\\\"                 />             </div>             <Spacing as=\\\"div\\\" marginTop=\\\"md\\\">                 {texts[mode]}             </Spacing>         </Modal>     </div> ); ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8711fd85-27af-4177-87dd-86b53b08d81d":{"__data__":"{\"id_\":\"8711fd85-27af-4177-87dd-86b53b08d81d\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Popover_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"HM7VHb5N8NSjOsawZ79aPkWRNZB+Hd7KVjYZCjEVxdI=\"},\"NEXT\":{\"nodeId\":\"0c9ceb23-d80f-43f9-8ea1-804cf1622187\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"cgG+PUL8kAUOe6tKlcRV4i+HYz0w2y9c5+xrEajp8Gw=\"}},\"hash\":\"qAOTyYago2LT3YGCi/22Vg3785LuxHfdvpS1cN4G8v8=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { ControlledPopover } from '@druids/ui/dialogs/Popover/ControlledPopover'; import {     PopoverContext,     useCoordinates, } from '@druids/ui/dialogs/Popover/ControlledPopover/controlled-popover.helpers'; import { usePopoverHandle } from '@druids/ui/dialogs/Popover/popover.helpers'; import { Popover } from '@druids/ui/dialogs/Popover'; import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import { Flex } from '@druids/ui/layout/Flex'; import { NumberedSection } from '@druids/ui/layout/NumberedSection'; import { Text } from '@druids/ui/typography/Text'; import { Panel } from '@druids/ui/layout/Panel';  ### Example  ```jsx name=\\\"Example\\\" <Popover handle={<Button label=\\\"Handle\\\" />} isPadded>     I’m a Popover </Popover> ```  ## Usage  Popover is used to display a floating box that’s positioned _relatively to another element_. The default `placement` is `bottom-start`, which means it appears below the `handle` (triggering element), with its arrow aligned to the front of that element. > **Warning: Be careful** > If the Popover doesn’t have enough room to appear, it won’t respect the initial placement. ```jsx width=\\\"328\\\" name=\\\"Usage\\\" const placement = useKnob(     'placement',     [         'auto-start',         'auto',         'auto-end',         'top-start',         'top',         'top-end',         'right-start',         'right',         'right-end',         'bottom-start',         'bottom',         'bottom-end',         'left-start',         'left',         'left-end',     ],     { defaultValue: 'bottom-start' }, );  return (     <Flex justify=\\\"center\\\">         <Popover             handle={<Button label=\\\"Toggle\\\" />}             isPadded             placement={placement}         >             I am a speaking label         </Popover>     </Flex> ); ```  ## Variants  ### Popover content  When a Button is used inside a Popover, it’s still clickable without closing the Popover itself. ```jsx name=\\\"Popover content\\\" <Popover handle=\\\"Handle\\\" isPadded>     <Button         onClick={() => {             alert('I’m working!');         }}         label=\\\"Test\\\"     /> </Popover> ```  Also, any JSX can be used inside the Popover:  ```jsx <Popover handle=\\\"Toggle 3\\\" isPadded>     <NumberedSection step={1} title=\\\"This is my title\\\">         One     </NumberedSection>     <NumberedSection step={2} title=\\\"This is my second title\\\">         Two     </NumberedSection> </Popover> ```  ### Manual coordinates  Use the `` component directly to open the Popover at a specific place on the screen instead of relative to an element. ```jsx static import { useCoordinates } from '@druids/ui/dialogs/Popover/ControlledPopover/controlled-popover.helpers'; ```  The best way is to use the `useCoordinates` hook, which returns the `onClick` event that can be used to retrieve the `coordinates` (as well as an `onClose` in case you want to close the Popover manually). ```jsx width=\\\"300\\\" name=\\\"Manual coordinates\\\" const positionRelativeTo = useKnob(     'The position is relative to:',     ['context', 'window'],     { props: { direction: 'column' } }, ); const { coordinates, onClick, onClose } = useCoordinates({     positionRelativeTo, });  return (     <>         <div             onClick={onClick}             style={{                 width: '100%',                 height: '250px',                 background: 'var(--ui-background-secondary)',             }}         />         <ControlledPopover             isOpen={!!coordinates}             coordinates={coordinates}             onClose={onClose}             isPadded             positionRelativeTo={positionRelativeTo}             isArrowHidden={useKnob('isArrowHidden', true, {                 defaultValue: true,             })}         >             A ControlledPopover that will open next to your click         </ControlledPopover>     </> ); ```  > By default, when the `coordinates` are used, the arrow is hidden. It is possible to still show it by setting `isArrowHidden={false}`. There is also a `getCoordinatesFromEvent` in the `controlled-popover.helpers` lib, which can be used in places where the hook isn’t available.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0c9ceb23-d80f-43f9-8ea1-804cf1622187":{"__data__":"{\"id_\":\"0c9ceb23-d80f-43f9-8ea1-804cf1622187\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Popover_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"HM7VHb5N8NSjOsawZ79aPkWRNZB+Hd7KVjYZCjEVxdI=\"},\"PREVIOUS\":{\"nodeId\":\"8711fd85-27af-4177-87dd-86b53b08d81d\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"qAOTyYago2LT3YGCi/22Vg3785LuxHfdvpS1cN4G8v8=\"},\"NEXT\":{\"nodeId\":\"cc3ba501-0f62-45e0-888d-9a864b477cf0\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"4o4pNmaJb4KYUbA/PPaXahHmR58BtzuRhhh6xFzsq0M=\"}},\"hash\":\"cgG+PUL8kAUOe6tKlcRV4i+HYz0w2y9c5+xrEajp8Gw=\",\"text\":\"### Using a reference as a handle  If you need to avoid a wrapper for the handle, use a regular Popover with `hasHandleWrapper={false}` and the `handleProps`, which contain `ref` and all the event handlers for the handle in the functional `handle` prop. ```jsx name=\\\"Using a reference as a handle\\\" <Popover     willCloseOnClick     isPadded     hasHandleWrapper={false}     handle={(isOpen, { ref, ...handleProps }) => (         <Button             isActive={isOpen}             label=\\\"Click me! \\\"             innerRef={ref}             {...handleProps}         />     )} >     A Popover that will not use a wrapper for the handle </Popover> ```  It’s also possible to use an element’s ref as a handle in ControlledPopover. ```jsx name=\\\"Using a reference as a handle controlled\\\" const [isOpen, setIsOpen] = React.useState(false); const ref = React.useRef(null); return (     <>         <Button             isActive={isOpen}             label=\\\"Click me! \\\"             innerRef={ref}             onClick={() => setIsOpen((prev) => !prev)}         />         <ControlledPopover             willCloseOnClick             handle={ref}             isOpen={isOpen}             onClose={() => setIsOpen(false)}             isPadded         >             A ControlledPopover that will open next to a reference handle         </ControlledPopover>     </> ); ```  Alternatively use the `usePopoverHandle()` hook to completely separate the handle. Pass the returned `handle` from the hook to the `` and pass the `handleRef` and `handleProps` to your element. ```jsx name=\\\"usePopoverHandle hook\\\" const { isOpen, handle, handleRef, handleProps } = usePopoverHandle(); return (     <>         <Button             isActive={isOpen}             label=\\\"Click me! \\\"             innerRef={handleRef}             {...handleProps}         />         <Popover             willCloseOnClick             isPadded             hasHandleWrapper={false}             handle={handle}         >             A Popover that will not use a wrapper for the handle         </Popover>     </> ); ```  ### Fixed width  ```jsx name=\\\"Fixed width\\\" <Popover handle=\\\"fixed width\\\" width=\\\"200px\\\" isPadded placement=\\\"auto\\\">     <Text>         Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam         elementum velit elit, sit amet tincidunt augue sollicitudin id. Etiam         venenatis velit diam, quis interdum est tincidunt et. Morbi aliquam ex         metus, id posuere est fermentum id. Mauris ornare elementum lorem, nec         accumsan lorem laoreet a. </Text> </Popover> ```  ### Max width  Whenever you have dynamic content in your popover, it may be useful to set a `max-width` to avoid the popover from becoming too wide. ```jsx name=\\\"Max width\\\" <Popover handle=\\\"max width\\\" maxWidth=\\\"200px\\\" isPadded placement=\\\"auto\\\">     <Text>         Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam         elementum velit elit, sit amet tincidunt augue sollicitudin id. Etiam         venenatis velit diam, quis interdum est tincidunt et. Morbi aliquam ex         metus, id posuere est fermentum id. Mauris ornare elementum lorem, nec         accumsan lorem laoreet a.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cc3ba501-0f62-45e0-888d-9a864b477cf0":{"__data__":"{\"id_\":\"cc3ba501-0f62-45e0-888d-9a864b477cf0\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Popover_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"HM7VHb5N8NSjOsawZ79aPkWRNZB+Hd7KVjYZCjEVxdI=\"},\"PREVIOUS\":{\"nodeId\":\"0c9ceb23-d80f-43f9-8ea1-804cf1622187\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"cgG+PUL8kAUOe6tKlcRV4i+HYz0w2y9c5+xrEajp8Gw=\"},\"NEXT\":{\"nodeId\":\"09b01219-3179-468d-bfb9-d90f3f9ba752\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"YKPzyV6TuiLPtmEFNLq2Tdm9/x4VOkC7pPaEPAVZsQo=\"}},\"hash\":\"4o4pNmaJb4KYUbA/PPaXahHmR58BtzuRhhh6xFzsq0M=\",\"text\":\"Mauris ornare elementum lorem, nec         accumsan lorem laoreet a. </Text> </Popover> ```  ### Hoverable  ```jsx name=\\\"Hoverable\\\" <Popover handle={<Button label=\\\"Popover on hover\\\" />} isPadded isHoverable>     <Group>         <Button             onClick={() => {                 alert('I’m working!');             }}             isPrimary             label=\\\"Test\\\"         />         <Button             onClick={() => {                 alert('I’m working 1!');             }}             level=\\\"success\\\"             label=\\\"Test 1\\\"         />         <Button             onClick={() => {                 alert('I’m working 2!');             }}             level=\\\"danger\\\"             label=\\\"Test 2\\\"         />     </Group> </Popover> ```  ### Animatable  ```jsx name=\\\"Animatable\\\" <Popover handle={<Button label=\\\"Animated Popover\\\" />} isPadded isAnimated>     <Group>         <Button             onClick={() => {                 alert('I’m working!');             }}             isPrimary             label=\\\"Test\\\"         />         <Button             onClick={() => {                 alert('I’m working 1!');             }}             level=\\\"success\\\"             label=\\\"Test 1\\\"         />         <Button             onClick={() => {                 alert('I’m working 2!');             }}             level=\\\"danger\\\"             label=\\\"Test 2\\\"         />     </Group> </Popover> ```  ### Boundary  Use the `boundary` prop to specify whether the Popover should be viewport- or document-aware. ```jsx width=\\\"300\\\" name=\\\"Boundary\\\" <Popover     handle={<Button label=\\\"Click on me and scroll\\\" />}     isPadded     boundary={useKnob('boundary')} >     A Popover that will open next to your click </Popover> ```  ### Render context  By default the Popover will render its content at the end of the body in a new element thanks to React portals, in order to avoid having it clipped due to overflow/transform/etc. of the context of the handle. But sometimes we want to render it in the handle’s context (better keyboard navigation, better event bubbling). Use the `renderedRelativeTo` prop to use the handle’s context instead of rendering the Popover at the end of the body. ```jsx name=\\\"Render context\\\" <Popover     handle={         <Button             label=\\\"Click me then resize the playground or press tab\\\"             isTitleCased={false}         />     }     isPadded     renderedRelativeTo={useKnob('renderedRelativeTo')}     placement=\\\"bottom\\\" >     <Button label=\\\"In the popover\\\" /> </Popover> ```  ### Tooltip  Use the `tooltipProps` prop when it’s necessary for a `` to wrap the Popover’s handle. It automatically includes predefined behavior that’s useful in combination with the Popover (like ensuring the Tooltip doesn’t appear when the Popover is visible or having different Tooltip content based on the Popover’s state). ```jsx name=\\\"Tooltip\\\" <Popover     tooltipProps={{ content: 'Click to open' }}     handle={<Button label=\\\"Toggle\\\" />}     isPadded >     The content of the Popover with a Tooltip </Popover> ```  The Popover with such a Tooltip also provides a `setTooltipOnClose` callback in the `PopoverContext`. It can be used in Popover actions to set the Tooltip that’s shown over the handle after the Popover closes. ```jsx name=\\\"Tooltip with callback\\\" const ItemWithContext = React.useCallback(() => {     const { setTooltipOnClose } = React.useContext(PopoverContext);     return (         <Button             onClick={() => {                 setTooltipOnClose(                     'You have clicked the Button inside the Popover!',                 );             }}             label=\\\"Button with Tooltip feedback\\\"         />     ); }, []);  return (     <Popover         tooltipProps={{ content: 'Click to open' }}         handle={<Button label=\\\"Toggle\\\" />}         willCloseOnClick         isPadded     >         <ItemWithContext />     </Popover> ); ```  ### Interactions between multiple Popovers  If you opened a Popover and then click outside or open a new Popover, the previous one closes automatically by default. Set the `shouldCloseOtherPopoversOnOpen={false}` to disable this behavior (e.g., when using a Popover with `isHoverable`). ```jsx name=\\\"Interactions between multiple Popovers\\\" <Group>     <Popover         handle={             <Button                 label=\\\"Click me, then hover the other one\\\"                 isTitleCased={false}             />         }         isPadded         placement=\\\"top\\\"     >         Hello, it’s me! </Popover>     <Popover         handle={<Button label=\\\"Don’t click on me!\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"09b01219-3179-468d-bfb9-d90f3f9ba752":{"__data__":"{\"id_\":\"09b01219-3179-468d-bfb9-d90f3f9ba752\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Popover_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"HM7VHb5N8NSjOsawZ79aPkWRNZB+Hd7KVjYZCjEVxdI=\"},\"PREVIOUS\":{\"nodeId\":\"cc3ba501-0f62-45e0-888d-9a864b477cf0\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"4o4pNmaJb4KYUbA/PPaXahHmR58BtzuRhhh6xFzsq0M=\"},\"NEXT\":{\"nodeId\":\"128a2eb2-e443-49a8-ae52-85c9175eede1\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"muP+OKRREVpZ9EuFgxojIfXD6vc1gvu1yal0BIwmokw=\"}},\"hash\":\"YKPzyV6TuiLPtmEFNLq2Tdm9/x4VOkC7pPaEPAVZsQo=\",\"text\":\"</Popover>     <Popover         handle={<Button label=\\\"Don’t click on me! \\\" isTitleCased={false} />}         isPadded         placement=\\\"top\\\"         isHoverable         shouldCloseOtherPopoversOnOpen={false}     >         Hi 👋     </Popover> </Group> ```  You also can set `doesListenToOtherPopovers={false}` to tell a Popover not to close when other Popovers are opened. ```jsx name=\\\"Interactions between multiple Popovers 2\\\" <Group>     <Popover         handle={             <Button                 label=\\\"Click me, then hover the other one\\\"                 isTitleCased={false}             />         }         isPadded         placement=\\\"top\\\"         doesListenToOtherPopovers={false}     >         Hello, it’s me! </Popover>     <Popover         handle={<Button label=\\\"Don’t click on me! \\\" isTitleCased={false} />}         isPadded         placement=\\\"top\\\"         isHoverable     >         Hi 👋     </Popover> </Group> ```  ### Overflow behavior  Sometimes Popover content can be huge and can risk pushing part of the Popover itself outside the viewport. Use the `doesStickToEdges` prop to keep its content fully in the viewport and force the Popover to stick to the edges of the viewport and become scrollable. `doesStickToEdges` can be set to a few values:  -   `inline` (will only stick in the `inline` axis (the x axis)), -   `block` (will only stick in the `block` axis (the y axis)), -   `both` or `true` (will stick to both axes), -   `false` (won’t stick to edges)  ```jsx name=\\\"Overflow behavior\\\" <Popover     handle={<Button label=\\\"Huge Popover\\\" isTitleCased={false} />}     isPadded     placement=\\\"top-start\\\"     doesStickToEdges={useKnob('doesStickToEdges', [         'both',         'inline',         'block',         true,         false,     ])}     width=\\\"200px\\\" >     <Text>         Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim iure sed,         amet dignissimos eligendi repudiandae cum commodi odit ex obcaecati         blanditiis ipsa quo modi numquam tempore, reiciendis sint quam         architecto voluptatibus quia? Animi aut ipsa optio eum doloribus libero         sapiente beatae, adipisci sed nam explicabo unde cupiditate commodi,         nihil magni mollitia perspiciatis assumenda veniam accusamus? Ab         accusantium, mollitia fuga voluptate a aliquam neque est ut facere sint         nam dolor iusto molestiae expedita similique saepe doloremque suscipit         ipsa? Laboriosam assumenda nesciunt nobis aperiam aspernatur at         voluptatum alias ex sequi, minima voluptas suscipit minus neque? Consequatur beatae cum, assumenda eos quia, voluptatibus odio fuga ab         ipsam voluptates quas architecto tenetur maiores hic, necessitatibus a. Quas perferendis doloremque voluptatum odio excepturi blanditiis magni         eius atque, molestias rerum laboriosam minima consectetur consequatur         obcaecati optio neque accusantium voluptates nulla doloribus in         praesentium labore quae tenetur. Consequatur recusandae vitae dolor in         consectetur, totam eaque id adipisci est facilis placeat pariatur libero         reiciendis repellendus error, odit illum illo! Vero exercitationem         sapiente sunt voluptatibus suscipit perferendis nisi dicta. Praesentium,         iusto quas. Cum, et sint? Sit autem sunt laborum beatae minima ad? Doloribus minus, quidem ducimus ut error nisi voluptatem doloremque         nobis eligendi? Tenetur facilis error cupiditate quidem soluta. </Text> </Popover> ```  The Popover will try to stay inside the viewport. But if the handle scrolls away, and the Popover is no longer touching it (or \\\"tethered\\\" to it), the Popover will follow outside of the viewport. Set `isTethered` to `false` to keep the Popover inside the viewport, even when it is now longer touching the handle.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"128a2eb2-e443-49a8-ae52-85c9175eede1":{"__data__":"{\"id_\":\"128a2eb2-e443-49a8-ae52-85c9175eede1\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Popover_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"HM7VHb5N8NSjOsawZ79aPkWRNZB+Hd7KVjYZCjEVxdI=\"},\"PREVIOUS\":{\"nodeId\":\"09b01219-3179-468d-bfb9-d90f3f9ba752\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Popover\",\"title\":\"Popover\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Popover/popover.mdx\"},\"hash\":\"YKPzyV6TuiLPtmEFNLq2Tdm9/x4VOkC7pPaEPAVZsQo=\"}},\"hash\":\"muP+OKRREVpZ9EuFgxojIfXD6vc1gvu1yal0BIwmokw=\",\"text\":\"```jsx name=\\\"Overflow behavior 2\\\" <Popover     handle={<Button label=\\\"Untethered Popover\\\" isTitleCased={false} />}     isPadded     placement=\\\"right-start\\\"     doesStickToEdges     isTethered={false} >     <Text>         Scroll the page until the button disapears. This Popover will stay in         the viewport. </Text> </Popover> ```  ### Hidden handle  As the popover will follow the handle’s position, the handle has to have a physical size. Which means that you **cannot use** `display: none` on it (or on its parents), otherwise the popover will jump to (0, 0). ```jsx name=\\\"Wrong behavior when hidden\\\" const [isHidden, setIsHidden] = React.useState(false);  return (     <div style={{ display: isHidden ? 'none' : undefined }}>         <Popover             handle={<Button label=\\\"Toggle popover\\\" />}             isPadded             onClose={() => setIsHidden(false)}         >             <Button label=\\\"Hide handle\\\" onClick={() => setIsHidden(true)} />         </Popover>     </div> ); ```  There are 2 possible fixes for this:  1. use `visibility: hidden` instead of `display: none` 2. use React event listeners (that follow the VDOM)  The case of React event listeners is for if you want to do something like `:not(:hover) { display: none }`. Instead, you can use `onMouseEnter` / `onMouseLeave` to track the `:hover` event on the whole VDOM and then use those to apply `display: none` if you want to. ```jsx name=\\\"Fixed behavior with visibility\\\" const [isHidden, setIsHidden] = React.useState(false);  return (     <div style={{ visibility: isHidden ? 'hidden' : undefined }}>         <Popover             handle={<Button label=\\\"Toggle popover\\\" />}             isPadded             onClose={() => setIsHidden(false)}         >             <Button label=\\\"Hide handle\\\" onClick={() => setIsHidden(true)} />         </Popover>     </div> ); ```  ```jsx name=\\\"Fixed behavior with hover\\\" const [isHidden, setIsHidden] = React.useState(true);  return (     <Panel         onMouseEnter={() => setIsHidden(false)}         onMouseLeave={() => setIsHidden(true)}     >         Hover here         <div style={{ display: isHidden ? 'none' : undefined }}>             This popover is visible as long as you hover either on Panel, or on             the popover             <br />             <Popover handle={<Button label=\\\"Toggle popover\\\" />} isPadded>                 I’m a popover             </Popover>         </div>     </Panel> ); ```  ### Offset  The offset prop lets you displace a popover element from its handle element. > **Info: Use Case** > In `` and ``, when we click the picker button, a popover is displayed, and we adjust the offset of the popover to position it directly above the button, effectively hiding the button. You can pass an array `[skidding, distance]` to the offset. The first number, `skidding`, displaces the popper along the handle element. The second number, `distance`, represents the distance between the popover and the handle element. If it is a negative number, the popover will overlap the handle element. For more intuitive explanations, see popper's doc. ```jsx width=\\\"328\\\" name=\\\"Popover with array offset value\\\" <Popover     offset={[10, 100]}     handle=\\\"Handle\\\"     isPadded     placement={useKnob('placement', ['top', 'right', 'bottom', 'left'])} >     I'm a popover </Popover> ```  You can also pass a function `(options: OffsetOptionType) => [skidding, distance]` for dynamic values. ```ts type OffsetOptionType = {     popper: Rect;     reference: Rect;     placement: Placement; }; ```  ```jsx jsx width=\\\"328\\\" name=\\\"Popover with function offset value\\\" const placement = useKnob('placement', ['top', 'right', 'bottom', 'left']);  const reference = <Button label=\\\"Toggle\\\" />;  return (     <Flex justify=\\\"center\\\">         <Popover             handle={reference}             isPadded             placement={placement}             offset={({ placement, reference, popper }) => {                 return [0, 20];             }}         >             I'm a popover         </Popover>     </Flex> ); ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3a064d6d-2f99-4640-a32a-c1e5dd9c58a7":{"__data__":"{\"id_\":\"3a064d6d-2f99-4640-a32a-c1e5dd9c58a7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Tooltip_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"kc07yOf/kKQ+3z5fHouLY0SrkntjkSkm0Tv+zEVKWNM=\"},\"NEXT\":{\"nodeId\":\"261d0879-8125-46a5-a641-c8a3181b962f\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"+VkKyeE5B4vtlYcfR5EZtgdEjKXquaiEUVVqVoJDtAE=\"}},\"hash\":\"0fbf6G5EyUzcMtYxqY30TPlGegngqU4ZFVxld75lJdk=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { PopoverButton } from '@druids/ui/dialogs/PopoverButton'; import { Tooltip } from '@druids/ui/dialogs/Tooltip'; import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import { InputText } from '@druids/ui/form/InputText'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { Overflower } from '@druids/ui/layout/Overflower'; import { useLatestRefValue } from '@druids/ui/lib/ref/use-latest-ref-value'; import { Link } from '@druids/ui/nav/Link'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { Table } from '@druids/ui/table/Table'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { List } from '@druids/ui/typography/List'; import { Text } from '@druids/ui/typography/Text'; import { Title } from '@druids/ui/typography/Title';  ### Example  ```jsx isFullWidth <Tooltip content=\\\"Hello, Tooltip, my old friend\\\">     <Button label=\\\"Hover me! \\\" /> </Tooltip> ```  ## Usage  Tooltip is a wrapper around tippy.js-react, so it can be independent and use its own CSS. ### Omitting a handle wrapper — `reference` prop  We can use a `reference` to an element instead of the `children` if we'd want to have our handle without an extra wrapper:  ```jsx const ref = React.useRef(); return (     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" reference={ref}>         <Button innerRef={ref} label=\\\"hover me\\\" />     </Tooltip> ); ```  ### Separating event targets and positioning with `triggerTarget`  We can use a separate trigger for the Tooltip if we’d want to separate it with the positioning. In the following example, the reference would be used as the target, and the `triggerTarget` prop would handle the trigger, so in the following example we could hover or focus on the input and get the Tooltip being shown over the ``:  ```jsx const buttonRef = React.useRef(); const inputRef = React.useRef(); const inputNode = useLatestRefValue(inputRef); return (     <Group>         <InputText ref={inputRef} placeholder=\\\"Hover me\\\" />         <Tooltip             content=\\\"Don’t forget to press the submit Button! \\\"             reference={buttonRef}             triggerTarget={inputNode}         >             <Button                 innerRef={buttonRef}                 label=\\\"Submit\\\"                 onClick={() => console.log('Thank you for pressing me!')}             />         </Tooltip>     </Group> ); ```  > **Warning** > The `triggerTarget` accepts the nodes themselves, so we cannot pass refs there, and we should use something like `useLatestRefValue` in order to access those nodes and not just `ref.current`, otherwise the target won’t be applied properly. ### Nested Tooltips  Nested Tooltips should disable the parent one and provide both Tooltips’ contents inside the child:  ```jsx <Tooltip shouldMergeNestedTooltips content=\\\"Foo Tooltip\\\">     <Tooltip>         <Button label=\\\"Foo\\\" />     </Tooltip>{' '}     <Tooltip shouldMergeNestedTooltips content=\\\"Bar Tooltip\\\">         <Tooltip>             <Button label=\\\"Bar\\\" />         </Tooltip>{' '}         <Tooltip content=\\\"Baz Tooltip\\\">             <Button label=\\\"Baz\\\" />         </Tooltip>     </Tooltip> </Tooltip> ```  > When there is a nested Tooltip, the original Tooltip won’t be rendered (to prevent issues like different padding). If you want to _also_ render the original on some other content, wrap the extra content with a propless Tooltip. Usage example: table headers with Tooltips, but also with ``s.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"261d0879-8125-46a5-a641-c8a3181b962f":{"__data__":"{\"id_\":\"261d0879-8125-46a5-a641-c8a3181b962f\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Tooltip_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"kc07yOf/kKQ+3z5fHouLY0SrkntjkSkm0Tv+zEVKWNM=\"},\"PREVIOUS\":{\"nodeId\":\"3a064d6d-2f99-4640-a32a-c1e5dd9c58a7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"0fbf6G5EyUzcMtYxqY30TPlGegngqU4ZFVxld75lJdk=\"},\"NEXT\":{\"nodeId\":\"3c23811b-ddcc-49b8-87f3-76a9b8df959c\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"bWaSmfVMAjCxRIy2u16rVH8NDz5gqTtBYbGzaTcZGFM=\"}},\"hash\":\"+VkKyeE5B4vtlYcfR5EZtgdEjKXquaiEUVVqVoJDtAE=\",\"text\":\"Usage example: table headers with Tooltips, but also with ``s. In the `` component, each column header has an Overflower out of the box, and the Tooltips easily can be added via a `tooltip` column option:  ```jsx width=\\\"300\\\" <Table     columns={React.useMemo(         () => [             {                 accessor: 'foo',                 Header: 'Short header',                 tooltip: 'A Tooltip for the first column',             },             {                 accessor: 'bar',                 Header: 'A very long column header that would overflow',                 tooltip: 'A Tooltip for the second column',             },         ],         [],     )}     data={React.useMemo(() => [{ foo: '1', bar: '2' }], [])} /> ```  ## Dos & Don’ts  -   **Do**      use a Tooltip to display a short piece of info that enhances user understanding (reinforcing what will happen on click, providing additional info about the context, etc.). Make sure it’s supplemental — not essential — information. -   **Don’t**      use a Tooltip as the only way a user can understand the context. For example, if an icon-only `` requires a Tooltip to be understood, the Button probably needs a `label`. -   **Do**               <PopoverButton             label=\\\"Hover me\\\"             icon={null}             isHoverable             isBorderless={false}             isDangerouslyNaked={false}             isPadded             width={360}         >                              Suggested next steps                                                                Viewing Related Metrics for{' '}                     command:kafka.kafka may help in                     understanding potential changes in app-specific                     characteristics for this workload’s processes. Viewing command:kafka.kafka{' '}                     processes in Live Processes may provide further insight into                     the current or historical state of the workload. Enabling continuous profiling for these processes may help                     investigate potential CPU issues. If the workload continues to experience CPU conditions                     highlighted by Watchdog, it may be necessary to scale up or                     scale out the workload to accommodate for the increase in                     load. use a `` instead of a Tooltip for multiple sentences, paragraphs, or lists. -   **Don’t**               <Tooltip             content={                 <>                     <Title                         as=\\\"h4\\\"                         size=\\\"lg\\\"                         variant=\\\"knockout\\\"                         marginTop=\\\"xs\\\"                         marginLeft=\\\"xs\\\"                     >                         Suggested next steps                                                                                                Viewing Related Metrics for{' '}                             command:kafka.kafka may                             help in understanding potential changes in                             app-specific characteristics for this workload’s                             processes. Viewing command:kafka.kafka{' '}                             processes in Live Processes may provide further                             insight into the current or historical state of the                             workload. Enabling continuous profiling for these processes                             may help investigate potential CPU issues. If the workload continues to experience CPU                             conditions highlighted by Watchdog, it may be                             necessary to scale up or scale out the workload to                             accommodate for the increase in load. }         >                                 use a Tooltip for multiple sentences, paragraphs, or lists. -   **Do**               <PopoverButton             label=\\\"Hover me\\\"             icon={null}             isHoverable             isBorderless={false}             isDangerouslyNaked={false}             isPadded             placement=\\\"top\\\"         >             I’m a link inside a Popover                    use a `` instead of a Tooltip when the content inside needs to be interactive. -   **Don’t**               <Tooltip             content={                 <>                                              I’m a Link                     {' '}                     inside a Tooltip                              }             isInteractive         >                                 use a Tooltip when the content inside needs to be interactive. Users don’t expect to be able to interact with the Tooltip itself — and links inside Tooltips have extremely low contrast.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3c23811b-ddcc-49b8-87f3-76a9b8df959c":{"__data__":"{\"id_\":\"3c23811b-ddcc-49b8-87f3-76a9b8df959c\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Tooltip_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"kc07yOf/kKQ+3z5fHouLY0SrkntjkSkm0Tv+zEVKWNM=\"},\"PREVIOUS\":{\"nodeId\":\"261d0879-8125-46a5-a641-c8a3181b962f\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"+VkKyeE5B4vtlYcfR5EZtgdEjKXquaiEUVVqVoJDtAE=\"},\"NEXT\":{\"nodeId\":\"c03c9bda-181c-4b7c-ac05-fc422493bf91\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"n6zJrOzc4jlwakPP6cahE9r+cdp4b6LTjGXdM+UAA0w=\"}},\"hash\":\"bWaSmfVMAjCxRIy2u16rVH8NDz5gqTtBYbGzaTcZGFM=\",\"text\":\"-   **Do**               <Table             data={[                 {                     service: 'primary-database',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             5 Alert                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             2 OK                                                                                                                                            }                         >                                                              5 Alert                                                                           ),                 },                 {                     service: 'replica-database',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             3 Warn                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             10 OK                                                                                                                                            }                         >                                                              3 Warn                                                                           ),                 },                 {                     service: 'cache',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             10 Alert                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             1 Warn                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             8 OK                                                                                                                                            }                         >                                                              10 Alert                                                                           ),                 },                 {                     service: 'load-balancer',                     status: (                         <Tooltip                             delay={['short', 'none']}                             content={                                 <>                                                                                                                       <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             23 OK                                                                                                                                                                                                     <Text                                             variant=\\\"knockout\\\"                                             marginLeft=\\\"sm\\\"                                         >                                             4 No Data                                                                                                                                            }                         >                                                              23 OK                                                                           ),                 },             ]}             columns={[                 {                     id: 'service',                     Header: 'Service',                     accessor: 'service',                     minWidth: 130,                 },                 {                     id: 'status',                     Header: 'Status',                     accessor: 'status',                     textAlign: 'center',                 },             ]}             style={{ background: 'var(--ui-background)' }}         />           set a short `delay` on the Tooltip when it appears on many elements in close proximity (e.g., in each row of a `` column) — but don’t set a `delay` when it disappears. This lets users mouse around the page without unnecessary disruption or distraction. ## Variants  ### Placement  While we can suggest the default position via a `placement` prop, if the Tooltip is not in the viewport, it will automatically choose a better placement. ```jsx isFullWidth <Flex justify=\\\"space-between\\\" wrap=\\\"wrap\\\" gap=\\\"md\\\">     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"left\\\">         <Button label=\\\"left tooltip on hover\\\" />     </Tooltip>     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"top\\\">         <Button label=\\\"top tooltip on hover\\\" />     </Tooltip>     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"bottom\\\">         <Button label=\\\"bottom tooltip on hover\\\" />     </Tooltip>     <Tooltip content=\\\"Hello, Tooltip, my old friend\\\" placement=\\\"right\\\">         <Button label=\\\"right tooltip on hover\\\" />     </Tooltip> </Flex> ```  ### Animation and delay  A Tooltip is shown immediately by default — but this can be modified in 2 ways:  -   Use `isAnimated` to include a short transition when it appears/disappears. -   Use `delay` to add a delay between when it’s triggered and when it appears. ```jsx isFullWidth <Tooltip     content=\\\"Hello, Tooltip, my old friend\\\"     {...useKnobs({         isAnimated: true,         delay: {             options: [                 {                     label: \\\"['short', 'none']\\\",                     value: ['short', 'none'],                 },             ],             value: ['short', 'none'],         },     })} >     <Button label=\\\"Hover me! \\\" /> </Tooltip> ```  > **Info** > Note how we can use a tuple with two values for the `delay`, making it possible to control the show and hide delay separately. > > Having an initial delay is helpful if we have a lot of elements and don’t want to trigger a Tooltip when just moving the cursor through them. But with an animated Tooltip we might want to remove the delay before hiding, as a transition already would be present. ### Max width  A Tooltip has a `maxWidth` of `300px` by default. Set this to a different value to override it.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c03c9bda-181c-4b7c-ac05-fc422493bf91":{"__data__":"{\"id_\":\"c03c9bda-181c-4b7c-ac05-fc422493bf91\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Tooltip_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"kc07yOf/kKQ+3z5fHouLY0SrkntjkSkm0Tv+zEVKWNM=\"},\"PREVIOUS\":{\"nodeId\":\"3c23811b-ddcc-49b8-87f3-76a9b8df959c\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/dialogs/Tooltip\",\"title\":\"Tooltip\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/dialogs/Tooltip/tooltip.mdx\"},\"hash\":\"bWaSmfVMAjCxRIy2u16rVH8NDz5gqTtBYbGzaTcZGFM=\"}},\"hash\":\"n6zJrOzc4jlwakPP6cahE9r+cdp4b6LTjGXdM+UAA0w=\",\"text\":\"Set this to a different value to override it. ```jsx <Tooltip     content=\\\"A very very long content value that should not be wrapped when we have a big custom value for the maxWidth\\\"     maxWidth={useKnob('maxWidth', [900, 600, 300])} >     <Button label=\\\"hover me\\\" /> </Tooltip> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"18b3eef8-6f87-4bec-9d08-0e731aaa3331":{"__data__":"{\"id_\":\"18b3eef8-6f87-4bec-9d08-0e731aaa3331\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Action\",\"title\":\"Action\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Action/action.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Action_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Action\",\"title\":\"Action\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Action/action.mdx\"},\"hash\":\"FVwuFaIwGayj3W27FxWUTTzhyOWfnBSy96egGngcdmk=\"}},\"hash\":\"kPWpLWhFHOWsI5sxtPGdp7N23bmS057RKy29JOiT3U4=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Action } from '@druids/ui/form/Action'; import { Grid } from '@druids/ui/layout/Grid'; import { Text } from '@druids/ui/typography/Text'; import { Link } from '@druids/ui/nav/Link'; import { StarFilledIcon } from '@druids/ui/icons/StarFilled';  ### Example  Action has almost no default styles — just `cursor: pointer` and resets. ```jsx name=\\\"Example\\\" <Action onClick={() => console.log('click!')}>     An unstyled regular action </Action> ```  ## Variants  ### Hover styles  By default the Action would have only a cursor change on hover, however there is a way to add either a color or a background change on hover via a `hoverStyle` prop. ```jsx name=\\\"Hover Styles\\\" <Action     {...useKnobs(['hoverStyle', 'level', { padding: 'sm' }])}     onClick={() => console.log('click!')} >     An action with a hover and a padding </Action> ```  Note how we can use the `padding` prop as well if we just want to make the action have a bigger clickable area. Also note that as Action doesn't have any distinctive styles by default, we need to provide them via component so it would be obvious that it could be hovered and clicked. ### Link  By default, the Action is rendered as a `` when the `onClick` is provided. However, sometimes there is a need to have an anchor instead, and this could be done automatically by providing a `href` prop:  ```jsx name=\\\"Anchor\\\" <Action href=\\\"#example2\\\">An action using an anchor</Action> ```  ### External Link  When used with a `href`, it is possible to make it external:  ```jsx name=\\\"External Anchor\\\" <Action href=\\\"#example2\\\" isExternal>     An action with an external link </Action> ```  ### Any other component  If we would like to use the Action with any other component, for example, when we'd want to have some complex layout inside, we could do it via an `as` prop which accepts either a component, or a JSX element that would be cloned and used as a wrapper (similar to how it is done in ``) — this can be useful for using with something like an ``. ```jsx name=\\\"As Prop\\\" <Action     hoverStyle=\\\"background\\\"     as={<Link href=\\\"#foo\\\" onClick={() => console.log('click!')} />}     padding=\\\"md\\\" >     An Action using a `Link` </Action> ```  > **Warning** > The component passed would need to be able to accepts any other props that are passed down to the Action like the `onClick` and `href` ones. ### Inside Other Components' `as` prop  > **Warning** > While it is possible to use the `as` prop to provide a layout to the insides, be careful not to remove the `button` element this way — for example, when using with a `` or ``, instead of doing something like `}>` it is better to do it the other way: `}`. ```jsx name=\\\"Inside As Prop\\\" <Grid     columns=\\\"min-content 1fr auto\\\"     as={         <Action             hoverStyle=\\\"background\\\"             onClick={() => console.log('click!')}             padding=\\\"md\\\"         />     } >     <StarFilledIcon />     <span         style={{             color: 'var(--action-hover-text-color, var(--ui-interaction-primary))',         }}     >         Left column of Action     </span>     <span>Right column</span> </Grid> ```  > Note how it is possible to use CSS variables in order to style something to have a certain color before hover, but get the proper color afterwards. ## States  An Action can be disabled via an `isDisabled` prop, in which case the `onClick` or `href` won't be applied to it:  ```jsx name=\\\"Disabled\\\" <Action isDisabled onClick={() => console.log('click!')}>     A disabled action </Action> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a3f19c9e-5a64-4bbc-a2f9-f9400793fc70":{"__data__":"{\"id_\":\"a3f19c9e-5a64-4bbc-a2f9-f9400793fc70\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Button_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"9tQpnP+U7ceHhavcKnu7j0snJug+NWBGkmwK6kEPUmg=\"},\"NEXT\":{\"nodeId\":\"2a0ff4dd-c23d-4512-9340-e43e56cbb2e7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"7I9KTphWk6TjuWp4TJ1o1xSX4wkPwsECoYQDtptDIsU=\"}},\"hash\":\"xfl19d37lre+5Z+fh4ByHuhqY24sL7nzRva2iVlHAr4=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Tooltip } from '@druids/ui/dialogs/Tooltip'; import { Button } from '@druids/ui/form/Button'; import { ArrowLeftIcon } from '@druids/ui/icons/ArrowLeft'; import { ArrowRightIcon } from '@druids/ui/icons/ArrowRight'; import { CaretDownIcon } from '@druids/ui/icons/CaretDown'; import { CogIcon } from '@druids/ui/icons/Cog'; import { ExternalLinkIcon } from '@druids/ui/icons/ExternalLink'; import { PlusIcon } from '@druids/ui/icons/Plus'; import { TrashIcon } from '@druids/ui/icons/Trash'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { IntegrationLogo } from '@druids/ui/misc/IntegrationLogo'; import { Link } from '@druids/ui/nav/Link'; import { FeatureStatusLabel } from '@druids/ui/pills/FeatureStatusLabel';          ### Example  ```jsx name=\\\"Example\\\" permutations=\\\"isPrimary\\\" <Button     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ isPrimary, level }) =>                     `${isPrimary ? 'Primary ' : ''}${level} Button`,             },         },     ])} /> ```  ## Usage  ### Dos & Don’ts  -   **Do**                                                             combine verbs and nouns to create clear, actionable labels. -   **Don’t**                                                             use articles like “a” or “the” in labels. Keep them concise. -   **Do**                                                             use an ellipsis to indicate when a Button will trigger an intermediate step before any changes are made permanent. This helps reinforce that users will have a chance to review consequential actions. -   **Do**                                                             use the `isPrimary` variant to draw focus to the most important action a user can take. -   **Don’t**                                                             use more than 1 `isPrimary` Button on a single screen. If this can’t be avoided, at least ensure they don’t appear in close proximity. -   **Do**                            <Button                 label=\\\"Delete User Data\\\"                 icon={TrashIcon}                 level=\\\"danger\\\"                 isPrimary             />                                                               use `level=\\\"danger\\\"` when a Button deletes user data. For extra emphasis, combine it with `isPrimary`. -   **Do**                                                                          place icons to the right of text when forward motion is suggested or when a Button uses a `` and triggers a ``. -   **Don’t**                                                             place icons to the right of text in any other circumstance. In all other cases, icons should be to the left of the text. -   **Do**                          use `isBorderless` instead of `isDangerouslyNaked` whenever possible. It’s important that Buttons have super obvious hover states, even when a border and/or background in the base state isn’t necessary. -   **Don’t**                          use an `isDangerouslyNaked` Button unless there’s absolutely no way to use `isBorderless`. ## Variants  > **Warning** > In cases where you need a `` HTML element with custom styles, use the `` component instead. ### Levels  There are 4 Button levels: `default`, `success`, `warning`, and `danger`. ```jsx name=\\\"Levels\\\" permutations=\\\"level\\\" <Button     {...useKnobs([         'level',         'isPrimary',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ level }) => level,             },         },     ])} /> ```  ### Primary  An `isPrimary` Button is designed to call user attention to the most important action(s) for a given page or workflow. Buttons with a non-`default` `level` should usually also be `isPrimary`. ```jsx name=\\\"Primary\\\" permutations=\\\"level\\\" <Button     {...useKnobs([         { isPrimary: true },         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ isPrimary, level }) =>                     `${isPrimary ? 'Primary ' : ''}${level}`,             },         },     ])} /> ```  ### Sizes  There are 4 supported sizes.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2a0ff4dd-c23d-4512-9340-e43e56cbb2e7":{"__data__":"{\"id_\":\"2a0ff4dd-c23d-4512-9340-e43e56cbb2e7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Button_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"9tQpnP+U7ceHhavcKnu7j0snJug+NWBGkmwK6kEPUmg=\"},\"PREVIOUS\":{\"nodeId\":\"a3f19c9e-5a64-4bbc-a2f9-f9400793fc70\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"xfl19d37lre+5Z+fh4ByHuhqY24sL7nzRva2iVlHAr4=\"},\"NEXT\":{\"nodeId\":\"ae361ef7-9d65-486e-9a11-3eb3c564dfd7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"OIdrkYEK1fVUbtxJdIfGn5vvEZzHCl/If3f7lo/KzOw=\"}},\"hash\":\"7I9KTphWk6TjuWp4TJ1o1xSX4wkPwsECoYQDtptDIsU=\",\"text\":\"```jsx name=\\\"Sizes\\\" permutations=\\\"size\\\" <Button     {...useKnobs([         'size',         'isPrimary',         'level',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ size }) =>                     ({                         xs: 'Extra Small',                         sm: 'Small',                         md: 'Medium',                         lg: 'Large',                     }[size]),             },         },     ])} /> ```  ### Borders  The `isBorderless` prop removes the border from any Button. On hover, it gets a background fill. ```jsx name=\\\"Borderless\\\" permutations=\\\"level\\\" <Button     isBorderless     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ level }) => `Borderless ${level} Button`,             },         },     ])} /> ```  The `isDangerouslyNaked` prop produces a more extreme version of an `isBorderless` Button. Its _text_ color changes on hover — not its background. > **Warning: The unconventional name is to discourage casual use** > > Undecorated Buttons generally should have [[higherLevelDesignThemes:responsiveness | obvious hover states]] to indicate interactivity — which isn’t the case when only the text color changes. Use `isDangerouslyNaked` only in special situations where a background on hover (`isBorderless`) is truly inappropriate. ```jsx name=\\\"Dangerously naked\\\" permutations=\\\"level\\\" <Button     isDangerouslyNaked     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ level }) => `Naked ${level} Button`,             },         },     ])} /> ```  When `isPrimary` is applied to an `isBorderless` or `isDangerouslyNaked` Button, the text is colored accordingly. ```jsx name=\\\"Borderless and primary\\\" permutations=\\\"level\\\" <Button     {...usePermutations({         isBorderless: true,         isDangerouslyNaked: true,     })}     {...useKnobs([         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',         { isPrimary: true },         {             label: {                 value: '',                 order: 1, // FIXME: should be last by itself                 fallback: ({ isPrimary, level }) =>                     `${isPrimary ? 'Primary ' : ''}${level} Button`,             },         },     ])} /> ```  ### Shade  When used on a colored/shaded background regardless of the theme, the contrast of the Button has to be higher. All variants of an `isShade` Button look the same — regardless of whether `isBorderless` or `isDangerouslyNaked` are set. ```jsx name=\\\"Shade\\\" const isShade = useKnob('isShade', true); const level = useKnob('level'); return (     <div style={{ background: 'var(--ui-background-shade)', padding: '8px' }}>         <Button isShade={isShade} level={level} label={'Button'} />         <Button             isShade={isShade}             level={level}             isBorderless             label={'Borderless button'}         />         <Button             isShade={isShade}             level={level}             isDangerouslyNaked             label={'Naked button'}         />     </div> ); ```  ### Icons  By default, an icon appears to the left of the text. > **Warning** > Icons to the right of text (with the prop `iconRight`) should be used in contexts where forward motion is being suggested with an `` or `` (“Go,” “Next,” “Continue,” “Open externally,” etc.). Otherwise, stick to the default. If there’s no text ([[dosAndDonts:icon_usage|use with caution]]), the Button will be square.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ae361ef7-9d65-486e-9a11-3eb3c564dfd7":{"__data__":"{\"id_\":\"ae361ef7-9d65-486e-9a11-3eb3c564dfd7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Button_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"9tQpnP+U7ceHhavcKnu7j0snJug+NWBGkmwK6kEPUmg=\"},\"PREVIOUS\":{\"nodeId\":\"2a0ff4dd-c23d-4512-9340-e43e56cbb2e7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"7I9KTphWk6TjuWp4TJ1o1xSX4wkPwsECoYQDtptDIsU=\"},\"NEXT\":{\"nodeId\":\"941875d2-896e-4681-98ae-73c9071197c8\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"NvXgUJMIkQyn0PYVnBh1q3uxiEu5S9VdKG6YgilBMYg=\"}},\"hash\":\"OIdrkYEK1fVUbtxJdIfGn5vvEZzHCl/If3f7lo/KzOw=\",\"text\":\"```jsx name=\\\"Icons\\\" permutations=\\\"isPrimary,isBorderless\\\" <Button     {...useKnobs([         'isBorderless',         'isPrimary',         'level',         'size',         'isDisabled',         'isLoading',     ])}     {...usePermutations({         Default: {             icon: CogIcon,             label: 'Benjamin Button',         },         'Icon on the right': {             iconRight: ArrowRightIcon,             label: 'Forward Button',         },         'Icon on the both sides': {             icon: CogIcon,             iconRight: ArrowRightIcon,             label: 'Button with 2 icons',         },         'No label': {             icon: PlusIcon,         },     })} /> ```  ### Integration logos  To display the logo of a third-party integration or language, pass an `` component to the `icon` prop. > **Warning: Remember to set the appropriate props on the IntegrationLogo** > > -   `isIcon` > -   `variant=\\\"avatar\\\"` > -   `isColorReversed` depending on whether the Button has a light or dark background >     -   If the Button’s background becomes dark on hover, makes sure to change `isColorReversed` in response. ```jsx partial=\\\"logoAsIcon\\\" isHidden isMemoized const Logo = ({ ...props }) => (     <IntegrationLogo         {...props}         isIcon         integrationId=\\\"github\\\"         variant=\\\"avatar\\\"     /> );  const LogoWithColorReversed = ({ ...props }) => (     <IntegrationLogo         {...props}         isIcon         integrationId=\\\"github\\\"         variant=\\\"avatar\\\"         isColorReversed     /> );  const LogoWithColorReversedOnHover = ({ isHovered, ...props }) => (     <IntegrationLogo         {...props}         isIcon         integrationId=\\\"github\\\"         variant=\\\"avatar\\\"         isColorReversed={isHovered}     /> ); ```  ```jsx name=\\\"Integration logos\\\" withPartials=\\\"logoAsIcon\\\" <Button     {...useKnobs(['level', 'size', 'isDisabled', 'isLoading'])}     {...usePermutations({         Default: {             icon: Logo,         },         Primary: {             icon: LogoWithColorReversed,             isPrimary: true,         },         'Borderless Primary': {             icon: LogoWithColorReversedOnHover,             isPrimary: true,             isBorderless: true,         },     })}     label=\\\"GitHub\\\"     isTitleCased={false} /> ```  ### Disabled and loading  A Button can be `isDisabled` or `isLoading`. ```jsx isList name=\\\"Disabled and loading\\\" <Button isDisabled label=\\\"Disabled Button\\\" /> <Button isLoading label=\\\"Loading Button\\\" /> <Button isDisabled isPrimary label=\\\"Disabled Primary Button\\\" /> <Button isLoading isPrimary label=\\\"Loading Primary Button\\\" /> <Button isDisabled isBorderless label=\\\"Disabled Borderless Button\\\" /> <Button isLoading isBorderless label=\\\"Loading Borderless Button\\\" /> <Button isDisabled isDangerouslyNaked label=\\\"Disabled Naked Button\\\" /> <Button isLoading isDangerouslyNaked label=\\\"Loading Naked Button\\\" /> ```  ### Width  A normal Button will automatically fit to its content size. But an `isFullWidth` Button will fill its container horizontally. ```jsx width=\\\"500\\\" name=\\\"Width\\\" <Button isFullWidth={true} isPrimary label=\\\"Full-Width Button\\\" /> ```  ### Feature status  Any Button can be given a `` with the `featureStatus` prop. This shows it represents an alpha, beta, or new feature. ```jsx name=\\\"Feature status\\\" isList <Button     level=\\\"default\\\"     label=\\\"Button is\\\"     featureStatus=\\\"beta\\\" /> <Button     level=\\\"default\\\"     isPrimary     label=\\\"Primary Button is\\\"     featureStatus=\\\"beta\\\" /> <Button     isBorderless     label=\\\"Borderless Button is\\\"     featureStatus=\\\"alpha\\\" /> <Button     isBorderless     isPrimary     label=\\\"Primary Borderless Button is\\\"     featureStatus=\\\"alpha\\\" /> <Button     isDangerouslyNaked     label=\\\"Naked Button is\\\"     featureStatus=\\\"new\\\" /> <Button     isDangerouslyNaked     isPrimary     label=\\\"Primary Naked Button is\\\"     featureStatus=\\\"new\\\" /> ```  ### Button as link  A “normal” link can be added by using the `href` prop. ```jsx name=\\\"Button as normal link\\\" <Button     isPrimary     label=\\\"Button with link\\\"     href=\\\"http://www.google.com\\\"     isExternal /> ```  Complex links (e.g., ones that use react-router instead of `href`) can be passed in the `component` prop. They will be styled to appear identical to a Button.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"941875d2-896e-4681-98ae-73c9071197c8":{"__data__":"{\"id_\":\"941875d2-896e-4681-98ae-73c9071197c8\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Button_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"9tQpnP+U7ceHhavcKnu7j0snJug+NWBGkmwK6kEPUmg=\"},\"PREVIOUS\":{\"nodeId\":\"ae361ef7-9d65-486e-9a11-3eb3c564dfd7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Button\",\"title\":\"Button\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Button/button.mdx\"},\"hash\":\"OIdrkYEK1fVUbtxJdIfGn5vvEZzHCl/If3f7lo/KzOw=\"}},\"hash\":\"NvXgUJMIkQyn0PYVnBh1q3uxiEu5S9VdKG6YgilBMYg=\",\"text\":\"They will be styled to appear identical to a Button. This is an escape hatch so the Button can avoid relying on any routing logic (non-DRUIDS code). This is the only way routing links should be used with Button. ```jsx name=\\\"Button as component link\\\" <Button isPrimary label=\\\"Button with component link\\\" component={<Link />} /> ```  {/* @if IS_PRIVATE */}  ## Interacting with `` in tests  ### Getting a handle to a &lt;Button&gt;  The `button()` function returns an object that you can use to query and manipulate a Button. To call it, just pass in the same label that you provided to the component’s `label` prop:  ```ts const myButton = button('My Button'); ```  Note that calling `button()` doesn’t actually _do_ anything; in particular, it doesn’t query the DOM looking for the Button. So, you shouldn’t expect `button()` itself to throw an error or cause the test to fail. The utility will start interacting with the DOM **only** when you call one of its methods to manipulate or query the Button. ### Clicking a button  The most common thing you’ll need to do with a `` is to click it. You can do that with the `click()` method:  ```ts const myButton = button('My Button'); await myButton.click(); ```  ### Checking a button’s enabled state  You can check whether a Button is enabled with the `isEnabled()` method:  ```ts const myButton = button('My Button'); expect(myButton.isEnabled()).toBe(true); ```  ### Checking a button’s loading state  You can check whether a Button is loading with the `isLoading()` method:  ```ts const myButton = button('My Button'); expect(myButton.isLoading()).toBe(true); ```  {/* @endif */}\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4ec3cf3c-0d64-4579-82b8-f1bfe69aebb4":{"__data__":"{\"id_\":\"4ec3cf3c-0d64-4579-82b8-f1bfe69aebb4\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/InputText\",\"title\":\"InputText\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/InputText/input-text.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"InputText_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/InputText\",\"title\":\"InputText\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/InputText/input-text.mdx\"},\"hash\":\"srV7a5aoyz700qmmteIudYLjnf0/7BUcylitbZNwGko=\"},\"NEXT\":{\"nodeId\":\"1543e38d-1757-4a66-9bfe-addb2dfa17cb\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/InputText\",\"title\":\"InputText\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/InputText/input-text.mdx\"},\"hash\":\"lsIYJBeX4OTjeQ+w1BYew3SDrXvXBw/zO/L4d8e1kWE=\"}},\"hash\":\"cCZ/iPsOFLD7Hvx2bceLAg3pWxTLybrMAPyzhQhMs9I=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { InputText } from '@druids/ui/form/InputText'; import { InputSearch } from '@druids/ui/form/InputSearch'; import { InputNumber } from '@druids/ui/form/InputNumber'; import { InputTime } from '@druids/ui/form/InputTime'; import { InputPassword } from '@druids/ui/form/InputPassword';          ## Example  ```jsx name=\\\"Base Example\\\" const [text, setText] = React.useState(''); return (     <InputText         placeholder=\\\"John Doe\\\"         value={text}         onChange={(event) => setText(event.target.value)}     /> ); ```  ## Variants  ### Levels  There are 4 different InputText levels: `default`, `success`, `warning`, and `danger`. ```jsx name=\\\"Levels\\\" isList <InputText level=\\\"default\\\" placeholder=\\\"default\\\" /> <InputText level=\\\"success\\\" placeholder=\\\"success\\\" /> <InputText level=\\\"warning\\\" placeholder=\\\"warning\\\" /> <InputText level=\\\"danger\\\" placeholder=\\\"danger\\\" /> ```  ### Sizes  There are 3 different supported sizes. ```jsx name=\\\"Sizes\\\" isList <InputText size=\\\"lg\\\" placeholder=\\\"Large\\\" /> <InputText size=\\\"md\\\" placeholder=\\\"Medium\\\" /> <InputText size=\\\"sm\\\" placeholder=\\\"Small\\\" /> ```  ### Types  There are 4 different subtypes: ``, ``, ``, ``. ```jsx name=\\\"Types\\\" isList <InputText placeholder=\\\"text\\\" /> <InputSearch placeholder=\\\"search\\\" /> <InputNumber placeholder=\\\"number\\\" /> <InputTime /> <InputPassword placeholder=\\\"password\\\" /> <InputPassword placeholder=\\\"masked\\\" inputType=\\\"masked\\\" /> ```  > **Warning** > It is not recommended to use the deprecated `inputType` prop. Please use the correct subtype component. ### Width  A normal InputText will automatically fit to its content size. But an `isFullWidth` InputText will fill its container horizontally. ```jsx name=\\\"Width\\\" isFullWidth <InputText isFullWidth={true} placeholder=\\\"Full-width\\\" /> ```  ### Disabled  A disabled InputText isn’t editable, it can’t be focused via keyboard, and its contents aren’t sent when its form is submitted. ```jsx name=\\\"Disabled\\\" isList <InputText isDisabled={true} placeholder=\\\"isDisabled\\\" /> ```  ### Read-only  Like the disabled variant, a read-only InputText isn’t editable. However, the read-only variant _can_ be focused via keyboard and its contents _are_ sent when its form is submitted. ```jsx name=\\\"Read-only\\\" isList <InputText isReadOnly={true} placeholder=\\\"isReadOnly\\\" /> ```  ### Monospace  Monospace font characters all have the same width, using the same amount of horizontal space. They can make short strings of text, especially when numerical, more legible. Because you don't have to account for different text widths, a monospace inputText field can often be narrower than the normal field. Avoid using for longer text blocks, since its spacing can reduce readability. ```jsx name=\\\"Monospace\\\" <InputText isMonospace={true} placeholder=\\\"isMonospace\\\" /> ```  ### Soft  While effective, the visual stylings of our form elements (inputs, select, text area, toggle switch, inputs within facets, etc) can be distracting in relatively complex forms with lots of different inputs. Additionally, the way our inputs look can also potentially take the user’s attention away from the visualizations on a page. We added an optional prop isSoft to our input components to show a more minimal input treatment better suited for high density forms. This treatment has a gray background color and no border color. ```jsx name=\\\"Soft\\\" <InputText isSoft placeholder=\\\"isSoft\\\" /> ```  ### Soft + disabled  The disabled state of the isSoft input component needed to be adjusted so that the user clearly knew that it is disabled. If your form has several disabled inputs, we recommend not using the isSoft component for your form inputs. ```jsx name=\\\"SoftDisabled\\\" <InputText isSoft isDisabled placeholder=\\\"isSoft isDisabled\\\" /> ```  ## Validation  ### Placement  Validation can be positioned in 2 ways: `inline` or `block`.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1543e38d-1757-4a66-9bfe-addb2dfa17cb":{"__data__":"{\"id_\":\"1543e38d-1757-4a66-9bfe-addb2dfa17cb\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/InputText\",\"title\":\"InputText\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/InputText/input-text.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"InputText_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/InputText\",\"title\":\"InputText\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/InputText/input-text.mdx\"},\"hash\":\"srV7a5aoyz700qmmteIudYLjnf0/7BUcylitbZNwGko=\"},\"PREVIOUS\":{\"nodeId\":\"4ec3cf3c-0d64-4579-82b8-f1bfe69aebb4\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/InputText\",\"title\":\"InputText\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/InputText/input-text.mdx\"},\"hash\":\"cCZ/iPsOFLD7Hvx2bceLAg3pWxTLybrMAPyzhQhMs9I=\"}},\"hash\":\"lsIYJBeX4OTjeQ+w1BYew3SDrXvXBw/zO/L4d8e1kWE=\",\"text\":\"```jsx name=\\\"Placement\\\" isList <InputText     validationMessage=\\\"I’ve made a huge mistake\\\"     placeholder=\\\"Inline (hover on me)\\\"     validationPlacement=\\\"inline\\\" /> <InputText     validationMessage=\\\"I’ve made a huge mistake\\\"     placeholder=\\\"Block\\\"     validationPlacement=\\\"block\\\" /> ```  ### Levels  Validation supports 2 levels: `success` and `danger`. ```jsx name=\\\"Levels\\\" isList <InputText     validationLevel=\\\"success\\\"     validationMessage=\\\"This is a huge success\\\"     placeholder=\\\"Success\\\" /> <InputText     validationLevel=\\\"danger\\\"     validationMessage=\\\"Enemies of the Heir, beware! You’ll be next, Mudbloods! \\\"     placeholder=\\\"Danger\\\" /> ```  {/* @if IS_PRIVATE */}  ## Interacting with `` in tests  ### Making &lt;InputText&gt; testable  The `inputText()` helper relies on the `aria-label` attribute to identify various DOM elements that the `` component renders. Provide your `` with a descriptive and specific `aria-label` prop, which you can then use in your tests to locate it:  ```tsx return <InputText value={value} onChange={onChange} aria-label=\\\"My Input\\\" />; ```  Alternatively, you can use the `` element with the `htmlFor` prop to identify a particular label as belonging to the input:  ```tsx const inputId = React.useId(); return (     <>         <Label htmlFor={inputId}>My Input</Label>         <InputText id={inputId} value={value} onChange={onChange} />;     </> ); ```  ### Getting a handle to an &lt;InputText&gt;  The `inputText()` function returns an object that you can use to query and manipulate an InputText. To call it, just pass in the same label that you provided to the component’s `aria-label` prop:  ```ts const myInput = inputText('My Input'); ```  Note that calling `inputText()` doesn’t actually _do_ anything; in particular, it doesn’t query the DOM looking for the InputText. So, you shouldn’t expect `inputText()` itself to throw an error or cause the test to fail. The utility will start interacting with the DOM **only** when you call one of its methods to manipulate or query the InputText. ### Typing into the input  The most common thing you’ll need to do with an `` is to type a value into it. Use the `type()` method:  ```ts const myInput = inputText('My Input'); await myInput.type('Hello World'); ```  #### Prepend or replace text  If you need to add text to the beginning of an input with an existing value, use the `prepend()` method. If you need to replace the entire value, use the `replace()` method. #### Special keys  The input text helper has convenience methods for pressing the Return (Enter) key and the Escape key:  ```ts const myInput = inputText('My Input'); await mySelect.type('Hello World'); await mySelect.pressReturn(); // or await mySelect.pressEscape(); ```  ### Focus and blur  The `type()` method will automatically focus the input before typing into it. If you need to focus the input without typing anything, use the `focus()` method:  ```ts const myInput = inputText('My Input'); await mySelect.focus(); ```  After typing into the input, it will stay focused. If you want to explicitly unfocus it, use the `blur()` method:  ```ts const myInput = inputText('My Input'); await myInput.type('Hello World'); // The input is now focused. await myInput.blur(); // Now it’s not. ```  ### Checking enabled state  You can check whether the input is enabled or disabled using the `isEnabled()` method:  ```ts const myInput = inputText('My Input'); expect(myInput.isEnabled()).toBe(true); ```  ### Checking readonly state  You can check whether the input is readonly using the `isReadOnly()` method:  ```ts const myInput = inputText('My Input'); expect(myInput.isReadOnly()).toBe(false); ```  {/* @endif */}\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6a325474-ca38-48a5-bed5-2b6e72259b0f":{"__data__":"{\"id_\":\"6a325474-ca38-48a5-bed5-2b6e72259b0f\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Select_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA=\"},\"NEXT\":{\"nodeId\":\"e5b3c733-2e3b-42e3-a0c7-ba102f049d26\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"XZznYbcGjQZbpW342TGF7C4vRxHmdbf6zO/bljtwY5I=\"}},\"hash\":\"vpgnUnWtzxlzNMMeKsH4v/CNalnrTMQa67xZhp0ahMU=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Field } from '@druids/ui/form/Field'; import { Group } from '@druids/ui/form/Group'; import { Select, AsyncSelect, CreatableSelect } from '@druids/ui/form/Select'; import { defaultMenuRenderer } from '@druids/ui/form/Select/BaseSelect'; import { makeOptionGroup } from '@druids/ui/form/Select/OptionGroup'; import { CheckIcon } from '@druids/ui/icons/Check'; import { CiIcon } from '@druids/ui/icons/Ci'; import { DashboardIcon } from '@druids/ui/icons/Dashboard'; import { Icon } from '@druids/ui/icons/Icon'; import { NotebookIcon } from '@druids/ui/icons/Notebook'; import { SecurityPlatformIcon } from '@druids/ui/icons/SecurityPlatform'; import { SyntheticsIcon } from '@druids/ui/icons/Synthetics'; import { WatchdogIcon } from '@druids/ui/icons/Watchdog'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Spacing } from '@druids/ui/layout/Spacing'; import { Image } from '@druids/ui/misc/Image'; import { Text } from '@druids/ui/typography/Text';  import DosAndDontsExample_2A_Light from './dos-and-donts-images/select-2a-light.png'; import DosAndDontsExample_2A_Dark from './dos-and-donts-images/select-2a-dark.png'; import DosAndDontsExample_2B_Light from './dos-and-donts-images/select-2b-light.png'; import DosAndDontsExample_2B_Dark from './dos-and-donts-images/select-2b-dark.png'; import DosAndDontsExample_3_Light from './dos-and-donts-images/select-3-light.png'; import DosAndDontsExample_3_Dark from './dos-and-donts-images/select-3-dark.png';          ### Example  ```jsx partial=\\\"options\\\" isHidden const optionsNumber = [     { label: 'One', value: 1 },     { label: 'Two', value: 2 },     { label: 'Three', value: 3 },     { label: 'Four', value: 4 },     { label: 'Five', value: 5 },     { label: 'Six', value: 6 },     { label: 'Seven', value: 7 },     { label: 'Disabled', value: 8, disabled: true }, ];  const optionsString = [     { label: 'One', value: 'one' },     { label: 'Two', value: 'two' },     { label: 'Three', value: 'three' },     { label: 'Four', value: 'four' },     { label: 'Five', value: 'five' }, ];  const optionsBoolean = [     { label: 'True', value: true },     { label: 'False', value: false }, ]; ```  ```jsx name=\\\"Base Example\\\" withPartials=\\\"options\\\" const [value, setValue] = React.useState(null); return <Select options={optionsNumber} value={value} onChange={setValue} />; ```  ## Usage  ### Dos & Don’ts  -   **Do**                          combine verbs and nouns to create clear, actionable placeholder text (“Select” usually is the best verb). Use sentence case for placeholder text, without a trailing ellipsis. -   **Don’t**                          use articles like “a” or “the” in placeholder text. Don’t use a trailing ellipsis. -   **Do**               <Image             src={[DosAndDontsExample_2A_Light, DosAndDontsExample_2A_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, and its text and logo have been changed to white, making for high reading contrast. \\\"         />           use the reversed/knockout version of logos, icons, and text when a menu option is selected. (This happens automatically for text unless you’re using the custom `optionRenderer`.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e5b3c733-2e3b-42e3-a0c7-ba102f049d26":{"__data__":"{\"id_\":\"e5b3c733-2e3b-42e3-a0c7-ba102f049d26\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Select_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA=\"},\"PREVIOUS\":{\"nodeId\":\"6a325474-ca38-48a5-bed5-2b6e72259b0f\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"vpgnUnWtzxlzNMMeKsH4v/CNalnrTMQa67xZhp0ahMU=\"},\"NEXT\":{\"nodeId\":\"a10ce6dc-e0af-487a-8457-8944a6a21825\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"Nth/PrMAMmLCkU4BIfIau4GCVD8w+ar8r6Vdb05Dy+U=\"}},\"hash\":\"XZznYbcGjQZbpW342TGF7C4vRxHmdbf6zO/bljtwY5I=\",\"text\":\"(This happens automatically for text unless you’re using the custom `optionRenderer`. )  -   **Don’t**               <Image             src={[DosAndDontsExample_2B_Light, DosAndDontsExample_2B_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, but its text remains gray and its logo hasn’t changed, making for low reading contrast. \\\"         />           allow the base version of logos, icons, and text to persist when a menu option is selected. (Note that this is much more noticeable in the light theme, where base text is dark gray and base logos are colored. )  -   **Don’t**               <Image             src={[DosAndDontsExample_3_Light, DosAndDontsExample_3_Dark]}             width={161}             alt=\\\"A closed Select control with a red border and a circled red exclamation point icon in the top right corner, indicating that the selected option, named “Bad Selection,” is not valid. \\\"         />           use visual validation. We don’t want to give users the opportunity to a choose an invalid option in the first place, which is a poor user experience. Because of that, Select doesn’t support the same validation display options as other form elements. -   **Do**      limit placeholder text and menu options to a single line whenever possible. ## Variants  ### Sizes  There are 4 supported sizes. ```jsx withPartials=\\\"options\\\" isList const [value, setValue] = React.useState({ label: 'One', value: 1 }); const baseProps = {     value,     options: optionsNumber,     onChange: setValue, }; return (     <>         <Select {...baseProps} size=\\\"xs\\\" placeholder=\\\"Extra Small Select\\\" />         <Select {...baseProps} size=\\\"sm\\\" placeholder=\\\"Small Select\\\" />         <Select {...baseProps} size=\\\"md\\\" placeholder=\\\"Medium Select\\\" />         <Select {...baseProps} size=\\\"lg\\\" placeholder=\\\"Large Select\\\" />     </> ); ```  ### On Change  The `onChange` prop determines what happens when the selected `value` changes. Most often, it is a useState hook. ```jsx name=\\\"Value types\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [valueNumber, setValueNumber] = React.useState(null); const [valueString, setValueString] = React.useState(null); return (     <>         <Select             options={optionsNumber}             onChange={(value) => window.alert(JSON.stringify(value))}             value={valueNumber}             placeholder=\\\"onChange triggers an alert\\\"         />         <Select             options={optionsString}             onChange={setValueString}             value={valueString}             placeholder=\\\"onChange updates the selected value\\\"         />     </> ); ```  ### Values  There are 4 supported value types. It can either be boolean, number, null or string.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a10ce6dc-e0af-487a-8457-8944a6a21825":{"__data__":"{\"id_\":\"a10ce6dc-e0af-487a-8457-8944a6a21825\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Select_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA=\"},\"PREVIOUS\":{\"nodeId\":\"e5b3c733-2e3b-42e3-a0c7-ba102f049d26\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"XZznYbcGjQZbpW342TGF7C4vRxHmdbf6zO/bljtwY5I=\"},\"NEXT\":{\"nodeId\":\"2fb7972f-e0d3-4e33-b992-372952df59d5\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"BJ1xytzKSWYTPeU2ARpO8E6Y8JmrW+giagFDXNm7LtA=\"}},\"hash\":\"Nth/PrMAMmLCkU4BIfIau4GCVD8w+ar8r6Vdb05Dy+U=\",\"text\":\"It can either be boolean, number, null or string. ```jsx name=\\\"Value types\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [valueNumber, setValueNumber] = React.useState(null); const [valueString, setValueString] = React.useState(null); const [valueBool, setValueBool] = React.useState(null); return (     <>         <Select             options={optionsNumber}             onChange={setValueNumber}             value={valueNumber}             placeholder=\\\"Number values\\\"         />         <Select             options={optionsString}             onChange={setValueString}             value={valueString}             placeholder=\\\"String values\\\"         />         <Select             options={optionsBoolean}             onChange={setValueBool}             value={valueBool}             placeholder=\\\"Boolean values\\\"         />         <Select             options={optionsNumber}             onChange={setValueNumber}             value={null}             placeholder=\\\"Null value\\\"         />     </> ); ```  ### Multiple values  ```jsx name=\\\"Multiple values\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [values, setValues] = React.useState(null); const [clearableValues, setClearableValues] = React.useState(null); const commonProps = {     options: optionsNumber,     multi: true,     size: 'md', }; return (     <>         <Select             {...commonProps}             placeholder=\\\"Select multiple values\\\"             value={values}             onChange={setValues}         />         <Select             {...commonProps}             placeholder=\\\"Select multiple values and clear them\\\"             value={clearableValues}             onChange={setClearableValues}             clearable         />         <Select             {...commonProps}             placeholder=\\\"Not multiline\\\"             isMultiLine={false}             value={clearableValues}             onChange={setClearableValues}             clearable         />     </> ); ```  ### Options  The prop `options` is an array of items, that all have a `label` that is a string and a `value`. They can also have extra attributes such as `icon` or `word`, in which case they need a `customRenderer` or a `menuRenderer`, as shown in the `customRenderer` and `menuRenderer` sections below. ```jsx name=\\\"Option types\\\" withPartials=\\\"options\\\" isVerticalList width=\\\"300\\\" const [valueNumber, setValueNumber] = React.useState(null); const [valueString, setValueString] = React.useState(null); const [valueBool, setValueBool] = React.useState(null);  return (     <>         <Select             options={optionsNumber}             onChange={setValueNumber}             value={valueNumber}             placeholder=\\\"Number options\\\"         />         <Select             options={optionsString}             onChange={setValueString}             value={valueString}             placeholder=\\\"String options\\\"         />         <Select             options={optionsBoolean}             onChange={setValueBool}             value={valueBool}             placeholder=\\\"Boolean options\\\"         />     </> ); ```  ### Clearable  Use the `clearable` prop to include a button that clears the selected value(s) when clicked. In case of regular selects, `null` will be given back when the “clear” button is clicked. And `[]` will used for `multi` selects. ```jsx withPartials=\\\"options\\\" isVerticalList const [value, setValue] = React.useState(null); const [values, setValues] = React.useState([]);  return (     <>         <Select             options={optionsNumber}             value={value}             onChange={setValue}             clearable         />         <Select             placeholder=\\\"Select multiple values\\\"             multi             options={optionsNumber}             value={values}             onChange={setValues}             clearable         />     </> ); ```  ### Width  A normal Select’s width is determined by the width of its selected option(s). But an `isFullWidth` Select will fill its container horizontally. ```jsx name=\\\"Full width\\\" withPartials=\\\"options\\\" width=\\\"400\\\" const [value, setValue] = React.useState(null); return (     <Select         isFullWidth         options={optionsNumber}         value={value}         onChange={setValue}     /> ); ```  ### Async  ```jsx static import { AsyncSelect } from '@druids/ui/form/Select'; ```  Use this version of Select when you can’t move all the menu options to the frontend and need to use type ahead search. For example: a metric tag selector, where a single org could have 1 million tags. Use the `loadOptions` prop to fetch the options automatically after every keystroke and when the component is mounted.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2fb7972f-e0d3-4e33-b992-372952df59d5":{"__data__":"{\"id_\":\"2fb7972f-e0d3-4e33-b992-372952df59d5\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Select_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA=\"},\"PREVIOUS\":{\"nodeId\":\"a10ce6dc-e0af-487a-8457-8944a6a21825\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"Nth/PrMAMmLCkU4BIfIau4GCVD8w+ar8r6Vdb05Dy+U=\"},\"NEXT\":{\"nodeId\":\"86140811-e54c-4c84-8a8f-556154e11bf1\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jJlC4TZfZTJcydyW1Qpj8cWVLi9TdFH/ggd2T6OgRvw=\"}},\"hash\":\"BJ1xytzKSWYTPeU2ARpO8E6Y8JmrW+giagFDXNm7LtA=\",\"text\":\"```jsx partial=\\\"loadOptions\\\" isHidden const loadOptions = (input) => {     // mocking an API call     return new Promise((resolve) => {         const options = [             { label: 'One', value: 1 },             { label: 'Two', value: 2 },             { label: 'Three', value: 3, disabled: true },             // And so on... ];         setTimeout(() => {             resolve({                 options: options.filter((option) =>                     option.label.includes(input),                 ),                 complete: true,             });         }, 2000);     }); }; ```  ```jsx name=\\\"Async\\\" withPartials=\\\"loadOptions\\\" const [value, setValue] = React.useState(null); const [values, setValues] = React.useState(null); const [key, setKey] = React.useState(0); return (     <>         <Group>             <Field                 type=\\\"group\\\"                 label=\\\"Async\\\"                 input={                     <AsyncSelect                         key={key}                         value={value}                         async                         loadOptions={loadOptions}                         onChange={setValue}                     />                 }             />             <Button                 onClick={() => {                     setKey(key + 1);                     setValue(null);                 }}                 label=\\\"Reload\\\"             />         </Group>         <br />         <br />         <Group>             <Field                 type=\\\"group\\\"                 label=\\\"Async + multi\\\"                 input={                     <AsyncSelect                         placeholder=\\\"Async multi clearable select\\\"                         key={key}                         value={values}                         async                         multi                         loadOptions={loadOptions}                         onChange={setValues}                     />                 }             />             <Button                 onClick={() => {                     setKey(key + 1);                     setValue(null);                 }}                 label=\\\"Reload\\\"             />         </Group>     </> ); ```  > **Warning: Important notes** > > -   Do not try to paginate on scroll. It’s not trivial to do, and the output code is very hard to maintain. > -   Every prop available for a standard (non-Async) Select also works for AsyncSelect. ### Creatable  ```jsx static import { CreatableSelect } from '@druids/ui/form/Select'; ```  Use this version of Select when you want the user to be able to select custom-entered tags which are not included in the dropdown options. ```jsx name=\\\"Creatable\\\" withPartials=\\\"options\\\" const [values, setValues] = React.useState(null); return (     <CreatableSelect         multi         options={optionsNumber}         value={values}         onChange={setValues}     /> ); ```  ### Automatic transformation  Even if we recommend you to use the full object for the `options` and `value` when using the select, you can just use raw value and the `Select` component will transform it. ```jsx name=\\\"Creatable\\\" withPartials=\\\"options\\\" isVerticalList const [value, setValue] = React.useState(1); return (     <>         <Text>The value is: {value}</Text>         <Select             options={[1, 2, 3, 4, 5, 6, 7, 8]}             value={value}             onChange={(newValue) => setValue(newValue.value)}         />         <Select             options={optionsNumber}             value={value}             onChange={(newValue) => setValue(newValue.value)}         />     </> ); ```  ### Custom Renderers  ```jsx partial=\\\"customOptions\\\" name=\\\"Custom renderers\\\" isHidden isMemoized const customOptions = [     {         label: 'Dashboard',         value: 'Dashboard',         icon: <DashboardIcon />,     },     {         label: 'Watchdog',         value: 'Watchdog',         icon: <WatchdogIcon />,     },     {         label: 'CI',         value: 'CI',         icon: <CiIcon />,     },     {         label: 'Synthetics',         value: 'Synthetics',         icon: <SyntheticsIcon />,     },     {         label: 'Security',         value: 'Security',         icon: <SecurityPlatformIcon />,     },     {         label: 'Notebook',         value: 'Notebook',         icon: <NotebookIcon />,         disabled: true,     }, ]; ```  If necessary, you can customize how the Select render its components:  #### Value renderer  You can pass up to 2 arguments. The first is the values to be rendered. ```jsx static const valueRenderer = (option: Option, index: number) => React.ReactNode; ```  Use this prop to achieve custom rendering on a value selected, e.g. when adding an icon next to its label.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"86140811-e54c-4c84-8a8f-556154e11bf1":{"__data__":"{\"id_\":\"86140811-e54c-4c84-8a8f-556154e11bf1\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Select_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA=\"},\"PREVIOUS\":{\"nodeId\":\"2fb7972f-e0d3-4e33-b992-372952df59d5\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"BJ1xytzKSWYTPeU2ARpO8E6Y8JmrW+giagFDXNm7LtA=\"},\"NEXT\":{\"nodeId\":\"13530523-499b-405f-862f-2628dbae399a\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"IOvbPOAcj7hhVcchtRO4bgGSqc/f1qgcN+MnOHVkN78=\"}},\"hash\":\"jJlC4TZfZTJcydyW1Qpj8cWVLi9TdFH/ggd2T6OgRvw=\",\"text\":\"when adding an icon next to its label. ```jsx withPartials=\\\"customOptions\\\" name=\\\"Value renderer\\\" const valueRenderer = ({ label, icon }) => {     return (         <Flex isFullWidth>             {icon}             <Text shouldInherit marginLeft=\\\"sm\\\">                 {label}             </Text>         </Flex>     ); };  const [value, setValue] = React.useState(customOptions[0]); return (     <Select         options={customOptions}         value={value}         valueRenderer={valueRenderer}         onChange={setValue}     /> ); ```  #### Option renderer  You can pass up to 4 arguments. The fourth gives you 3 extra props: `isDisabled`, `isFocused`, and `isSelected`. ```jsx static const optionRenderer = (     option: Option,     index: number,     inputValue: string,     extraProps: {         isDisabled: boolean,         isFocused: boolean,         isSelected: boolean,     }, ) => React.ReactNode; ```  Use this prop to achieve custom options rendering, e.g. when adding icons next to each label. You can also use its extra props:  -   `isSelected` when you want to customize the option the user already picked, e.g. adding a check mark on selection. -   `isFocused` when you want to change the behavior of an option on hover, e.g. displaying text on item hovered. -   `isDisabled` when you want to change the behavior of a disabled option, e.g. converting labels to uppercase on the disabled ones. > You can pass the same function to the props `optionRenderer` and `valueRenderer`. ```jsx withPartials=\\\"customOptions\\\" name=\\\"Option renderer\\\" const optionRenderer = (     { label, icon },     index,     inputValue,     { isSelected, isFocused, isDisabled } = {}, ) => {     return (         <Flex isFullWidth justify=\\\"space-between\\\">             <Flex alignItems=\\\"center\\\">                 {icon}                 <Text shouldInherit marginLeft=\\\"sm\\\">                     {label}                     {isFocused ? (                         <Text shouldInherit size=\\\"sm\\\" marginLeft=\\\"sm\\\">                             -click me-                         </Text>                     ) : null}                 </Text>             </Flex>             {isSelected ? <CheckIcon /> : null}         </Flex>     ); };  const [value, setValue] = React.useState(customOptions[0]); return (     <Select         options={customOptions}         value={value}         optionRenderer={optionRenderer}         valueRenderer={optionRenderer}         onChange={setValue}     /> ); ```  ### MenuRenderer  ```jsx name=\\\"Menu Renderer\\\" const options = [     { label: 'French', value: 1, word: 'Bonjour' },     { label: 'English', value: 2, word: 'Hello' },     { label: 'Chinese', value: 3, word: '你好' },     { label: 'Korean', value: 4, word: '안녕하세요' },     { label: 'Japanese', value: 5, word: 'こんにちは' }, ];  const [value, setValue] = React.useState(1);  return (     <Select         minWidth=\\\"200px\\\"         options={options}         value={value}         onChange={setValue}         menuRenderer={(menuProps) => {             return (                 <Flex alignItems=\\\"stretch\\\">                     <FlexItem style={{ width: 200 }}>                         {defaultMenuRenderer(menuProps)}                     </FlexItem>                     <FlexItem style={{ width: 300 }} justify=\\\"center\\\">                         <Spacing as=\\\"div\\\" padding=\\\"md\\\">                             <Text as=\\\"div\\\" marginBottom=\\\"md\\\">                                 Language:{' '}                                 <Text weight=\\\"bold\\\">                                     {menuProps.focusedOption.label}                                 </Text>                             </Text>                             <Text as=\\\"div\\\">                                 This is how we say \\\"hello\\\" in                                 <Text weight=\\\"bold\\\">                                     {menuProps.focusedOption.label}                                 </Text>:                             </Text>                             <Text as=\\\"div\\\">{menuProps.focusedOption.word}</Text>                         </Spacing>                     </FlexItem>                 </Flex>             );         }}     /> ); ```  ### Option groups  You can use the `makeOptionGroup()` helper to group the dropdown options into sections.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"13530523-499b-405f-862f-2628dbae399a":{"__data__":"{\"id_\":\"13530523-499b-405f-862f-2628dbae399a\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Select_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jI5fCE0PdJbEOGhvuRQOD8sugaxeXgzgOXS+vWSNOjA=\"},\"PREVIOUS\":{\"nodeId\":\"86140811-e54c-4c84-8a8f-556154e11bf1\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/Select\",\"title\":\"Select\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/Select/select.mdx\"},\"hash\":\"jJlC4TZfZTJcydyW1Qpj8cWVLi9TdFH/ggd2T6OgRvw=\"}},\"hash\":\"IOvbPOAcj7hhVcchtRO4bgGSqc/f1qgcN+MnOHVkN78=\",\"text\":\"```jsx name=\\\"Make Option Group\\\" const options = [     makeOptionGroup({ label: 'France' }),     { label: 'Paris', value: 'paris' },     { label: 'Lyon', value: 'lyon' },     { label: 'Marseille', value: 'marseille' },     makeOptionGroup({ label: 'United States' }),     { label: 'New York', value: 'newYork' },     { label: 'Los Angeles', value: 'losAngeles' },     { label: 'Chicago', value: 'chicago' }, ];  const [value, setValue] = React.useState(null);  return (     <Select         options={options}         value={value}         onChange={setValue}         placeholder=\\\"Select city\\\"     /> ); ```  {/* @if IS_PRIVATE */}  ## Interacting with `` in tests  ### Making &lt;Select&gt; testable  The `select()` helper relies on the `aria-label` attribute to identify various DOM elements that the `` component renders. Provide your `` with a descriptive and specific `label` prop, which you can then use in your tests to locate it:  ```tsx return <Select options={options} onChange={onChange} label=\\\"My Select\\\" />; ```  ### Getting a handle to a &lt;Select&gt;  The `select()` function returns an object that you can use to query and manipulate a Select. To call it, just pass in the same label that you provided to the component’s `label` prop:  ```ts const mySelect = select('My Select'); ```  Note that calling `select()` doesn’t actually _do_ anything; in particular, it doesn’t query the DOM looking for the Select. So, you shouldn’t expect `select()` itself to throw an error or cause the test to fail. The utility will start interacting with the DOM **only** when you call one of its methods to manipulate or query the Select. ### Selecting an option  The most common thing you’ll need to do with a `` is to select an option. Use the `selectOption()` method to do this:  ```ts const mySelect = select('My Select'); await mySelect.selectOption('First Option'); ```  The string that you pass to `selectOption()` should be the user-facing option value, i.e. the `label` property of the option object. #### Working with &lt;AsyncSelect&gt;  `selectOption()` should work fine with ``, _as long as the option you’re trying to select is in the initial `loadOptions` response_. `selectOption()` doesn’t support the workflow of typing an option name into the Select, waiting for the response, then clicking the option. If you need support for that workflow, post a message in #frontend-testing on Slack. #### Deselecting an option  If you need to deselect a selected option in a multi-select, use the `deselectOption()` method:  ```ts const mySelect = select('My Select'); await mySelect.deselectOption('A Selected Option'); ```  As usual, the string passed to `deselectOption()` should be the user-facing option value. #### Clearing all selected options  To clear all selected options in a clearable select, use the `clear()` method:  ```ts const mySelect = select('My Select'); await mySelect.clear(); ```  > **Warning** > This only works for Selects with the `clearable` prop turned on. If you try to `clear()` a non-clearable Select, this method will throw an error. ## Checking if an option is selected  To check if a given option value is selected, use `isSelected()`:  ```ts const mySelect = select('My Select'); expect(mySelect.isSelected('A Selected Option')).toBe(true); ```  ### Checking for the existence of an option  To check if a Select has a certain option, use `hasOption()`:  ```ts const mySelect = select('My Select'); expect(await mySelect.hasOption('Preferred Option')).toBe(true); ```  Note that `hasOption()` will open the Select’s dropdown, if it’s not already open. After checking if the option is present, the dropdown will be left in the same state that it started in. {/* @endif */}\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fca08a53-b863-4f3b-9638-b37027d87ff7":{"__data__":"{\"id_\":\"fca08a53-b863-4f3b-9638-b37027d87ff7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleButtons\",\"title\":\"ToggleButtons\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleButtons/toggle-buttons.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ToggleButtons_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleButtons\",\"title\":\"ToggleButtons\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleButtons/toggle-buttons.mdx\"},\"hash\":\"O5/5sA8cTi/96GgNl10rNvaPbch7AnlYnVKchO5T7j8=\"},\"NEXT\":{\"nodeId\":\"09aa3920-ad88-42a3-a2ea-df0086582cb8\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleButtons\",\"title\":\"ToggleButtons\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleButtons/toggle-buttons.mdx\"},\"hash\":\"df9xRchR8ZK+6/pWO3GsP5NfIpw4mTiLzm5f1WvyjrA=\"}},\"hash\":\"Ke4ihb3rT/vuQF3+D3WwHxSSdCXjtVXJa/URHtAkhKw=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { ToggleButtons } from '@druids/ui/form/ToggleButtons'; import { GlobeIcon } from '@druids/ui/icons/Globe'; import { DatabaseIcon } from '@druids/ui/icons/Database'; import { CacheIcon } from '@druids/ui/icons/Cache'; import { CogMultiIcon } from '@druids/ui/icons/CogMulti'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators';       <ToggleButtons         canBeEmpty         options={[             { label: 'Web', value: 'web', icon: GlobeIcon },             { label: 'DB', value: 'db', icon: DatabaseIcon },             { label: 'Cache', value: 'cache', icon: CacheIcon },         ]}         value=\\\"1\\\"         size=\\\"lg\\\"     />   ToggleButtons combine multiple buttons in a lockup where they behave like radio buttons. It automatically groups the buttons and applies the appropriate styling for the selected option. ToggleButtons accepts an `options` prop with an array of options:  ```jsx partial=\\\"options\\\" const options = [     { label: 'Web', value: 'web', icon: GlobeIcon },     { label: 'DB', value: 'db', icon: DatabaseIcon },     { label: 'Cache', value: 'cache', icon: CacheIcon },     {         label: 'Custom',         value: 'custom',         icon: CogMultiIcon,         featureStatus: 'beta',     }, ]; ```  ### Example  ```jsx withPartials=\\\"options\\\" name=\\\"Example\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}     /> ); ```  ## Usage  ### Dos & Don’ts  -   **Do**      use ToggleButtons for showing different representations of the same content (or subsets of it, like the inclusion or exclusion of certain data). -   **Don’t**      use ToggleButtons for switching between alternative content — i.e., different information altogether. Instead use another approach, often a ``, ``, or custom tabs constructed with ``. -   **Do**      use the `isSoft` variant when another set of ToggleButtons (or a primary ``) is the main focus of interaction. -   **Don’t**      use the separate `` component to control the visibility of content. SoftToggle should be used only in a dedicated _editing_ context, like a config or creation form. ## Variants  ### Strength  Use the `isSoft` prop when ToggleButtons need a more subdued appearance. It’s for situations where another set of ToggleButtons (or a primary ``) is the main focus of interaction on the page. > **Warning** > This is not to be confused with the `` component. See Dos & Don’ts above for more. ```jsx withPartials=\\\"options\\\" name=\\\"Strength\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         isSoft         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}     /> ); ```  ### Multi-select  `isMultiSelect` ToggleButtons always have an `isSoft` appearance to prevent overwhelming floods of color when multiple options are selected. ```jsx withPartials=\\\"options\\\" name=\\\"Multi select\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         isMultiSelect={true}         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}     /> ); ```  ### Full Width  We can make the buttons take the full available width by a `isFullWidth` prop. ```jsx withPartials=\\\"options\\\" name=\\\"Example\\\" isFullWidth const [value, setValue] = React.useState('web'); return (     <ToggleButtons         options={options}         value={value}         onChange={(value) => setValue(value)}         isFullWidth     /> ); ```  ### Select All button  Use the `hasSelectAllButton` prop to provide an easier ability to toggle all options at once (when there’s enough horizontal space).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"09aa3920-ad88-42a3-a2ea-df0086582cb8":{"__data__":"{\"id_\":\"09aa3920-ad88-42a3-a2ea-df0086582cb8\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleButtons\",\"title\":\"ToggleButtons\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleButtons/toggle-buttons.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ToggleButtons_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleButtons\",\"title\":\"ToggleButtons\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleButtons/toggle-buttons.mdx\"},\"hash\":\"O5/5sA8cTi/96GgNl10rNvaPbch7AnlYnVKchO5T7j8=\"},\"PREVIOUS\":{\"nodeId\":\"fca08a53-b863-4f3b-9638-b37027d87ff7\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleButtons\",\"title\":\"ToggleButtons\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleButtons/toggle-buttons.mdx\"},\"hash\":\"Ke4ihb3rT/vuQF3+D3WwHxSSdCXjtVXJa/URHtAkhKw=\"}},\"hash\":\"df9xRchR8ZK+6/pWO3GsP5NfIpw4mTiLzm5f1WvyjrA=\",\"text\":\"This inserts an “All” button at the beginning of the group:  ```jsx withPartials=\\\"options\\\" name=\\\"Select all button\\\" const [value, setValue] = React.useState('web'); return (     <ToggleButtons         isMultiSelect={true}         canBeEmpty={true}         options={options}         value={value}         onChange={(value) => setValue(value)}         hasSelectAllButton     /> ); ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7131059c-35b4-487b-80e0-bbcaf785280b":{"__data__":"{\"id_\":\"7131059c-35b4-487b-80e0-bbcaf785280b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleSwitch\",\"title\":\"ToggleSwitch\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleSwitch/toggle-switch.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ToggleSwitch_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/form/ToggleSwitch\",\"title\":\"ToggleSwitch\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/form/ToggleSwitch/toggle-switch.mdx\"},\"hash\":\"+bmIc1vs9KsAquSU5wt9U1S4VhPCmS5KIF/72rriU+E=\"}},\"hash\":\"k2JFx0+W9D7+mBaHqDWLKGIFr4Wo24AXEf6HpwMln6o=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { InputSearch } from '@druids/ui/form/InputSearch'; import { ToggleSwitch } from '@druids/ui/form/ToggleSwitch'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { Text } from '@druids/ui/typography/Text'; import { Title } from '@druids/ui/typography/Title';          ### Example  ```jsx partial=\\\"setup\\\" isHidden const [isChecked, setIsChecked] = React.useState(true); ```  ```jsx permutations=\\\"size\\\" withPartials=\\\"setup\\\" <ToggleSwitch     isChecked={isChecked}     onChange={() => setIsChecked(!isChecked)}     {...useKnobs([         'size',         'isDisabled',         {             label: {                 fallback: ({ size }) =>                     `${                         {                             xs: 'Extra Small',                             sm: 'Small',                             md: 'Medium',                             lg: 'Large',                         }[size]                     } Toggle`,             },         },     ])} /> ```  > **Danger: Avoid adding labels to describe the current state of a ToggleSwitch** > A ToggleSwitch is either on or off. Providing a label that describes the current state is redundant and clutters the interface. ## Variants  ### Inline Centering  Sometimes we might want to have a ToggleSwitch inline with some text, for example when using with ``, for proper alignment we can use a `hasInlineCentering` prop. ```jsx withPartials=\\\"setup\\\" name=\\\"Inline Centering\\\" <>     Here is a toggle:     <ToggleSwitch         isChecked={isChecked}         onChange={() => setIsChecked(!isChecked)}         hasInlineCentering         marginLeft=\\\"sm\\\"     /> </> ```  ## Usage  ### Dos & Don’ts  -   **Do**                                         Enable data collection                    combine verbs and nouns to create clear, actionable labels. -   **Don’t**                                                          Turn on data collection for this feature. use verbose labels with excessive text or full sentences. -   **Do**                                         Show only complete days                    use affirmative verbs for labels. -   **Don’t**                                         Hide incomplete days                    use negative verbs for labels, which force users to make sense of a negative-positive construction. -   **Do**                                             Application Keys                                                                         Only my keys                                 omit the verb from the label when it’s unnecessary given the context. -   **Do**                                                          Show widget title                                 allow labels to wrap to multiple lines when necessary. -   **Don’t**                                                          Show widget title                                 truncate labels with ellipses unless you absolutely can’t avoid it.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f8728be8-cbdf-4ecf-9282-e9d334ad6aa2":{"__data__":"{\"id_\":\"f8728be8-cbdf-4ecf-9282-e9d334ad6aa2\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Accordion\",\"title\":\"Accordion\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Accordion/accordion.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Accordion_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Accordion\",\"title\":\"Accordion\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Accordion/accordion.mdx\"},\"hash\":\"BGUC0j6qFS5ENMbhoaWodkU//oApuLqKbWnqV1SJ7/A=\"},\"NEXT\":{\"nodeId\":\"9ead765f-d722-4c0c-b304-cd97040c05a6\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Accordion\",\"title\":\"Accordion\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Accordion/accordion.mdx\"},\"hash\":\"ADttg/6Xahs/P5S6rGtwcuBn1qbL7+G5Vv4sBKB35BM=\"}},\"hash\":\"rmVzVDH8WSU6GZ7yf1WjZ6P2m50xDDcTvFBjdmDNB/o=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Accordion } from '@druids/ui/layout/Accordion'; import { Panel } from '@druids/ui/layout/Panel'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Spacing } from '@druids/ui/layout/Spacing'; import { BellIcon } from '@druids/ui/icons/Bell'; import { AttentionIcon } from '@druids/ui/icons/Attention'; import { WatchdogIcon } from '@druids/ui/icons/Watchdog'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { AccordionSkeleton } from '@druids/ui/layout/Accordion/AccordionSkeleton'; import { BooksIcon } from '@druids/ui/icons/Books';                                              Accordion Content                              ### Example  ```jsx name=\\\"Example\\\" <Panel padding=\\\"none\\\">     <Accordion         title=\\\"Here is Yet Another Title\\\"         isOpenByDefault         hasTopBorder={false}         hasBottomBorder={false}     >         <Spacing as=\\\"div\\\" padding=\\\"md\\\">             When an Accordion is directly inside an element that already has a             top and/or bottom border, set the{' '}             <InlineCode>hasTopBorder</InlineCode> and/or{' '}             <InlineCode>hasBottomBorder</InlineCode> props to{' '}             <InlineCode>false</InlineCode> to avoid rendering double borders. </Spacing>     </Accordion> </Panel> ```  Accordion is based on the `` component. ## Variants  ### Sizes  ```jsx name=\\\"Sizes\\\" <Accordion size=\\\"md\\\" title=\\\"Medium Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Medium Accordion</Spacing> </Accordion> <Accordion size=\\\"lg\\\" title=\\\"Large Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Large Accordion</Spacing> </Accordion> <Accordion title=\\\"Default (XL) Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Default (XL) Accordion</Spacing> </Accordion> <Accordion title=\\\"Here is Some Other Title\\\" isOpenByDefault>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Here is some other content. You’re responsible for handling the         padding of what you put inside an Accordion (here, we're using a         Panel component with no border). </Spacing> </Accordion> ```  ### Additional content  Add content to the right side of the header by passing a `ReactNode` to the `headerAdditionalContent` prop. ```jsx name=\\\"Additional content\\\" <Accordion     title=\\\"Foo Accordion Title\\\"     isOpenByDefault     headerAdditionalContent={<>👋</>} >     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Tincidunt ante augue pulvinar justo curae congue fusce condimentum, elit         ullamcorper sociosqu iaculis cras metus mauris senectus in, sit semper         dictum enim aptent conubia porta. Senectus in interdum conubia euismod         vel dictum sodales lobortis torquent proin, auctor sit ridiculus aptent         nisl dapibus nec phasellus mollis, primis ornare taciti nascetur         hendrerit risus augue eros luctus. Massa habitant lacus habitasse arcu         donec ante hac sed, faucibus volutpat id elementum turpis tortor         pretium. Posuere porttitor adipiscing. </Spacing> </Accordion> ```  ### Landmarks and nesting  Use Accordions as linkable landmarks by adding `id`. Click these anchor links to jump to the corresponding Accordions: Jump to Foo / Jump to Bar / Jump to Baz (nested inside Bar)  Adding an `id` also adds a `` to the Accordion header.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9ead765f-d722-4c0c-b304-cd97040c05a6":{"__data__":"{\"id_\":\"9ead765f-d722-4c0c-b304-cd97040c05a6\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Accordion\",\"title\":\"Accordion\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Accordion/accordion.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Accordion_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Accordion\",\"title\":\"Accordion\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Accordion/accordion.mdx\"},\"hash\":\"BGUC0j6qFS5ENMbhoaWodkU//oApuLqKbWnqV1SJ7/A=\"},\"PREVIOUS\":{\"nodeId\":\"f8728be8-cbdf-4ecf-9282-e9d334ad6aa2\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Accordion\",\"title\":\"Accordion\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Accordion/accordion.mdx\"},\"hash\":\"rmVzVDH8WSU6GZ7yf1WjZ6P2m50xDDcTvFBjdmDNB/o=\"}},\"hash\":\"ADttg/6Xahs/P5S6rGtwcuBn1qbL7+G5Vv4sBKB35BM=\",\"text\":\"```jsx name=\\\"Landmarks and nesting\\\" <Accordion id=\\\"Foo-Accordion\\\" title=\\\"Foo Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Foo Accordion content</Spacing> </Accordion>  <Accordion id=\\\"Bar-Accordion\\\" title=\\\"Bar Accordion Title\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Bar Accordion content</Spacing>     <Accordion id=\\\"Baz-Accordion\\\" title=\\\"Baz Accordion Title\\\">         <Spacing as=\\\"div\\\" padding=\\\"md\\\">Baz Accordion content</Spacing>     </Accordion> </Accordion> ```  ### Caret position  It is possible to change the caret icon position via an `iconPosition` prop:  ```jsx name=\\\"Icon Position\\\" <Accordion     title=\\\"Accordion Title\\\"     iconPosition={useKnob('iconPosition', 'end')} >     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> ```  ### Title icon  Use the `titleIcon` prop to add any Icon to the left of the title. This forces the caret to the end. ```jsx name=\\\"Title Icon\\\" <Accordion title=\\\"Notifications\\\" titleIcon={BellIcon}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> <Accordion title=\\\"Alert\\\" titleIcon={AttentionIcon}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> ```  ### Title badge  Use the `badgeProps` prop to add a `` to the right of the title. This is compatible with a `titleIcon`. ```jsx name=\\\"Badge\\\" <Accordion title=\\\"Notifications\\\" titleIcon={BellIcon} badgeProps={{label:'3'}}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> <Accordion title=\\\"Alert\\\" badgeProps={{label:'3'}} iconPosition=\\\"end\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> <Accordion title=\\\"Alert\\\" badgeProps={{label:'3', backgroundColor: 'var(--ui-interaction-callout)', icon: WatchdogIcon}}>     <Spacing as=\\\"div\\\" padding=\\\"md\\\">         Some content     </Spacing> </Accordion> ```  ### Animated content  The `` comes out of the box with an animated solution thanks to the prop `hasAnimatedHeight` (this uses under the hood the ``). But there are multiple things to keep in mind:  -   this can create performance issues (as it’s animating the `height`), -   for performance reasons, the width of the children of the According won’t be able to impact the Accordion itself.\\\\     So you **need to set it yourself**. ```jsx name=\\\"Sizes\\\" width=\\\"500px\\\" <Accordion hasAnimatedHeight size=\\\"lg\\\" title=\\\"1st Accordion\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Some content, that can be long, or short. It's up to you.</Spacing> </Accordion> <Accordion hasAnimatedHeight size=\\\"lg\\\" title=\\\"2nd Accordion\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Some content, that can be long, or short. It's up to you.</Spacing> </Accordion> <Accordion hasAnimatedHeight size=\\\"lg\\\" title=\\\"3rd Accordion\\\">     <Spacing as=\\\"div\\\" padding=\\\"md\\\">Some content, that can be long, or short. It's up to you.</Spacing> </Accordion> ```  ## AccordionSkeleton  `` provides a skeleton for an accordion section. It has a simple collapse/expand functionality that will render a header with arrow and a conditionally displayed body. ```jsx name=\\\"Example\\\" <AccordionSkeleton title=\\\"Accordion\\\">     <Panel>Body content</Panel> </AccordionSkeleton> ```  ## Header content  Choose custom header content to place to the right of the title  ```jsx name=\\\"HeaderContent\\\" <AccordionSkeleton     title=\\\"See more books\\\"     headerAdditionalContent={<BooksIcon marginLeft=\\\"md\\\" />} >     <Panel>Books</Panel> </AccordionSkeleton> ```  ## Variants  ### Sizes  The accordion uses the standard T-shirt sizes  ```jsx name=\\\"Sizes\\\" isList <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xxs\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xs\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"sm\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"md\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"lg\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xl\\\"/> <AccordionSkeleton title=\\\"Accordion\\\" size=\\\"xxl\\\"/> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"88d50db3-44e3-4a4b-b95e-561edaee4c15":{"__data__":"{\"id_\":\"88d50db3-44e3-4a4b-b95e-561edaee4c15\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Flex\",\"title\":\"Flex\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Flex/flex.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Flex_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Flex\",\"title\":\"Flex\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Flex/flex.mdx\"},\"hash\":\"k4TQqhmwe+fRFMnMmJQVdBqeZOko/ktRi6AUjWpj/9s=\"},\"NEXT\":{\"nodeId\":\"633beb0d-74c7-4cab-8265-00b2a5092733\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Flex\",\"title\":\"Flex\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Flex/flex.mdx\"},\"hash\":\"b9d0hbAfj/sYgQ7SRmBnSKRH4RdzlYGMaJw/JFDZxK4=\"}},\"hash\":\"emRv+7Op0AJVij7fcWbbvf8y7nHf2F/hXw/29kpq6AQ=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Code } from '@druids/ui/typography/Code'; import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text'; import { ExampleImage } from '@druids/ui/internals/ExampleImage';  ### Example  export const gapValues = [undefined, 0, 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'];  ```jsx partial=\\\"complexContent\\\" isHidden const content = (     <>         <Panel>             <Text>First element</Text>         </Panel>         <Panel>             <Text>                 Second element Second element                 <br />                 Second element Second element                 <br />                 Second element Second element             </Text>         </Panel>         <ExampleImage height=\\\"100\\\" width=\\\"200\\\" />         <Panel>             <Text>                 Fourth element                 <br />                 Fourth element                 <br />                 Fourth element                 <br />                 Fourth element                 <br />                 Fourth element             </Text>         </Panel>         <img src=\\\"https://imgix.bustle.com/rehost/2016/9/13/df46f351-b39c-49f4-af96-106b791f6de7.jpg?w=200&h=100&fit=crop&crop=faces&auto=format&q=100&dpr=2\\\" />     </> ); ```  ```jsx name=\\\"Example\\\" isScrollable withPartials=\\\"complexContent\\\" <Flex     {...useKnobs([         'alignItems',         'justify',         'direction',         'wrap',         { gap: { defaultValue: undefined } },     ])} >     {content} </Flex> ```  ### FlexItem  The Flex component works from the box with any nested components, however in some cases we might want to set some of the CSS flex properties (`flex-shrink`, `flex-grow` etc. ) on the children — for this we have a `` component:  ```jsx name=\\\"FlexItem\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow as={<Panel variant=\\\"secondary\\\" />}>         <Text>This takes the rest</Text>     </FlexItem>     <FlexItem shrink as={Panel}>         <Text>This can shrink when there is not enough space</Text>     </FlexItem> </Flex> ```  ### Nested Flex components  In most cases there is no need to have nested Flex components. If you see a place like ``, it could probably be refactored using `` for the children, or by using a `` component for more complex layouts, or, in more simple cases, just by using `` or other more semantic elements or components. Having big nested Flex structures can be bad for performance and maintainability, so think twice about what needs to be achieved when you see it in practice. ## Variants  ### Basic Props  See the first example to see how props like `alignItems`, `justify`, `direction` `wrap` affect the rendering of the Flex' children. ### Gap props  While the CSS property gap for Flex is still not yet supported enough, we have added a more simple implementation of it for our Flex component:  ```jsx partial=\\\"content\\\" isHidden const content = (     <>         <Panel>             <Text>One</Text>         </Panel>         <Panel>             <Text>Two</Text>         </Panel>         <Panel>             <Text>Three</Text>         </Panel>         <Panel>             <Text>Four</Text>         </Panel>         <Panel>             <Text>Five</Text>         </Panel>     </> ); ```  ```jsx name=\\\"Gap\\\" isFullWidth withPartials=\\\"content\\\" <Flex     {...useKnobs([         { gap: { initialValue: 'md', defaultValue: undefined } },         'direction',     ])} >     {content} </Flex> ```  Note how the gap works for both vertical and horizontal layouts.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"633beb0d-74c7-4cab-8265-00b2a5092733":{"__data__":"{\"id_\":\"633beb0d-74c7-4cab-8265-00b2a5092733\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Flex\",\"title\":\"Flex\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Flex/flex.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Flex_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Flex\",\"title\":\"Flex\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Flex/flex.mdx\"},\"hash\":\"k4TQqhmwe+fRFMnMmJQVdBqeZOko/ktRi6AUjWpj/9s=\"},\"PREVIOUS\":{\"nodeId\":\"88d50db3-44e3-4a4b-b95e-561edaee4c15\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Flex\",\"title\":\"Flex\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Flex/flex.mdx\"},\"hash\":\"emRv+7Op0AJVij7fcWbbvf8y7nHf2F/hXw/29kpq6AQ=\"}},\"hash\":\"b9d0hbAfj/sYgQ7SRmBnSKRH4RdzlYGMaJw/JFDZxK4=\",\"text\":\"#### Gaps in wrappable Flex  Unlike a regular Flex, the wrappable one (via a `wrap=\\\"wrap\\\"` prop, for example) would have both vertical and horizontal gaps available, set with `gapX` and `gapY` props (and also with a `gap` that sets both to the same value):  ```jsx name=\\\"WrappableGap\\\" width=\\\"200\\\" withPartials=\\\"content\\\" <Flex     {...useKnobs([         { wrap: 'wrap' },         { gapX: { initialValue: 'md', defaultValue: undefined } },         { gapY: { initialValue: 'md', defaultValue: undefined } },     ])} >     {content} </Flex> ```  **Important note:** due to the implementation details, the wrappable Flex component that have gaps would have negative margins on itself, so we should never use it alongside the `margin` props on it, as the result could be confusing. ### Min-width and max-width  In rare cases there might be a need to have `min-width` (often for setting a `0` value as a workaround for a numerous overflow issues) or `max-width` (often as a `100%` to constrain the content to the parent box) for a Flex component. There are `minWidth` and `maxWidth` props for that:  ```jsx name=\\\"MinMaxWidth\\\" withPartials=\\\"content\\\" <Flex wrap=\\\"wrap\\\" minWidth={0} maxWidth={200}>     {content} </Flex> ```  ### Stretching the items to full width  If we'd want to stretch the items to take the full available width, we can use a `hasStretchedItems` prop. ```jsx name=\\\"hasStretchedItems\\\" isFullWidth withPartials=\\\"content\\\" <Flex     {...useKnobs([         {             hasStretchedItems: true,             gap: { initialValue: 'md', defaultValue: undefined },         },         'wrap',     ])} >     {content}     <FlexItem as={Panel} grow={2} maxWidth={150}>         Six     </FlexItem> </Flex> ```  > Stretching works by adding `flex: 1` to the children, so if we'd want to override it there, or limit how much things could grow, we could use a `` component.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d6572d5b-39fd-484f-a3bb-a06490ad5e1d":{"__data__":"{\"id_\":\"d6572d5b-39fd-484f-a3bb-a06490ad5e1d\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/FlexItem\",\"title\":\"FlexItem\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/FlexItem/flex-item.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"FlexItem_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/FlexItem\",\"title\":\"FlexItem\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/FlexItem/flex-item.mdx\"},\"hash\":\"j8Dv5e7bSbg6JmOmChcuDMQVjBFvVXKU35a9CnxDfrY=\"}},\"hash\":\"hs3JhpJ2NmB9e/sXD0cXujZGW11Rvyrihj2FrfDg5EI=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text';  While `` doesn’t require wrapping its children with any components, some things can be achieved easier by using a FlexItem component, like setting various `flex` properties. ### Example  By default, a FlexItem has `flex-shrink` and `flex-grow` equal to zero, so a basic FlexItem won't shrink by itself. To control these, there are `shrink` and `grow` props, that can be either a number, corresponding with its CSS value, or a boolean, with `true` corresponding with `1`, making it easier to create the common layouts. ```jsx name=\\\"Example\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow as={<Panel variant=\\\"secondary\\\" />}>         <Text>This takes the rest</Text>     </FlexItem>     <FlexItem shrink as={Panel}>         <Text>This can shrink when there is not enough space</Text>     </FlexItem> </Flex> ```  Note how we can use an `as` prop to combine multiple elements on one DOM element, this can often be better than nesting elements like ``, so it is better to use this by default, and fall back to the nesting only for more complex cases. ## Variants  ### Basis and min-width  Sometimes there might be a need to override a `flex-basis`, or set the `min-width` in order for a component to shrink below its `min-content`. For example, if we'd want the last item in the previous example to shrink up to zero, we could use the `minWidth` prop:  ```jsx name=\\\"minWidth\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow as={<Panel variant=\\\"secondary\\\" />}>         <Text>This takes the rest</Text>     </FlexItem>     <FlexItem shrink minWidth={0} as={Panel}>         <Text>This can shrink up to zero when there is not enough space</Text>     </FlexItem> </Flex> ```  The `flex-basis` property has more specific uses, often more dependent on a specific use case. Below is one of such cases:  ```jsx name=\\\"Basis\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem as={Panel}>         <Text>This won't shrink</Text>     </FlexItem>     <FlexItem grow basis={0} as={Panel}>         <Text>             This element would grow to take the rest, but would shrink up to             zero when there would be not enough space. </Text>     </FlexItem> </Flex> ```  Unlike `minWidth`, `basis` would actually work here, as it affects the implicit `min-content` value of the element. ### Alignment  If we'd resize the above example, we would see how elements would align vertically. By default this is controlled by the `alignItems` prop on the parent `` element (and has `center` value by default). In case we'd want to change it only on a specific FlexItem, we can do it via an `align` prop (basically, a shortcut to an `align-self` CSS property):  ```jsx name=\\\"Align\\\" isFullWidth <Flex gap=\\\"md\\\">     <FlexItem         align={useKnob('align', [             'center',             'flex-start',             'flex-end',             'stretch',         ])}         as={Panel}     >         <Text>One line</Text>     </FlexItem>     <FlexItem as={Panel}>         <Text>             Multiple             <br />             lines             <br />             for             <br />             demonstration         </Text>     </FlexItem> </Flex> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7bbb3add-4415-48bb-9928-d54865ed5119":{"__data__":"{\"id_\":\"7bbb3add-4415-48bb-9928-d54865ed5119\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Grid\",\"title\":\"Grid\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Grid/grid.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Grid_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Grid\",\"title\":\"Grid\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Grid/grid.mdx\"},\"hash\":\"ogvdEfjRKEkD3vPJOlGGFNJ28yknpBxb6QthkmGkVGU=\"},\"NEXT\":{\"nodeId\":\"19e8982a-9e11-4d32-8e15-82bfcffa2151\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Grid\",\"title\":\"Grid\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Grid/grid.mdx\"},\"hash\":\"KcIez+rQFGQS312J69rrWJDjuCYeLfcnGS7r/uv56Bw=\"}},\"hash\":\"1vUqkBE2L2L+wGckxOL4SXJ2iCylnBfcAOXPMLMiIaM=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Grid } from '@druids/ui/layout/Grid'; import { GridItem } from '@druids/ui/layout/GridItem'; import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text';  ### Example  ```jsx isFullWidth name=\\\"Example\\\" <Grid columns={1}>     <Grid>         <Panel>             <Text>foo</Text>         </Panel>         <Panel>             <Text>bar</Text>         </Panel>     </Grid>     <Grid>         <Panel>             <Text>foo</Text>         </Panel>         <Panel>             <Text>bar</Text>         </Panel>         <Panel>             <Text>baz</Text>         </Panel>     </Grid>     <Grid>         {Array(9)             .fill()             .map((_, i) => (                 <Panel key={i}>                     <Text>{i}</Text>                 </Panel>             ))}     </Grid> </Grid> ```  ## Variants  ### Fixed columns  ```jsx isFullWidth name=\\\"Fixed columns\\\" <Grid columns={3}>     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Minimum width  Set a `minWidth` on a Grid to display a responsive number of columns. (Resize the example to see it in action. )  ```jsx isFullWidth name=\\\"Minimum width\\\" <Grid minWidth={150}>     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Width  To make the width strict, use the `width` prop instead. ```jsx isFullWidth name=\\\"Width\\\" <Grid width={250}>     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  > The `width` prop doesn’t override the minimum width. The columns will still shrink if not enough space exists. ### Areas  ```jsx isFullWidth name=\\\"Areas\\\" <Grid areas=\\\"a b c\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Gap  ```jsx isFullWidth name=\\\"Gap\\\" <Grid minWidth={100} gap=\\\"xs\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  To define a different gap for each axis, use the `gapX` and `gapY` props instead of `gap`. ```jsx isFullWidth name=\\\"GapXY\\\" <Grid minWidth={100} gapX=\\\"sm\\\" gapY=\\\"xl\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Custom Columns  It is possible to provide a custom string to `columns`, which will be, essentially, a custom `grid-template-columns` value:  ```jsx isFullWidth name=\\\"Custom\\\" <Grid columns=\\\"repeat(auto-fit, minmax(clamp(50% - var(--grid-gap), 200px, 100%), 1fr))\\\">     {Array(9)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  In the above example, we will get a grid with up to two columns, each with a min-width of `200px`, but which could go lower if there is not enough space. Resize the example to see it in action! ### Padding  Use the `padding` prop to define space around a Grid’s exterior.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"19e8982a-9e11-4d32-8e15-82bfcffa2151":{"__data__":"{\"id_\":\"19e8982a-9e11-4d32-8e15-82bfcffa2151\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Grid\",\"title\":\"Grid\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Grid/grid.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Grid_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Grid\",\"title\":\"Grid\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Grid/grid.mdx\"},\"hash\":\"ogvdEfjRKEkD3vPJOlGGFNJ28yknpBxb6QthkmGkVGU=\"},\"PREVIOUS\":{\"nodeId\":\"7bbb3add-4415-48bb-9928-d54865ed5119\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Grid\",\"title\":\"Grid\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Grid/grid.mdx\"},\"hash\":\"1vUqkBE2L2L+wGckxOL4SXJ2iCylnBfcAOXPMLMiIaM=\"}},\"hash\":\"KcIez+rQFGQS312J69rrWJDjuCYeLfcnGS7r/uv56Bw=\",\"text\":\"### Padding  Use the `padding` prop to define space around a Grid’s exterior. ```jsx isFullWidth name=\\\"Padding\\\" <Grid padding=\\\"xl\\\">     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Justify items  Grid items are stretched to their grid cell’s width by default. Use the `justifyItems` prop to change this. ```jsx isFullWidth name=\\\"Justify items\\\" <Grid justifyItems=\\\"center\\\">     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Justify content  Grid content are stretched to their parent by default. Use the `justifyContent` prop to change this. ```jsx isFullWidth name=\\\"Justify Content\\\" <div     style={{         border: '1px solid var(--ui-border)',         padding: '16px',         width: '100%',     }} >     <Grid columns=\\\"repeat(3, 100px)\\\" justifyContent=\\\"center\\\">         {Array(3)             .fill()             .map((_, i) => (                 <div                     key={i}                     style={{                         border: '1px solid var(--ui-border)',                         padding: '16px',                         width: '100px',                     }}                 >                     <Text textAlign=\\\"center\\\">{i}</Text>                 </div>             ))}     </Grid> </div> ```  ### Align content  When the height of the grid container is larger than the height of the rows, rows are stretched to fill the whole grid by default. Use the `alignContent` prop to change this and place items at the `start`, `end`, or `center` without stretching. ```jsx isFullWidth name=\\\"Align content center\\\" <Grid alignContent=\\\"center\\\" style={{ height: 200 }}>     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  When there are multiple rows, `space-between` and `space-evenly` can also be used as values for the `alignContent` prop. ```jsx isFullWidth name=\\\"Align content space between\\\" <Grid alignContent=\\\"space-between\\\" columns={2} style={{ height: 200 }}>     {Array(3)         .fill()         .map((_, i) => (             <Panel key={i}>                 <Text>{i}</Text>             </Panel>         ))} </Grid> ```  ### Auto rows  By default, each row is sized by the largest item it contains. Use the `autoRows` prop to make each row the same size instead. (Resize the example to see it in action. )  ```jsx isFullWidth name=\\\"Auto rows\\\" <Grid columns={2} autoRows>     <Panel>         <Text>foo</Text>     </Panel>     <Panel>         <Text>bar</Text>     </Panel>     <Grid minWidth={100} gap=\\\"sm\\\">         {Array(4)             .fill()             .map((_, i) => (                 <Panel key={i}>                     <Text>{i}</Text>                 </Panel>             ))}     </Grid> </Grid> ```  ### Spanning  Use the `` component for more control over specific Grid items. ```jsx isFullWidth name=\\\"Spanning\\\" <Grid columns={2}>     <Panel>         <Text>foo</Text>     </Panel>     <GridItem as={Panel} colSpan={2}>         <Text>bar</Text>     </GridItem>     <Panel>         <Text>baz</Text>     </Panel> </Grid> ```  ### Density  Use the `isDense` prop to reduce the vertical and horizontal space between Grid items. ```jsx isFullWidth name=\\\"Density\\\" <Grid columns={2} isDense>     <Panel>         <Text>foo</Text>     </Panel>     <GridItem as={Panel} colSpan={2}>         <Text>bar</Text>     </GridItem>     <Panel>         <Text>baz</Text>     </Panel> </Grid> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9dd5ba3d-f9c4-4794-9be2-6b76f5e303f1":{"__data__":"{\"id_\":\"9dd5ba3d-f9c4-4794-9be2-6b76f5e303f1\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Overflower\",\"title\":\"Overflower\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Overflower/overflower.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Overflower_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Overflower\",\"title\":\"Overflower\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Overflower/overflower.mdx\"},\"hash\":\"vQwPeYFNw+2vVbMTZCdnThfZWAuuDkBTKk1kvwtItGs=\"},\"NEXT\":{\"nodeId\":\"06a78940-f5d4-4204-9a42-1d49e77d4f36\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Overflower\",\"title\":\"Overflower\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Overflower/overflower.mdx\"},\"hash\":\"tkpGQPt9RgEhgI1EKQwQ2yh5+aBmFHZESQuVyRKBEW4=\"}},\"hash\":\"JPNmpdovszLdssLdEuhotNvmnQSS8aktVcQdZNRa9ks=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Checkbox } from '@druids/ui/form/Checkbox'; import { Field } from '@druids/ui/form/Field'; import { FieldSet } from '@druids/ui/form/FieldSet'; import { InputText } from '@druids/ui/form/InputText'; import { RadioButtons } from '@druids/ui/form/RadioButtons'; import { Flex } from '@druids/ui/layout/Flex'; import { Overflower } from '@druids/ui/layout/Overflower'; import { Panel } from '@druids/ui/layout/Panel'; import { Spacing } from '@druids/ui/layout/Spacing'; import { Link } from '@druids/ui/nav/Link'; import { Text } from '@druids/ui/typography/Text'; import { ORDERED_SIZES } from '@druids/ui/ui-constants'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';  Overflower hides the overflowed content beyond an ellipsis and displays a `` with the original content when you hover it. It will only clip contents if the content is actually overflown, if there is enough room it is displayed without truncation. ### Example  ```jsx width=\\\"280\\\" name=\\\"Example\\\" <Overflower     {...useKnobs([         'size',         'type',         'position',         'tooltipContent',         'beforeContent',         'afterContent',     ])} >     {useKnob(         'children',         'Just a long-long-long line of text that would get overflowed.',         {             type: 'string',             options: ['Short text'],         },     )} </Overflower> ```  ## Usage  -   `beforeContent` and `afterContent` could be achieved with another layout, but making them a part of Overflower allows for better handling of the ``. -   When the `type` of the Overflower is `ellipsis` and its `position` is `start`, the display of the ellipsis is not perfect due to CSS limitations. (CSS doesn’t support reverse ellipsis, so we must implement a custom version of it with a regular `overflow: clip` of the content instead of a per-letter one. )  -   The `` doesn’t currently support changing its `tagName`, so the `hasInlineContext` prop disables the Tooltip component and the component is rendered with a `title` attribute instead. ## Dos & Don’ts  -   **Do**               ```jsx name=\\\"Do\\\" isVertical isExpanded width=\\\"330\\\"         }>             Some long content that would get overflown due to being that long                  ```           use with an `as` prop as a way to make interactive elements like a `` or `` work with the ``. -   **Don’t**               ```jsx name=\\\"Don’t\\\" isVertical isExpanded width=\\\"330\\\"                                       Some long content that would get overflown due to being that                 long                               ```           nest interactive elements inside the ``. ## Variants  ### Gradient mask  ```jsx width=\\\"200\\\" name=\\\"Gradient mask\\\" <Overflower type=\\\"gradient\\\">     Just a long line of text that would get overflowed. </Overflower> ```  ### Padding  Tooltip can have a padding, in this case the tooltip which would appear when there is an overflow would be shown over the whole Overflower area instead of only its insides. ```jsx width=\\\"200\\\" name=\\\"Padding\\\" <Panel padding=\\\"none\\\">     <Overflower padding=\\\"md\\\">         Just a long line of text that would get overflowed. </Overflower> </Panel> ```  ### Max width  By default, Overflower tries to take all the available space, but it is possible to limit it with a `maxWidth` prop. ```jsx width=\\\"300\\\" name=\\\"Max width\\\" <Overflower maxWidth={200}>     Just a long line of text that would get overflowed. </Overflower> ```  ### Line height  When the line-height of Overflower's context is big, the Overflower is positioned at the baseline. It is possible to control this using a `verticalAlign` prop. ```jsx width=\\\"300\\\" name=\\\"lineHeight\\\" <Flex style={{ lineHeight: '100px' }}>     <Overflower maxWidth={200}>         Just a long line of text that would get overflowed. </Overflower>     <Overflower verticalAlign=\\\"start\\\" maxWidth={200}>         Just a long line of text that would get overflowed. </Overflower> </Flex> ```  ### Nested  It is possible to use nested Overflowers, for example when we need to have a single tooltip over multiple lines.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"06a78940-f5d4-4204-9a42-1d49e77d4f36":{"__data__":"{\"id_\":\"06a78940-f5d4-4204-9a42-1d49e77d4f36\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Overflower\",\"title\":\"Overflower\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Overflower/overflower.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Overflower_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Overflower\",\"title\":\"Overflower\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Overflower/overflower.mdx\"},\"hash\":\"vQwPeYFNw+2vVbMTZCdnThfZWAuuDkBTKk1kvwtItGs=\"},\"PREVIOUS\":{\"nodeId\":\"9dd5ba3d-f9c4-4794-9be2-6b76f5e303f1\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Overflower\",\"title\":\"Overflower\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Overflower/overflower.mdx\"},\"hash\":\"JPNmpdovszLdssLdEuhotNvmnQSS8aktVcQdZNRa9ks=\"}},\"hash\":\"tkpGQPt9RgEhgI1EKQwQ2yh5+aBmFHZESQuVyRKBEW4=\",\"text\":\"To do so we need to add `isNested` to the inner Overflowers. ```jsx name=\\\"Nested\\\" const line1 = 'Just a long line of text that would get overflowed.'; const line2 = 'Another shorter line.'; return (     <Overflower height=\\\"auto\\\" tooltipContent={`${line1} ${line2}`}>         <Flex direction=\\\"column\\\" alignItems=\\\"flex-start\\\">             <Overflower isNested>{line1}</Overflower>             <Overflower isNested>{line2}</Overflower>         </Flex>     </Overflower> ); ```  ### After content  A short filename, displayed as is, without a Tooltip or mask, and a long one. ```jsx width=\\\"200\\\" name=\\\"After Content\\\" <Overflower afterContent=\\\".jpg\\\" hasExtraContentInTooltip>Design_final</Overflower> <Overflower afterContent=\\\".psd\\\" hasExtraContentInTooltip>     Design_final copy (fixed 3) preview copy (final) </Overflower> ```  ### Before content  Example with an Icon+Text, where the text disappears when it won't fit and the icon stays, with a tooltip displaying only the text. ```jsx width=\\\"200\\\" name=\\\"Before content\\\" <Overflower size=\\\"lg\\\" beforeContent=\\\"🙀\\\" shorterContent=\\\"\\\">     Some icon </Overflower> ```  ### Position  A case for a `position`, when we need to show the end of the string. ```jsx width=\\\"200\\\" name=\\\"Position\\\" <Overflower position=\\\"start\\\" beforeContent=\\\"@druids/\\\" hasExtraContentInTooltip>     {/* We need to split it for a better tooltip display */}     <span>         {'ui/layout/Overflower/overflower.mdx'.split(/(?=\\\\/)/).map((item) => (             <span style={{ display: 'inline-block' }} key={item}>                 {item}             </span>         ))}     </span> </Overflower> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7f2c8212-b99f-4201-9e1b-2e88ac12bd34":{"__data__":"{\"id_\":\"7f2c8212-b99f-4201-9e1b-2e88ac12bd34\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Panel\",\"title\":\"Panel\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Panel/panel.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Panel_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Panel\",\"title\":\"Panel\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Panel/panel.mdx\"},\"hash\":\"LGy3hQJAkkvZRRUnzii2zWZ8eKddi0EhP7vhGE1t8eQ=\"}},\"hash\":\"xIIrOdVvQ5b32efAjrnD6GTaP6AoLHoLPJb3KdS9PK8=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Panel } from '@druids/ui/layout/Panel'; import { Text } from '@druids/ui/typography/Text'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Flex } from '@druids/ui/layout/Flex'; import { Image } from '@druids/ui/misc/Image'; import { ExampleImage } from '@druids/ui/internals/ExampleImage'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                                              Lorem ipsum dolor amet photo booth wolf mixtape, hell of                 williamsburg selfies kogi tumblr synth schlitz. XOXO air plant                 pok pok chia tumeric squid venmo. Bitters fingerstache beard art                 party subway tile. ### Example  ```jsx partial=\\\"content\\\" isHidden const content = (     <Flex alignItems=\\\"flex-start\\\">         <ExampleImage width=\\\"100\\\" height=\\\"100\\\" />         <Text marginLeft=\\\"md\\\">             Lorem ipsum dolor amet photo booth wolf mixtape, hell of             williamsburg selfies kogi tumblr synth schlitz. XOXO air plant pok             pok chia tumeric squid venmo. Bitters fingerstache beard art party             subway tile, raw denim next level asymmetrical mlkshk mumblecore             plaid trust fund 90's hella. Direct trade intelligentsia godard             chartreuse flannel etsy shoreditch small batch pok pok typewriter             palo santo pitchfork listicle green juice four dollar toast. </Text>     </Flex> ); ```  ```jsx name=\\\"Example\\\" withPartials=\\\"content\\\" <Panel     {...useKnobs([         'padding',         'variant',         'isBorderless',         'isInteractive',         'isRounded',     ])} >     {content} </Panel> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c3ee8538-7879-4b0c-88ae-a08b5193ac4d":{"__data__":"{\"id_\":\"c3ee8538-7879-4b0c-88ae-a08b5193ac4d\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Spacing\",\"title\":\"Spacing\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Spacing/spacing.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Spacing_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Spacing\",\"title\":\"Spacing\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Spacing/spacing.mdx\"},\"hash\":\"rLdv51HK1uJeXpMrRFwWWbmeIPhpitG7VO4JiNWTS/I=\"},\"NEXT\":{\"nodeId\":\"b8f5e049-bf7c-4cea-a121-9b3aa186b120\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Spacing\",\"title\":\"Spacing\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Spacing/spacing.mdx\"},\"hash\":\"Zj4Ys3KmWM+NAj3PtXC2SPBkGA+Wa6KqK1j9bLeAqpg=\"}},\"hash\":\"mAJpH50Jy4m/qqhx573kliudNhL+jITfblz69tvzbxk=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Spacing } from '@druids/ui/layout/Spacing'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Panel } from '@druids/ui/layout/Panel'; import { Button } from '@druids/ui/form/Button'; import { Text } from '@druids/ui/typography/Text'; import { LEVEL_SHADOWS } from '@druids/ui/ui-constants';  ### Example  ```jsx name=\\\"Example\\\" const pStyles = {     backgroundColor: 'salmon',     display: 'inline-block', }; const cStyles = {     backgroundColor: 'lightblue',     display: 'inline-block', }; return (     <div>         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} margin=\\\"md\\\">                 (margin: md)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} padding=\\\"md\\\">                 (padding: md)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} marginRight=\\\"md\\\">                 (margin-right: md)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} paddingBottom=\\\"sm\\\">                 (padding-bottom: sm)             </Spacing>         </Spacing>         <br />         <br />         <Spacing as=\\\"div\\\" style={pStyles}>             <Spacing as=\\\"div\\\" style={cStyles} marginX=\\\"md\\\" paddingY=\\\"md\\\">                 (margin-left: md, margin-right: md, padding-top: md,                 padding-bottom: md)             </Spacing>         </Spacing>     </div> ); ```  ## Variants  ### Individual sides  You can use the props `marginTop`, `marginRight`, `marginBottom`, and `marginLeft` to set the four margins based on T-shirt sizes. ```jsx name=\\\"Individual sides\\\" <Spacing marginTop=\\\"xl\\\" marginRight=\\\"xl\\\" marginBottom=\\\"xl\\\" marginLeft=\\\"xl\\\">     <Button isTitleCased={false} label={`I have $\\\"xl\\\" margins on all sides`} /> </Spacing> ```  The margins are smart, so `margin` has less priority than `marginX` and `marginY`, which have less priority than `marginLeft`, `marginRight`, `marginBottom`, and `marginTop`. ```jsx name=\\\"Individual sides priority\\\" <Spacing     margin=\\\"xl\\\"     marginX=\\\"md\\\"     marginY=\\\"md\\\"     marginTop=\\\"sm\\\"     marginRight=\\\"sm\\\"     marginBottom=\\\"sm\\\"     marginLeft=\\\"sm\\\" >     <Button         isTitleCased={false}         label={`I have $\\\"sm\\\" margins on all sides even if the other props are set to different values.`}     /> </Spacing> ```  ### Horizontal / Vertical  To avoid repetition, you can use the props `marginX`, `marginY`, and `margin`, which will set the margin on, respectively, the **left** and **right** margins, the **top** and **bottom** margins, and **all four** margins. ```jsx name=\\\"Horizontal Vertical\\\" <Spacing marginX=\\\"md\\\" marginY=\\\"sm\\\">     <Button         isTitleCased={false}         label={`I have an x margin of $\\\"md\\\" and a y margin of $\\\"sm\\\".`}     /> </Spacing> ```  ### Additional margins  In addition to the T-shirt sizes, you can also use the keyword `auto` and `none`. ```jsx name=\\\"Additional margins\\\" <Spacing margin=\\\"xl\\\" marginRight=\\\"none\\\">     <Button         isTitleCased={false}         label={`I have $\\\"xl\\\" margins on all sides except the right one.`}     /> </Spacing> <Spacing marginX=\\\"auto\\\">     <Spacing as=\\\"div\\\" style={{ width: 'fit-content' }}>         <Button             isTitleCased={false}             label={`I have an auto horizontal margin.`}         />     </Spacing> </Spacing> ```  ### Alternate rendering  As Spacing injects classNames in its first child, not every margin has an effect due to the `display` CSS property. ```jsx name=\\\"Alternate rendering\\\" <Spacing marginTop=\\\"xl\\\" marginRight=\\\"xl\\\" marginBottom=\\\"xl\\\" marginLeft=\\\"xl\\\">     <Text>         I have \\\"xl\\\" margins on all sides — but they have no effect on the top         and bottom because I have a span layout.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b8f5e049-bf7c-4cea-a121-9b3aa186b120":{"__data__":"{\"id_\":\"b8f5e049-bf7c-4cea-a121-9b3aa186b120\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Spacing\",\"title\":\"Spacing\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Spacing/spacing.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Spacing_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Spacing\",\"title\":\"Spacing\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Spacing/spacing.mdx\"},\"hash\":\"rLdv51HK1uJeXpMrRFwWWbmeIPhpitG7VO4JiNWTS/I=\"},\"PREVIOUS\":{\"nodeId\":\"c3ee8538-7879-4b0c-88ae-a08b5193ac4d\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/layout/Spacing\",\"title\":\"Spacing\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/layout/Spacing/spacing.mdx\"},\"hash\":\"mAJpH50Jy4m/qqhx573kliudNhL+jITfblz69tvzbxk=\"}},\"hash\":\"Zj4Ys3KmWM+NAj3PtXC2SPBkGA+Wa6KqK1j9bLeAqpg=\",\"text\":\"</Text> </Spacing> ```  To change this, you can specify to Spacing to render `as` another component / element. ```jsx name=\\\"Alternate rendering as\\\" <Spacing     as=\\\"div\\\"     marginTop=\\\"xl\\\"     marginRight=\\\"xl\\\"     marginBottom=\\\"xl\\\"     marginLeft=\\\"xl\\\" >     <Text>         I, too, have \\\"xl\\\" margins on all sides — and now they have an effect         because I have an automatically created parent block element. </Text> </Spacing> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8bd64ff6-65f1-48f5-8eba-85d813dfcf11":{"__data__":"{\"id_\":\"8bd64ff6-65f1-48f5-8eba-85d813dfcf11\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"IntegrationLogo_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"uTCg0VBQDHkR1AVgyD2gY3b4dfQvo5nmFG3g/YGf2wQ=\"},\"NEXT\":{\"nodeId\":\"e49bdb9b-d4b1-49ee-a429-1d9dba7ef638\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"KmHlQcVRZwn3K+GK/P3YzLwmUo7ZNFOC0CjR1qUyJ9s=\"}},\"hash\":\"W2A6W4x8+g7+u4OW9EqM35nblFNF5KID3B4MK4CL9Rg=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { PopoverMenuItem } from '@druids/ui/dialogs/PopoverMenuItem'; import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import DosAndDontsExample_4A_Light from '@druids/ui/form/Select/dos-and-donts-images/select-2a-light.png'; import DosAndDontsExample_4A_Dark from '@druids/ui/form/Select/dos-and-donts-images/select-2a-dark.png'; import DosAndDontsExample_4B_Light from '@druids/ui/form/Select/dos-and-donts-images/select-2b-light.png'; import DosAndDontsExample_4B_Dark from '@druids/ui/form/Select/dos-and-donts-images/select-2b-dark.png'; import { InputText } from '@druids/ui/form/InputText'; import { Label } from '@druids/ui/form/Label'; import { ArrowRightIcon } from '@druids/ui/icons/ArrowRight'; import { CancelIcon } from '@druids/ui/icons/Cancel'; import { CheckIcon } from '@druids/ui/icons/Check'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Link } from '@druids/ui/nav/Link'; import { Flex } from '@druids/ui/layout/Flex'; import { Panel } from '@druids/ui/layout/Panel'; import { Image } from '@druids/ui/misc/Image'; import { IntegrationLogo } from '@druids/ui/misc/IntegrationLogo'; import { Tag } from '@druids/ui/pills/Tag'; import { Text } from '@druids/ui/typography/Text';  import DosAndDontsExample_1A_Light from './dos-and-donts-images/integration-logo-1a-light.png'; import DosAndDontsExample_1A_Dark from './dos-and-donts-images/integration-logo-1a-dark.png'; import DosAndDontsExample_1B_Light from './dos-and-donts-images/integration-logo-1b-light.png'; import DosAndDontsExample_1B_Dark from './dos-and-donts-images/integration-logo-1b-dark.png';                        {/* @if IS_PRIVATE */}  > If you need a logo to be created or edited, see the Creating Logos page. {/* @endif */}  ### Example  ```jsx name=\\\"Example\\\" <IntegrationLogo     {...useKnobs([         { variant: { options: ['avatar-chip', 'avatar', 'small', 'large'] } },         { integrationId: 'amazon-web-services' },         { width: 64 },     ])} /> ```  ## Usage  The DRUIDS Logo Gallery displays a list of all possible integration logos. The name of each logo is passed to the IntegrationLogo via the `integrationId` prop. Some also have “aliases”: additional values that can be passed to `integrationId` to display the same logo. They’re listed on the Logo Aliases page. ### Dos & Don’ts  -   **Do**                                        <Image                     src={[DosAndDontsExample_1A_Light, DosAndDontsExample_1A_Dark]}                     alt=\\\"A list of events in a 3-column table, with the columns representing event source, event message, and date. The event source column consists of large, easy-to-recognize logos. \\\"                 />                                make logos as large and recognizable as possible — at least 24px&thinsp;&times;&thinsp;24px, but ideally even larger. In almost every case, a layout can be reconfigured to give a logo more room (e.g., most tables). Large, recognizable logos reflect better on our partners and ourselves — and they’re better at quickly orienting users. -   **Don’t**                                        <Image                     src={[DosAndDontsExample_1B_Light, DosAndDontsExample_1B_Dark]}                     alt=\\\"A list of events in a 3-column table, with the columns representing event source, event message, and date. The event source column consists only of very small, hard-to-recognize logos. \\\"                 />                                make logos small and inscrutable. The only acceptable place to display a smaller logo is in a granular interactive component with a naturally constrained size (e.g., Facet, Button, ``, ``, Tag, etc.).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e49bdb9b-d4b1-49ee-a429-1d9dba7ef638":{"__data__":"{\"id_\":\"e49bdb9b-d4b1-49ee-a429-1d9dba7ef638\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"IntegrationLogo_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"uTCg0VBQDHkR1AVgyD2gY3b4dfQvo5nmFG3g/YGf2wQ=\"},\"PREVIOUS\":{\"nodeId\":\"8bd64ff6-65f1-48f5-8eba-85d813dfcf11\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"W2A6W4x8+g7+u4OW9EqM35nblFNF5KID3B4MK4CL9Rg=\"},\"NEXT\":{\"nodeId\":\"618132e4-8f08-40fe-81e1-c8f5712bf928\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"eoxFiPk1WaxbjZc7O0zpFoPGdqGJ0TJKSLi3JuRCCbU=\"}},\"hash\":\"KmHlQcVRZwn3K+GK/P3YzLwmUo7ZNFOC0CjR1qUyJ9s=\",\"text\":\"-   **Do**                                      use `variant=\\\"avatar\\\"` if a logo _absolutely must_ be smaller than 32px&thinsp;&times;&thinsp;32px. (But try to make logos as big as possible anyway; see the first Do/Don’t above. )  -   **Don’t**                                      use `variant=\\\"avatar-chip\\\"` if the the logo can’t be at least 32px&thinsp;&times;&thinsp;32px. -   **Do**               <Image             src={[DosAndDontsExample_4A_Light, DosAndDontsExample_4A_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, and its text and logo have been changed to white, making for high reading contrast. \\\"         />           use the reversed/knockout version of a logo (the `isColorReversed` prop) when it sits atop a “selected” background. -   **Don’t**               <Image             src={[DosAndDontsExample_4B_Light, DosAndDontsExample_4B_Dark]}             width={223}             alt=\\\"An open Select dropdown menu with the option to pick a log source from among 6 popular options. One of the entries is highlighted in blue, but its text remains gray and its logo hasn’t changed, making for low reading contrast. \\\"         />           allow the base version of a logo to persist when it sits atop a “selected” background. ## Variants  All integration logos are SVGs, so they scale to any size with no loss of fidelity. They come in 4 “variants”: `avatar-chip`, `avatar`, `small`, and `large`. | Variant                                                  | Aspect Ratio | Examples                                                                                                                                                                                                                                                                                     | Description                                                                                                                            | Themed? | Usage                                                                                                                                                                              | | -------------------------------------------------------- | ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `avatar-chip` | 1:1          |  | Square logo which typically is icon-only — no wordmark. Often analogous to the favicon of the company’s website or mobile app icon. | No. Always full-color with a white or colored background and a shadow. | See Dos & Don’ts above                                                                               | | `avatar`           | 1:1          |                 | Like `avatar-chip` — but doesn’t sit inside a containing element                                                                       | Yes. Light theme version is full-color. Dark theme version is white (slightly dimmed to match the color of dark theme text). | See Dos & Don’ts above | | `small`             | 2:1          |                           | Typically contains an icon and wordmark. For most companies you can think of it as the “full” logo. | Yes. Light theme version is full-color. Dark theme version is white (slightly dimmed to match the color of dark theme text). |                                                                                                                                                                                    | | `large`             | 1.5625:1     |                           | Identical to `small` in many cases. In other cases, the stacked version when companies provide multiple versions of their “full” logo. | Yes. Light theme version is full-color. Dark theme version is white (slightly dimmed to match the color of dark theme text). |                                                                                                                                                                                    |  ## Color  ### Theming  Each variant except `avatar-chip` has a `reversed` version, which is used for the dark theme. > **Warning** > > **We use all-white artwork for every `reversed` logo** because determining the ideal dark theme logo on a case-by-case basis is impossible at our scale. All-white is a consistent pattern that can always apply and ensures a cohesive overall look and feel. `reversed` logos are dimmed slightly to match the brightness of the DRUIDS --ui-text color in the dark theme. ### Forcing reversed color  The `isColorReversed` prop forces the `reversed` version of the logo, regardless of light or dark theme. This is most commonly used when a logo sits within a colored block, which typically indicates it’s selected in some way.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"618132e4-8f08-40fe-81e1-c8f5712bf928":{"__data__":"{\"id_\":\"618132e4-8f08-40fe-81e1-c8f5712bf928\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"IntegrationLogo_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"uTCg0VBQDHkR1AVgyD2gY3b4dfQvo5nmFG3g/YGf2wQ=\"},\"PREVIOUS\":{\"nodeId\":\"e49bdb9b-d4b1-49ee-a429-1d9dba7ef638\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"KmHlQcVRZwn3K+GK/P3YzLwmUo7ZNFOC0CjR1qUyJ9s=\"},\"NEXT\":{\"nodeId\":\"5f8e4ca2-f7f2-4ae5-9808-9cc8aa632165\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"0DCu5jesz8gPsuaGeXnHsAjc5xxwgLXEbJ4Z32V2L94=\"}},\"hash\":\"eoxFiPk1WaxbjZc7O0zpFoPGdqGJ0TJKSLi3JuRCCbU=\",\"text\":\"```jsx name=\\\"Forcing reversed color\\\" isList <Panel shouldShrinkToContent>     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"go\\\" /> </Panel> <Panel shouldShrinkToContent>     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"javascript\\\" /> </Panel> <Panel     isBorderless     shouldShrinkToContent     style={{ background: 'var(--ui-interaction-primary)' }} >     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"python\\\" isColorReversed /> </Panel> <Panel shouldShrinkToContent>     <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"ruby\\\" /> </Panel> ```  ### Inherited color  The `hasInheritedColor` prop renders the logo in a single color inherited from its parent. For example, using an `hasInheritedColor` logo inside the `` component means the logo will inherit the `var(--ui-text)` color. > **Warning: Use with caution** > > -   This may not produce a coherent result for complex logos. > -   It’s ignored for any variant of the Datadog logo to prevent Bits from being rendered with ghostly “x-ray eyes. ” > -   It’s ignored for the `avatar-chip` variant of every logo. ```jsx name=\\\"hasInheritedColor\\\" isList <IntegrationLogo     hasInheritedColor     variant=\\\"small\\\"     integrationId=\\\"amazon-web-services\\\" /> <Text variant=\\\"tertiary\\\">     <IntegrationLogo         variant=\\\"large\\\"         hasInheritedColor         integrationId=\\\"amazon-web-services\\\"     /> </Text> <Link>     <IntegrationLogo         variant=\\\"avatar\\\"         hasInheritedColor         integrationId=\\\"amazon-web-services\\\"     /> </Link> <Text>     <IntegrationLogo         variant=\\\"large\\\"         hasInheritedColor         integrationId=\\\"_datadog\\\"     /> </Text> ```  ## Cloud provider services (“sub-integrations”)  The 3 major cloud providers — AWS, Azure, and Google Cloud — have dozens of “sub-integrations” each. These are the individual services that make up the platform (Amazon EC2, Azure VM, Google Compute Engine, etc.). Use the `isDisplayedAsCloudProvider` prop to replace an individual sub-integration logo with its parent cloud provider’s logo.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5f8e4ca2-f7f2-4ae5-9808-9cc8aa632165":{"__data__":"{\"id_\":\"5f8e4ca2-f7f2-4ae5-9808-9cc8aa632165\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"IntegrationLogo_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"uTCg0VBQDHkR1AVgyD2gY3b4dfQvo5nmFG3g/YGf2wQ=\"},\"PREVIOUS\":{\"nodeId\":\"618132e4-8f08-40fe-81e1-c8f5712bf928\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"eoxFiPk1WaxbjZc7O0zpFoPGdqGJ0TJKSLi3JuRCCbU=\"},\"NEXT\":{\"nodeId\":\"c762a62b-f8f5-44e9-845a-b34377cd66f4\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"j8B/vOGa2lKKssdmB7ffX94Jitc5nodMrmQ6jhM7Qkg=\"}},\"hash\":\"0DCu5jesz8gPsuaGeXnHsAjc5xxwgLXEbJ4Z32V2L94=\",\"text\":\"```jsx name=\\\"Cloud_provider_services\\\" <Flex gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-ec2\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-ec2\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-s3\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-s3\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-cloudfront\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"amazon-cloudfront\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"xl\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-vm\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-vm\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-networkinterface\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-networkinterface\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-app-services\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"azure-app-services\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"xl\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-compute-engine\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-compute-engine\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-container-engine\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-container-engine\\\"         isDisplayedAsCloudProvider     /> </Flex> <Flex marginTop=\\\"sm\\\" gapX=\\\"md\\\">     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-cloud-run\\\"     />     <ArrowRightIcon size=\\\"xxl\\\" fill=\\\"var(--ui-icon)\\\" />     <IntegrationLogo         variant=\\\"avatar\\\"         width={32}         integrationId=\\\"google-cloud-run\\\"         isDisplayedAsCloudProvider     /> </Flex> ```  ## Fallback  Use the `integrationIdFallback` prop to specify a fallback logo to display if the primary `integrationId` doesn’t match an existing logo. This is useful when `integrationId` values come from an API for which the full possibility of data sources isn’t known. ```jsx name=\\\"Fallback\\\" <IntegrationLogo     variant=\\\"small\\\"     integrationId=\\\"foobarbaz\\\"     integrationIdFallback=\\\"_datadog\\\" /> ```  If the `integrationId` doesn’t match a known value and `integrationIdFallback` isn’t set (or if `integrationIdFallback` also is invalid), nothing will display. ```jsx name=\\\"Invalid source\\\" <IntegrationLogo variant=\\\"small\\\" integrationId=\\\"foobarbaz\\\" /> ```  ## Dimension overrides  Use the `width` and `height` props to override default dimensions. Make sure to respect the aspect ratio of the variant in question.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c762a62b-f8f5-44e9-845a-b34377cd66f4":{"__data__":"{\"id_\":\"c762a62b-f8f5-44e9-845a-b34377cd66f4\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"IntegrationLogo_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"uTCg0VBQDHkR1AVgyD2gY3b4dfQvo5nmFG3g/YGf2wQ=\"},\"PREVIOUS\":{\"nodeId\":\"5f8e4ca2-f7f2-4ae5-9808-9cc8aa632165\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/IntegrationLogo\",\"title\":\"IntegrationLogo\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/IntegrationLogo/integration-logo.mdx\"},\"hash\":\"0DCu5jesz8gPsuaGeXnHsAjc5xxwgLXEbJ4Z32V2L94=\"}},\"hash\":\"j8B/vOGa2lKKssdmB7ffX94Jitc5nodMrmQ6jhM7Qkg=\",\"text\":\"Make sure to respect the aspect ratio of the variant in question. ```jsx name=\\\"Dimension overrides\\\" isList <IntegrationLogo variant=\\\"large\\\" width={100} height={64} integrationId=\\\"apache\\\" /> <IntegrationLogo variant=\\\"large\\\" width=\\\"60%\\\" height=\\\"60%\\\" integrationId=\\\"apache\\\" /> ```  ## As Icon component  The `isIcon` prop renders an IntegrationLogo as an `` component instead of an ``. This is useful when the logo must appear inside another element that accepts an Icon, like a `` or ``. > **Two important notes to remember** > > 1. Only the `avatar-chip` or `avatar` variants should be used with `isIcon`. Never use it with the `large` or `small` variants. > 2. Make sure to set `isColorReversed` if the logo must become `reversed` conditionally — e.g., when the element has a dark background on hover. ```jsx partial=\\\"logoAsIcon\\\" isHidden const LogoAsIcon = ({ ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         isIcon     /> );  const LogoAsIconThatChangesOnHover = ({ isHovered, ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         isIcon         isColorReversed={isHovered}     /> ); ```  ```jsx name=\\\"As Icon component\\\" withPartials=\\\"logoAsIcon\\\" isList <Button size=\\\"lg\\\" label=\\\"I’m a Button\\\" icon={LogoAsIcon} /> <Button     size=\\\"lg\\\"     isBorderless     isPrimary     label=\\\"I’m a Button variant with a dark hover state\\\"     icon={LogoAsIconThatChangesOnHover} /> <Tag     size=\\\"lg\\\"     isClickable     label=\\\"i’m:a-tag-which-always-has-a-dark-hover-state\\\"     icon={LogoAsIconThatChangesOnHover} /> <PopoverMenuItem     label=\\\"I’m a PopoverMenuItem\\\"     description=\\\"Which always has a dark hover state \\\"     hasIntegrationLogo     icon={LogoAsIconThatChangesOnHover} /> ```  The `isIcon` prop also can be used together with the `hasInheritedColor` prop:  ```jsx partial=\\\"logoAsIcon\\\" isHidden const LogoAsIcon2 = ({ ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         hasInheritedColor         isIcon     /> );  const LogoAsIconThatChangesOnHover2 = ({ isHovered, ...props }) => (     <IntegrationLogo         {...props}         variant=\\\"avatar\\\"         integrationId=\\\"firefox\\\"         hasInheritedColor         isIcon         isColorReversed={isHovered}     /> ); ```  ```jsx name=\\\"As Icon component\\\" withPartials=\\\"logoAsIcon\\\" isList <Button size=\\\"lg\\\" label=\\\"I’m a Button\\\" icon={LogoAsIcon2} /> <Button     size=\\\"lg\\\"     isBorderless     isPrimary     label=\\\"I’m a Button variant with a dark hover state\\\"     icon={LogoAsIconThatChangesOnHover2} /> <Tag     size=\\\"lg\\\"     isClickable     label=\\\"i’m:a-tag-which-always-has-a-dark-hover-state\\\"     icon={LogoAsIconThatChangesOnHover2} /> <PopoverMenuItem     label=\\\"I’m a PopoverMenuItem\\\"     description=\\\"Which always has a dark hover state \\\"     hasIntegrationLogo     icon={LogoAsIconThatChangesOnHover2} /> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e4de163e-76db-4121-9b48-2237aa5678bc":{"__data__":"{\"id_\":\"e4de163e-76db-4121-9b48-2237aa5678bc\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/MessageBox\",\"title\":\"MessageBox\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/MessageBox/message-box.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"MessageBox_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/misc/MessageBox\",\"title\":\"MessageBox\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/misc/MessageBox/message-box.mdx\"},\"hash\":\"M4d+u0sGMwYlhoHFBxY1P0Yo1V4yF/LQM2qaFG/cN0Y=\"}},\"hash\":\"u3Usfg97X7re0H+c2aqSU7CcvUDeUTwNOBbdohaXaLY=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { RefreshIcon } from '@druids/ui/icons/Refresh'; import { Spacing } from '@druids/ui/layout/Spacing'; import { MessageBox } from '@druids/ui/misc/MessageBox'; import { Link } from '@druids/ui/nav/Link'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import { Text } from '@druids/ui/typography/Text'; import { Flex } from '@druids/ui/layout/Flex'; import { AttentionIcon } from '@druids/ui/icons/Attention'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                MessageBox text content        ### Example  ```jsx isVerticalList name=\\\"Example\\\" <MessageBox>     <Text>Basic MessageBox</Text> </MessageBox> <MessageBox>     <Text>         You can put rich content in a MessageBox, too. You can{' '}         <Link isExternal href=\\\"#\\\">             include links         </Link>         . You can         <InlineCode>include InlineCode snippets</InlineCode>. </Text>     <Spacing as=\\\"div\\\" marginTop=\\\"md\\\">         <Text>             And you even can{' '}             <Button size=\\\"sm\\\" isPrimary label=\\\"Include Buttons\\\" />         </Text>     </Spacing> </MessageBox> ```  > **Warning** > Wrap MessageBox content with components like `` and `` to ensure a consistent display of typographic content. However, use the `title` prop to set an optional title (instead of the DRUIDS `` component). ## Variants  ### Levels  ```jsx name=\\\"Levels\\\" permutations=\\\"level\\\" <MessageBox {...useKnobs(['level', 'isDismissible'])}>     <Text>         {useKnob('children', '', {             fallback: ({ level }) =>                 `${                     {                         default: 'Default',                         success: 'Success',                         warning: 'Warning',                         danger: 'Danger',                     }[level]                 } MessageBox`,         })}     </Text> </MessageBox> ```  ### Dismissible  ```jsx name=\\\"Dismissible\\\" const [nb, setNb] = React.useState(1); if (nb === 0) {     return <Button onClick={() => setNb(1)} icon={RefreshIcon} label=\\\"Reset\\\" />; } return (     <>         <MessageBox isDismissible onDismiss={() => setNb(nb - 1)}>             <Text>                 A MessageBox can be optionally dismissible. It disappears with a                 snappy animation and a callback is fired{' '}                 <InlineCode>onDismiss</InlineCode>. </Text>         </MessageBox>     </> ); ```  ### Title  Use the `title` prop to accentuate a MessageBox by adding a bold, color-coded title. The coordinating left stripe also is added automatically to any MessageBox with a title. ```jsx name=\\\"Title\\\" permutations=\\\"level\\\" <MessageBox     {...useKnobs(['level', 'isDismissible'])}     title=\\\"Title of the MessageBox\\\" >     <Text>         I am a MessageBox         <br />         with the <InlineCode>title</InlineCode> prop set. </Text> </MessageBox> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"25252888-8e28-45d8-8a3b-ad1a5258218b":{"__data__":"{\"id_\":\"25252888-8e28-45d8-8a3b-ad1a5258218b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/Link\",\"title\":\"Link\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/Link/link.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Link_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/Link\",\"title\":\"Link\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/Link/link.mdx\"},\"hash\":\"s+CMNThn8TNm5lzLJ6oPOc/RElTb+QwhDRaqMK/U+U8=\"},\"NEXT\":{\"nodeId\":\"c6755457-80e7-462f-8cf9-7cdbd821d221\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/Link\",\"title\":\"Link\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/Link/link.mdx\"},\"hash\":\"bRnEvJPYhJX2ZHn+ezYU1IV9/kQbBy+j280r7xhC21o=\"}},\"hash\":\"od8oiZ3wv0xI1zPA5x++4NFKEE2NuIlY7ZG5TLQzqks=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Link } from '@druids/ui/nav/Link'; import { Panel } from '@druids/ui/layout/Panel'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                I’m a simple Link        {/* @if IS_PRIVATE */}  > **Warning: Heads up** > When inside the Datadog SPA, always import the SPALink instead. > > The `` is a thin wrapper around the DRUIDS ``, but automatically connected to our router for faster page transitions. > Even for external links, please prefer using ``. > > Check out the differences when migrating. {/* @endif */}  ### Example  ```jsx name=\\\"Example\\\" knobsState=\\\"hidden\\\" <Link href=\\\"#example\\\" {...useKnobs(['size', 'linkType', 'isExternal'])}>     I’m a simple Link </Link> ```  > The Link component should be used for _all_ links within the Datadog platform. This ensures a consistent presentation and that a consistent set of attributes, like `rel` and `target`, are applied when necessary. ## Variants  ### Types  ```jsx isVerticalList name=\\\"Types\\\" permutations=\\\"linkType\\\" <Link href=\\\"#types\\\" {...useKnobs(['linkType', 'size', 'isExternal'])}>     {useKnob('children', '', {         fallback: ({ linkType }) =>             `I’m a ${                 {                     default: 'default Link',                     plain: 'plain Link',                     'color-on-hover': 'Link that only has colors on hover',                     'no-class-names': 'Link with no styles at all',                 }[linkType]             }`,     })} </Link> ```  > **Warning** > Only the `default` type of Link has `font-family` styles applied. ### Sizes  ```jsx isVerticalList name=\\\"Sizes\\\" permutations=\\\"size\\\" <Link href=\\\"#types\\\" {...useKnobs(['size', 'linkType', 'isExternal'])}>     {useKnob('children', '', {         fallback: ({ size }) => `I’m an ${size.toUpperCase()} link`,     })} </Link> ```  ### External  The `isExternal` prop will open the link in another tab by injecting the appropriate `rel` and `target` attributes into the underlying `` element. For example, we must use it when we link to things outside the Datadog platform. Or if we always want to open an internal link in a new tab. By default an `` is added as well. It can be disabled by setting the `hasExternalIcon` prop to `false`. ```jsx isVerticalList name=\\\"External\\\" <Link     href=\\\"https://datadoghq.com\\\"     {...usePermutations({         regular: {},         isExternal: true,         'no external icon': {             isExternal: true,             hasExternalIcon: false,         },     })}     {...useKnobs(['size', 'linkType'])} >     {useKnob('children', '', {         fallback: ({ isExternal, hasExternalIcon }) =>             isExternal && hasExternalIcon === false                 ? 'External link without an icon'                 : isExternal                 ? 'External link that opens in a new tab'                 : 'Link that opens in the same tab',     })} </Link> ```  ### Alternate component  Complex links (e.g., ones that use react-router instead of `href`) can be passed in the `component` prop. They will be styled to appear identical to a regular Link. This is an escape hatch so the Link can avoid relying on any routing logic (non-DRUIDS code). This is the only way routing links should be used with Link. ```jsx partial=\\\"router-link\\\" isMemoized isHidden const CustomLink = ({ href, className, children }) => (     <a         className={className}         href={href}         onClick={(event) => {             event.preventDefault();             alert(`Redirect to ${href}`);         }}     >         {children}     </a> ); ```  ```jsx withPartials=\\\"router-link\\\" name=\\\"Alternate component\\\" <Link component={<CustomLink href=\\\"/hello\\\" />}>Custom link</Link> <Link component={CustomLink} href=\\\"/world\\\">Custom link</Link> ```  ### Inline links  By default (and for legacy reasons) our links could have an `inline-block` display.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c6755457-80e7-462f-8cf9-7cdbd821d221":{"__data__":"{\"id_\":\"c6755457-80e7-462f-8cf9-7cdbd821d221\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/Link\",\"title\":\"Link\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/Link/link.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Link_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/Link\",\"title\":\"Link\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/Link/link.mdx\"},\"hash\":\"s+CMNThn8TNm5lzLJ6oPOc/RElTb+QwhDRaqMK/U+U8=\"},\"PREVIOUS\":{\"nodeId\":\"25252888-8e28-45d8-8a3b-ad1a5258218b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/Link\",\"title\":\"Link\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/Link/link.mdx\"},\"hash\":\"od8oiZ3wv0xI1zPA5x++4NFKEE2NuIlY7ZG5TLQzqks=\"}},\"hash\":\"bRnEvJPYhJX2ZHn+ezYU1IV9/kQbBy+j280r7xhC21o=\",\"text\":\"For contexts like inside `` we would prefer them to be `inline` — for this we can use an `isInline` prop:  ```jsx name=\\\"Inline\\\" width=\\\"300px\\\" <Panel>     Hello,     <Link href=\\\"#hello\\\">I'll wrap completely, as I'm inline-block.</Link> </Panel> <Panel>     Hello,     <Link isInline href=\\\"#hello\\\">I'll wrap word-by-word, as I'm inline.</Link> </Panel> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ac8d1662-a882-4332-85a6-45c85ffa9f67":{"__data__":"{\"id_\":\"ac8d1662-a882-4332-85a6-45c85ffa9f67\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/TabList\",\"title\":\"TabList\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/TabList/tab-list.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"TabList_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/TabList\",\"title\":\"TabList\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/TabList/tab-list.mdx\"},\"hash\":\"r7iptiMKtSBYUxcUovzydYw4T3DacvXHlhhylpgs/ho=\"},\"NEXT\":{\"nodeId\":\"1ffc33b5-8173-4102-9298-7d91881a4a51\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/TabList\",\"title\":\"TabList\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/TabList/tab-list.mdx\"},\"hash\":\"kM/cKRckQnhv98BV/5QTrhsL7Th/u8AvWrwmfb+QpII=\"}},\"hash\":\"UQKiwDmJZtG+Flb07Yaw1g/7NYozGEELHdY++YYgtrg=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { TabList, Tab } from '@druids/ui/nav/TabList'; import { Panel } from '@druids/ui/layout/Panel'; import { Spacing } from '@druids/ui/layout/Spacing'; import { ContentSwitcher } from '@druids/ui/layout/ContentSwitcher'; import { Text } from '@druids/ui/typography/Text'; import { List } from '@druids/ui/typography/List'; import { RadioButtons } from '@druids/ui/form/RadioButtons'; import { ExternalLinkIcon } from '@druids/ui/icons/ExternalLink'; import { LightningFilledIcon } from '@druids/ui/icons/LightningFilled'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                <Tab             key=\\\"hello\\\"             value=\\\"hello\\\"             isActive             label=\\\"hello\\\"             featureStatus=\\\"beta\\\"             maxCount={50000}         />         <Tab             key=\\\"hello\\\"             value=\\\"It’s Me\\\"             isActive={false}             label=\\\"It’s Me\\\"             maxCount={50000}         />         <Tab             key=\\\"some-page\\\"             value=\\\"Some Page\\\"             isActive={false}             label=\\\"Some Page\\\"             maxCount={50000}         />        TabList is the standard component for navigating between sections of content. It’s populated with `` components. -   For multi-purpose lists that invoke a callback and keep the user on the same page, use size `MEDIUM` for the Tabs. -   Any Tab can be made a standard HTML link by using the `href` prop. -   Alternatively, you can pass a link component (such as `` or ``) by using the `linkComponent` prop. This will automatically apply styling to the component. -   For lists that navigate between entire sections of the app, use size `LARGE` for the Tabs and ``/`` inside `linkComponent`. -   You can include an icon to the right of a Tab’s text by using the `icon` prop. -   You can include a count pill to the right of a Tab’s text by using the `count` prop. It will be capped at 99 by default (this value can be tweaked with the `maxCount` prop). Values are displayed in human readable format.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1ffc33b5-8173-4102-9298-7d91881a4a51":{"__data__":"{\"id_\":\"1ffc33b5-8173-4102-9298-7d91881a4a51\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/TabList\",\"title\":\"TabList\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/TabList/tab-list.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"TabList_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/TabList\",\"title\":\"TabList\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/TabList/tab-list.mdx\"},\"hash\":\"r7iptiMKtSBYUxcUovzydYw4T3DacvXHlhhylpgs/ho=\"},\"PREVIOUS\":{\"nodeId\":\"ac8d1662-a882-4332-85a6-45c85ffa9f67\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/nav/TabList\",\"title\":\"TabList\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/nav/TabList/tab-list.mdx\"},\"hash\":\"UQKiwDmJZtG+Flb07Yaw1g/7NYozGEELHdY++YYgtrg=\"}},\"hash\":\"kM/cKRckQnhv98BV/5QTrhsL7Th/u8AvWrwmfb+QpII=\",\"text\":\"Values are displayed in human readable format. ### Example  ```jsx partial=\\\"menu\\\" isHidden isMemoized const menu = [     {         key: 'hello',         name: 'Hello',         isDisabled: false,         controls: 'my-hello-panel-id',         featureStatus: 'beta',     },     {         key: 'me',         name: \\\"It's me\\\",         isDisabled: false,         controls: 'my-itsme-panel-id',         tooltipOnTab: 'It still is me',     },     {         key: 'toto',         href: 'https://www.datadoghq.com/',         name: 'External page',         isDisabled: false,         icon: ExternalLinkIcon,     },     {         key: 'foo',         name: 'Disabled',         isDisabled: true,         controls: 'my-foo-panel-id',     },     {         key: 'count',         name: 'Count',         controls: 'count',         count: 11345,     },     {         key: 'suffix',         name: 'Has a suffix',         controls: 'suffix',         rightElement: (             <StatusPill level=\\\"success\\\" icon={LightningFilledIcon}>                 Live             </StatusPill>         ),     }, ]; ```  ```jsx partial=\\\"wrapper\\\" isHidden const hasConstantHeight = useKnob('Content has constant height', false); const TabListWrapper = React.useCallback(({ overflow, size }) => {     const [isActive, setIsActive] = React.useState(menu[0].key);     return (         <>             <TabList overflow={overflow} size={size}>                 {menu.map((tab) => (                     <Tab                         {...tab}                         key={tab.key}                         value={tab.key}                         featureStatus={tab.featureStatus}                         isActive={isActive === tab.key}                         onSelectTab={setIsActive}                         label={tab.name}                         maxCount={50000}                     />                 ))}             </TabList>             <ContentSwitcher                 hasConstantHeight={hasConstantHeight}                 index={isActive}                 content={{                     hello: (                         <div id=\\\"my-hello-panel-id\\\">                             <Panel isBorderless>                                 <Text>… darkness my old friend.</Text>                             </Panel>                         </div>                     ),                     me: (                         <div id=\\\"my-itsme-panel-id\\\">                             <Panel isBorderless>                                 <img src=\\\"https://media.giphy.com/media/3oEjI2hdCm6HODQsdq/giphy.gif\\\" />                             </Panel>                         </div>                     ),                     toto: null,                     foo: (                         <div id=\\\"my-foo-panel-id\\\">                             <Panel isBorderless>                                 <Text>                                     Here’s some content you’re never going to                                     see. </Text>                             </Panel>                         </div>                     ),                     count: (                         <div id=\\\"my-count-panel-id\\\">                             <Panel isBorderless>                                 <Text>                                     I learned how to count when I was young... </Text>                             </Panel>                         </div>                     ),                     suffix: (                         <div id=\\\"my-suffix-panel-id\\\">                             <Panel isBorderless>                                 <Text>Example of a trailing pill</Text>                             </Panel>                         </div>                     ),                 }}             />         </>     ); }, []); ```  ```jsx withPartials=\\\"menu,wrapper\\\" <TabListWrapper /> ```  Note how we can use a `` component with a `hasConstantHeight` prop in order to maintain the same height for all the rendered components, so the content won't jump when we switch between the tabs. ## Variants  ### Overflow  You can choose how the TabList will behave when it doesn't have the room to render every tab:  ```jsx withPartials=\\\"menu,wrapper\\\" <TabListWrapper overflow={useKnob('overflow')} /> ```  -   Use the `scroll` prop when overflowing content should scroll horizontally (this is the default behavior) -   Or use the `popover` prop to wrap each overflowing tab into a Popover.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9b70a1ac-4c22-4c0a-a701-7f3e7b8bd05d":{"__data__":"{\"id_\":\"9b70a1ac-4c22-4c0a-a701-7f3e7b8bd05d\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/Badge\",\"title\":\"Badge\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/Badge/badge.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Badge_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/Badge\",\"title\":\"Badge\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/Badge/badge.mdx\"},\"hash\":\"WBqSdVUwCVgwSpqxIvLIoMgNW8Ey1OlMldIJXf8U0wQ=\"},\"NEXT\":{\"nodeId\":\"daaadea3-3a03-42c6-8319-1a72177eba35\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/Badge\",\"title\":\"Badge\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/Badge/badge.mdx\"},\"hash\":\"anBcqBlarw/9agQjZ8C2EPXPw2fdhbQuqeoUao1XIOw=\"}},\"hash\":\"xC8A6RHNqINjZUFgRczJ5CBBTizc7fXt3XsyIyclAs4=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Popover } from '@druids/ui/dialogs/Popover'; import { Button } from '@druids/ui/form/Button'; import { ArrowDownIcon } from '@druids/ui/icons/ArrowDown'; import { TagsIcon } from '@druids/ui/icons/Tags'; import { WatchdogIcon } from '@druids/ui/icons/Watchdog'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { Badge } from '@druids/ui/pills/Badge'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { Title } from '@druids/ui/typography/Title'; import themeColors from '@druids/ui/theme-colors.json'; import { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants';          ### Example  ```jsx name=\\\"Example\\\" <Badge label=\\\"Watchdog\\\" icon={WatchdogIcon} /> ```  ## Usage  ### Dos & Don’ts  -   **Do**                          limit the amount of text inside a Badge. It’s designed to be a concise identifier. -   **Don’t**                          put long phrases or sentences inside a Badge. -   **Don’t**                          use a Badge as a replacement for a ``. The concept of “tag” has a distinct visual presentation throughout Datadog. -   **Do**                            Alert             Warn             OK                    use a `` instead of a Badge when communicating an explicit status — especially one that’s typically expressed with “stoplight” colors. -   **Don’t**                                                                          use a Badge as replacement for a ``. -   **Do**                                             Metrics                          <Popover                 isHoverable                 isPadded                 width={300}                 handle={}             >                 I’m a Popover that contains additional information when hovering                 on the Badge. trigger an action via hover when a Badge provides additional contextual info about another element (like a count next to a text header or label). -   **Don’t**                                             Metrics                          <Popover                 isPadded                 handle={}             >                 I should’ve been triggered on hover instead. hide an action behind a click when a Badge provides additional contextual info about another element (like a count next to a text header or label). Users may attempt to _hover_ a Badge in this context, but they likely won’t expect to click. -   **Do**               <Badge             label=\\\"Proper Contrast\\\"             backgroundColor=\\\"#111\\\"             textColor=\\\"#fff\\\"         />           make sure that custom text and background colors have sufficient contrast (a minimum of 4.5:1 using the WCAG 2.1 AA standard). -   **Don’t**               <Badge             label=\\\"Not Enough Contrast\\\"             backgroundColor=\\\"lightgray\\\"             textColor=\\\"#999\\\"         />           use custom text and background colors without checking their contrast ratios. ## Variants  ### Sizes  There are 4 supported sizes: `xs`, `sm`, `md`, and `lg`  ```jsx isList name=\\\"Size\\\" <Badge label=\\\"Extra small badge\\\" size=\\\"xs\\\" icon={WatchdogIcon} /> <Badge label=\\\"Small badge\\\" size=\\\"sm\\\" icon={WatchdogIcon} /> <Badge label=\\\"Medium badge\\\" icon={WatchdogIcon} /> <Badge label=\\\"Large badge\\\" size=\\\"lg\\\" icon={WatchdogIcon} /> ```  ### Colors  The Badge supports custom background and text color values using `backgroundColor` and `textColor` props  > **Important notes** > > -   If `backgroundColor` is set but `textColor` is not, a light or dark text color will automatically be applied depending on the brightness of `backgroundColor`. > -   `textColor` can’t be used on its own. If `textColor` is set but `backgroundColor` is not, nothing will take effect. > -   Both props accept either a CSS variable or an array of 2 colors, for the light and dark themes, respectively. > -   Although the examples use hardcoded values in practice, you should always create a CSS variable instead of importing from the JSON if at all possible.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"daaadea3-3a03-42c6-8319-1a72177eba35":{"__data__":"{\"id_\":\"daaadea3-3a03-42c6-8319-1a72177eba35\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/Badge\",\"title\":\"Badge\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/Badge/badge.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Badge_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/Badge\",\"title\":\"Badge\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/Badge/badge.mdx\"},\"hash\":\"WBqSdVUwCVgwSpqxIvLIoMgNW8Ey1OlMldIJXf8U0wQ=\"},\"PREVIOUS\":{\"nodeId\":\"9b70a1ac-4c22-4c0a-a701-7f3e7b8bd05d\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/Badge\",\"title\":\"Badge\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/Badge/badge.mdx\"},\"hash\":\"xC8A6RHNqINjZUFgRczJ5CBBTizc7fXt3XsyIyclAs4=\"}},\"hash\":\"anBcqBlarw/9agQjZ8C2EPXPw2fdhbQuqeoUao1XIOw=\",\"text\":\"```jsx isList name=\\\"Colors\\\" <Badge     label=\\\"Blue badge\\\"     icon={WatchdogIcon}     backgroundColor=\\\"darkblue\\\"     textColor=\\\"lightblue\\\" /> <Badge     label=\\\"Pink badge\\\"     icon={WatchdogIcon}     backgroundColor=\\\"var(--ui-interaction-callout)\\\" /> <Badge label=\\\"Green badge\\\" icon={WatchdogIcon} backgroundColor=\\\"#96dda2\\\" /> <Badge     label=\\\"Yellow badge\\\"     icon={WatchdogIcon}     backgroundColor={[         themeColors.underlying['@yellow-500--light'],         themeColors.underlying['@yellow-500--dark']     ]} /> ```  ### Icons  Use the `icon` prop to add any Icon to the left or right of the Badge  ```jsx isList name=\\\"Icon\\\" <Badge label=\\\"Right icon badge\\\" size=\\\"lg\\\" icon={WatchdogIcon} /> <Badge     label=\\\"Left icon badge\\\"     iconPosition=\\\"right\\\"     size=\\\"lg\\\"     icon={WatchdogIcon} /> <Badge label=\\\"No icon badge\\\" size=\\\"lg\\\" /> ```  ### Count  Use the `count`, `maxCount`, and `level` props to use a formatted count value. This will override `label` and custom colors. ```jsx isList name=\\\"Count\\\" <Badge count={100} size=\\\"xs\\\" /> <Badge count={8362} maxCount={10000} size=\\\"xs\\\" /> <Badge count={8362} maxCount={10000} level=\\\"warning\\\" size=\\\"xs\\\" /> <Badge count={8362} maxCount={10000} level=\\\"danger\\\" size=\\\"xs\\\" /> <Badge count={0} size=\\\"xs\\\" /> ```  ### Interaction  Use the `isInteractive` prop to give any Badge a differentiated hover state to indicate that it’s an interaction target. It can open a `` or `` on hover. ```jsx isList name=\\\"Interaction\\\" <Badge label=\\\"Watchdog\\\" isInteractive icon={WatchdogIcon} /> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4be146ef-8932-431b-be2d-bd3d0782dcb5":{"__data__":"{\"id_\":\"4be146ef-8932-431b-be2d-bd3d0782dcb5\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"StatusPill_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"hash\":\"GXFXJzHQw6NVj6s+s1jGYnUX8IPAVgjxKhlPPTtLN3E=\"},\"NEXT\":{\"nodeId\":\"d9cf19cb-4c0a-4e6c-a414-ae0e29fe126b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"hash\":\"k3xQBV9Qm/0yHbaPTiuRNyyz0jzAeFbaaifkpRCTFNY=\"}},\"hash\":\"klB0lgll+AyqI0CxstvvlKrxXT1vtYCQvRh70QbMNB0=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Group } from '@druids/ui/form/Group'; import { ArrowDownIcon } from '@druids/ui/icons/ArrowDown'; import { ArrowUpIcon } from '@druids/ui/icons/ArrowUp'; import { AttentionCircledIcon } from '@druids/ui/icons/AttentionCircled'; import { FlakyTestIcon } from '@druids/ui/icons/FlakyTest'; import { LightningFilledIcon } from '@druids/ui/icons/LightningFilled'; import { LockIcon } from '@druids/ui/icons/Lock'; import { MinusIcon } from '@druids/ui/icons/Minus'; import { PlusIcon } from '@druids/ui/icons/Plus'; import { DottedBackground } from '@druids/ui/internals/DottedBackground'; import { Flex } from '@druids/ui/layout/Flex'; import { FlexItem } from '@druids/ui/layout/FlexItem'; import { ListWithSeparators } from '@druids/ui/layout/ListWithSeparators'; import { ChangePill } from '@druids/ui/pills/ChangePill'; import { HttpStatusPill } from '@druids/ui/pills/HttpStatusPill'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { Text } from '@druids/ui/typography/Text'; import { Table } from '@druids/ui/table/Table'; import { Panel } from '@druids/ui/layout/Panel'; import { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator'; import themeColors from '@druids/ui/theme-colors.json';       404   ### Example  ```jsx isList name=\\\"Base Example\\\" <StatusPill level=\\\"default\\\">StatusPill</StatusPill> <StatusPill level=\\\"success\\\" icon={LightningFilledIcon} /> <StatusPill level=\\\"warning\\\" /> ```  ## Usage  ### Dos & Don’ts  -   **Do**                            <ChangePill                 value=\\\"1,000\\\"                 direction=\\\"up\\\"                 suffix=\\\"%\\\"                 level=\\\"danger\\\"             />                                 use a `` instead of a StatusPill to display color-coded change with a directional indicator. -   **Don’t**                                             1,000%                                           2x                                           1,000%                                           2x                          + 1,000%             – 2x                    use a StatusPill to display color-coded change with a directional indicator. -   **Do**                            200             301             404             503             512             error                              200                                           301                                           404                                           503                                 use an `` instead of a StatusPill to display [HTTP status codes](). Its API automatically maps status codes to colors and provides corresponding descriptions. -   **Do**                                                              Warning                                                            Success                                 include a text representation of the status when an empty (color-only) StatusPill is displayed. -   **Don’t**                                                             display an empty (color-only) StatusPill without an accompanying text representation of the status. Users with color-blindness or partial/no sight won’t be able to interpret it. -   **Do**                            Proper Contrast                    make sure that custom text and background colors have sufficient contrast (a minimum of 4.5:1 using the WCAG 2.1 AA standard). -   **Don’t**                            Not Enough Contrast                    use custom text and background colors without checking their contrast ratios. -   **Do**                                                                                  Lorem ipsum dolor sit amet consectetur, adipisicing elit. Assumenda tempora sed ipsam in nesciunt                                                     use the `hasAutoHeight` prop only when there are no `children` and the pill is displayed as a vertical bar. -   **Don’t**                            A pill                                 use `hasAutoHeight` when there are `children` nor as a label instead of a status marker. ### Custom colors  Sometimes, a StatusPill needs to be colored differently than the `levels` scale. Use the `backgroundColor` and `textColor` props to define custom colors. > **Important notes** > > -   `backgroundColor` takes precedence over `level` if both are set. > -   When `backgroundColor` is used, `isSoft` has no effect. > -   If `backgroundColor` is set but `textColor` is not, a light or dark text color will automatically be applied depending on the brightness of `backgroundColor`. > -   `textColor` can’t be used on its own. If `textColor` is set but `backgroundColor` is not, nothing will take effect.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d9cf19cb-4c0a-4e6c-a414-ae0e29fe126b":{"__data__":"{\"id_\":\"d9cf19cb-4c0a-4e6c-a414-ae0e29fe126b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"StatusPill_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"hash\":\"GXFXJzHQw6NVj6s+s1jGYnUX8IPAVgjxKhlPPTtLN3E=\"},\"PREVIOUS\":{\"nodeId\":\"4be146ef-8932-431b-be2d-bd3d0782dcb5\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"hash\":\"klB0lgll+AyqI0CxstvvlKrxXT1vtYCQvRh70QbMNB0=\"},\"NEXT\":{\"nodeId\":\"0a390851-de64-4884-a94d-1dcddd53815b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"hash\":\"496j5bWqgoFeU8yiH1JdW2zOnmNeEH41jP7s3zRdC7Y=\"}},\"hash\":\"k3xQBV9Qm/0yHbaPTiuRNyyz0jzAeFbaaifkpRCTFNY=\",\"text\":\"If `textColor` is set but `backgroundColor` is not, nothing will take effect. > -   Both props accept either a CSS variable or an array of 2 colors, for the light and dark themes, respectively. > -   Although the examples use hardcoded values in practice, you should always create a CSS variable instead of importing from the JSON if at all possible. ```jsx isList name=\\\"Custom colors\\\" <StatusPill backgroundColor=\\\"var(--ui-interaction-secondary)\\\">Custom bg color from a CSS variable</StatusPill>  <StatusPill backgroundColor={[themeColors.underlying['@yellow-500--light'], themeColors.underlying['@yellow-500--dark']]}>Custom bg color set directly in the light and dark themes</StatusPill>  <StatusPill backgroundColor={[\\\"#efe8ef\\\", \\\"#551734\\\"]} textColor={[\\\"#551734\\\", \\\"#efe8ef\\\"]}>Custom bg and text colors set directly in the light and dark themes</StatusPill> ```  ### Interaction  Use the `isClickable` prop to give any StatusPill a differentiated hover state to indicate that it’s an interaction target. ```jsx isList name=\\\"Interaction\\\" <StatusPill level=\\\"default\\\" isClickable>Default</StatusPill> <StatusPill level=\\\"success\\\" isClickable>Success</StatusPill> <StatusPill level=\\\"warning\\\" isClickable>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isClickable>Danger</StatusPill> ```  ```jsx isList name=\\\"Interaction soft\\\" <StatusPill level=\\\"default\\\" isSoft isClickable>Default</StatusPill> <StatusPill level=\\\"success\\\" isSoft isClickable>Success</StatusPill> <StatusPill level=\\\"warning\\\" isSoft isClickable>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isSoft isClickable>Danger</StatusPill> ```  ```jsx isList name=\\\"Interaction custom\\\" <StatusPill backgroundColor=\\\"var(--ui-interaction-secondary)\\\" isClickable>Custom bg color from a CSS variable</StatusPill>  <StatusPill backgroundColor={[themeColors.underlying['@yellow-500--light'], themeColors.underlying['@yellow-500--dark']]} isClickable>Custom bg color set directly in the light and dark themes</StatusPill>  <StatusPill backgroundColor={[\\\"#efe8ef\\\", \\\"#551734\\\"]} textColor={[\\\"#551734\\\", \\\"#efe8ef\\\"]} isClickable>Custom bg and text colors set directly in the light and dark themes</StatusPill> ```  ### Truncation  By default, StatusPill text is truncated with an ellipsis if it can’t fit horizontally in its container. Use the `hasResponsiveBehavior` prop to automatically add a `` that reveals the truncated text on hover. ```jsx isList name=\\\"Truncation\\\" width=\\\"128\\\" <StatusPill level=\\\"default\\\" hasResponsiveBehavior>Default that overflows</StatusPill> <StatusPill level=\\\"success\\\" hasResponsiveBehavior>Success that overflows</StatusPill> <StatusPill level=\\\"warning\\\" hasResponsiveBehavior>Warning that overflows</StatusPill> <StatusPill level=\\\"danger\\\" hasResponsiveBehavior>Danger that overflows</StatusPill> ```  ## Variants  ### Levels  There are 4 StatusPill `level`s: `danger`, `warning`, `success`, and `default`. ```jsx isList name=\\\"Levels\\\" <StatusPill level=\\\"default\\\">Default</StatusPill> <StatusPill level=\\\"success\\\">Success</StatusPill> <StatusPill level=\\\"warning\\\">Warning</StatusPill> <StatusPill level=\\\"danger\\\">Danger</StatusPill> ```  ### Sizes  StatusPills come in 4 `size`s: `xs`, `sm`, `md`, and `lg`. > Unlike most other DRUIDS components, `xs` is the default size — not `md`. ```jsx isList name=\\\"Sizes\\\" <StatusPill level=\\\"default\\\">Default XS</StatusPill> <StatusPill level=\\\"success\\\" size=\\\"sm\\\">Success SM</StatusPill> <StatusPill level=\\\"warning\\\" size=\\\"md\\\">Warning MD</StatusPill> <StatusPill level=\\\"danger\\\" size=\\\"lg\\\">Danger LG</StatusPill> ```  ### Strength  Use the `isSoft` prop when a StatusPill needs a more subdued appearance. This typically is reserved for situations where the StatusPill is not the primary focus or piece of information in the given context.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0a390851-de64-4884-a94d-1dcddd53815b":{"__data__":"{\"id_\":\"0a390851-de64-4884-a94d-1dcddd53815b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"StatusPill_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"hash\":\"GXFXJzHQw6NVj6s+s1jGYnUX8IPAVgjxKhlPPTtLN3E=\"},\"PREVIOUS\":{\"nodeId\":\"d9cf19cb-4c0a-4e6c-a414-ae0e29fe126b\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/pills/StatusPill\",\"title\":\"StatusPill\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/pills/StatusPill/status-pill.mdx\"},\"hash\":\"k3xQBV9Qm/0yHbaPTiuRNyyz0jzAeFbaaifkpRCTFNY=\"}},\"hash\":\"496j5bWqgoFeU8yiH1JdW2zOnmNeEH41jP7s3zRdC7Y=\",\"text\":\"```jsx isList name=\\\"Strength\\\" <StatusPill level=\\\"default\\\" isSoft>Default</StatusPill> <StatusPill level=\\\"success\\\" isSoft>Success</StatusPill> <StatusPill level=\\\"warning\\\" isSoft>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isSoft>Danger</StatusPill> ```  ### Full-width  The `isFullWidth` prop makes any StatusPill fill its container horizontally. This is ideal for tabular contexts, when a StatusPill appears in the same column of each table row. ```jsx isList name=\\\"Width\\\" width=\\\"200\\\" <StatusPill level=\\\"default\\\" isFullWidth>Default</StatusPill> <StatusPill level=\\\"success\\\" isFullWidth>Success</StatusPill> <StatusPill level=\\\"warning\\\" isFullWidth>Warning</StatusPill> <StatusPill level=\\\"danger\\\" isFullWidth>Danger</StatusPill> ```  ### Icons  Use the `icon` prop to add any DRUIDS icon to the left of a StatusPill’s text. If there’s no text, the StatusPill will be square. ```jsx isList name=\\\"Icons\\\" <StatusPill level=\\\"success\\\" icon={LightningFilledIcon}>Live</StatusPill> <StatusPill level=\\\"success\\\" icon={LightningFilledIcon} /> <StatusPill level=\\\"warning\\\" icon={FlakyTestIcon} size=\\\"sm\\\" /> <StatusPill level=\\\"danger\\\" icon={AttentionCircledIcon} size=\\\"md\\\" /> <StatusPill level=\\\"default\\\" icon={LockIcon} size=\\\"lg\\\" /> ```  ### Empty  An empty StatusPill can be displayed in one of two ways. To render either, simply don’t include any `children` content. #### Vertical bar  ```jsx isList name=\\\"Vertical bar\\\" <StatusPill level=\\\"default\\\" /> <StatusPill level=\\\"success\\\" /> <StatusPill level=\\\"warning\\\" /> <StatusPill level=\\\"danger\\\" /> ```  #### Circle  Use `isCircle` to render an empty circle instead. ```jsx isList name=\\\"Vertical bar\\\" <StatusPill level=\\\"default\\\" isCircle /> <StatusPill level=\\\"success\\\" isCircle /> <StatusPill level=\\\"warning\\\" isCircle /> <StatusPill level=\\\"danger\\\" isCircle /> ```  ### Count  Use the `count` prop to prepend a number to a StatusPill  ```jsx isList name=\\\"Count\\\" <StatusPill level=\\\"default\\\" count=\\\"15\\\">Default</StatusPill> <StatusPill level=\\\"success\\\" count=\\\"1\\\">Success</StatusPill> <StatusPill level=\\\"warning\\\" count=\\\"9\\\">Warning</StatusPill> <StatusPill level=\\\"danger\\\" count=\\\"50\\\">Danger</StatusPill> ```  ### Auto height  Use the `hasAutoHeight` prop in cases where the StatusPill needs to stretch vertically to fill the available context. ```jsx partial=\\\"data\\\" isHidden isMemoized const data = [     { id: 0, foo: 'Success', baz: true, bar: 1200 },     { id: 1, foo: 'Warning', baz: false, bar: 5200 }, ]; ```  ```jsx id=\\\"auto-height-example\\\" withPartials=\\\"data\\\" <Table     data={data}     columns={React.useMemo(         () => [             {                 id: 'status',                 accessor: 'baz',                 Cell: ({ value }) => (                     <StatusPill                         hasAutoHeight                         level={                             value                                 ? 'success'                                 : value !== undefined                                 ? 'warning'                                 : 'danger'                         }                     />                 ),                 width: 'min-content',                 cellProps: { rowSpan: 2 },                 verticalAlign: 'stretch',             },             { Header: 'Season', accessor: 'foo' },             { Header: 'Avg. Temp', accessor: 'bar', type: 'numeric' },             {                 id: 'second-floor',                 type: 'rowGroup',                 columns: [                     {                         id: 'description',                         Cell: () => 'Lorem ipsum dolor sit amet.',                         cellProps: { colSpan: 2 },                     },                 ],             },         ],         [],     )} /> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f1fea9ea-0d47-4312-93d0-4db90a27c007":{"__data__":"{\"id_\":\"f1fea9ea-0d47-4312-93d0-4db90a27c007\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/table/Table\",\"title\":\"Table\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/table/Table/table.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Table_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/table/Table\",\"title\":\"Table\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/table/Table/table.mdx\"},\"hash\":\"1jRpi9jmZSXorsbJz5+BvI7efqx3gMvbOPL82FmUG0Y=\"},\"NEXT\":{\"nodeId\":\"1dc3bb56-efad-49f4-9131-b7ff4e728e12\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/table/Table\",\"title\":\"Table\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/table/Table/table.mdx\"},\"hash\":\"Hc+nIqBtUET6+l8Dt5Vv94dV2H8a58e0IEBKoLJqNNE=\"}},\"hash\":\"v7LNCwpPM3YcmrZhJveYVcwVWBfl78KucxSqqfwBEqU=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Checkbox } from '@druids/ui/form/Checkbox'; import { Code } from '@druids/ui/typography/Code'; import { FieldSet } from '@druids/ui/form/FieldSet'; import { InputText } from '@druids/ui/form/InputText'; import { RadioButtons } from '@druids/ui/form/RadioButtons'; import { AttentionIcon } from '@druids/ui/icons/Attention'; import { CancelIcon } from '@druids/ui/icons/Cancel'; import { CheckIcon } from '@druids/ui/icons/Check'; import { ExternalLinkIcon } from '@druids/ui/icons/ExternalLink'; import { PencilIcon } from '@druids/ui/icons/Pencil'; import { RefreshIcon } from '@druids/ui/icons/Refresh'; import { TrashIcon } from '@druids/ui/icons/Trash'; import { VolumeMuteIcon } from '@druids/ui/icons/VolumeMute'; import { Grid } from '@druids/ui/layout/Grid'; import { Flex } from '@druids/ui/layout/Flex'; import { Panel } from '@druids/ui/layout/Panel'; import { PercentBar } from '@druids/ui/measures/PercentBar'; import { HighlightKeywords } from '@druids/ui/misc/HighlightKeywords'; import { IntegrationLogo } from '@druids/ui/misc/IntegrationLogo'; import { Table } from '@druids/ui/table/Table'; import {     compareStrings,     compareNumbers, } from '@druids/ui/table/Table/plugin-hooks/use-sorting'; import { Link } from '@druids/ui/nav/Link'; import { Text } from '@druids/ui/typography/Text'; import { TextPlaceholder } from '@druids/ui/typography/TextPlaceholder'; import { Title } from '@druids/ui/typography/Title'; import { PopoverMenuItem } from '@druids/ui/dialogs/PopoverMenuItem'; import { StatusPill } from '@druids/ui/pills/StatusPill'; import { TableExpander } from '@druids/ui/table/Table/TableExpander'; import { useCopyAction } from '@druids/ui/lib/action/use-copy-action';  import ColumnsAndDataSection from '@druids/ui/table/Table/docs/columns-and-data.section.mdx'; import CSSVariablesAPI from '@druids/ui/table/Table/docs/css-variables-api.section.mdx'; import SummarySection from '@druids/ui/table/Table/docs/summary.section.mdx'; import SortingSection from '@druids/ui/table/Table/docs/sorting.section.mdx'; import ManualStateSection from '@druids/ui/table/Table/docs/manual-state.section.mdx'; import SelectableRowsSection from '@druids/ui/table/Table/docs/selectable-rows.section.mdx'; import EmptyStateSection from '@druids/ui/table/Table/docs/empty-state.section.mdx'; import ExtraColumnsSection from '@druids/ui/table/Table/docs/extra-columns.section.mdx'; import SubComponentSection from '@druids/ui/table/Table/docs/sub-component.section.mdx'; import GlobalFilterSection from '@druids/ui/table/Table/docs/global-filter.section.mdx';  export * from '@druids/ui/table/Table/docs/global-filter.section.mdx'; import MenuSection from '@druids/ui/table/Table/docs/menu.section.mdx';  export * from '@druids/ui/table/Table/docs/menu.section.mdx'; import ColumnActionsSection from '@druids/ui/table/Table/docs/column-actions.section.mdx'; import PaginationSection from '@druids/ui/table/Table/docs/pagination.section.mdx'; import PlaceholdersSection from '@druids/ui/table/Table/docs/placeholders.section.mdx';  export * from '@druids/ui/table/Table/docs/placeholders.section.mdx'; import RowActionsSection from '@druids/ui/table/Table/docs/row-actions.section.mdx';  export * from '@druids/ui/table/Table/docs/row-actions.section.mdx'; import PresentationSection from '@druids/ui/table/Table/docs/presentation.section.mdx'; import ActionTraySection from '@druids/ui/table/Table/docs/action-tray.section.mdx';  export * from '@druids/ui/table/Table/docs/action-tray.section.mdx'; import ComplexExampleSection from '@druids/ui/table/Table/docs/complex-example.section.mdx';  export * from '@druids/ui/table/Table/docs/complex-example.section.mdx'; import PerformanceSection from '@druids/ui/table/Table/docs/performance.section.mdx'; import { useHighlightedRows } from '@druids/ui/table/Table/shared/use-highlighted-rows'; import { useSlicedColumns } from '@druids/ui/table/Table/shared/use-sliced-columns';  export * from '@druids/ui/table/Table/docs/performance.section.mdx'; import ExtraElementsSection from '@druids/ui/table/Table/docs/extra-elements.section.mdx'; import RowsAndCellsProps from '@druids/ui/table/Table/docs/rows-and-cells-props.section.mdx'; import MiscSections from '@druids/ui/table/Table/docs/misc.section.mdx'; import HiddenColumnsSection from '@druids/ui/table/Table/docs/hidden-columns.section.mdx'; import ResizableColumnsSection from '@druids/ui/table/Table/docs/resizable-columns.section.mdx'; import AdvancedSection from '@druids/ui/table/Table/docs/advanced.section.mdx'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                <Table             columns={[                 { Header: 'Season', accessor: 'foo' },                 { Header: 'Avg.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1dc3bb56-efad-49f4-9131-b7ff4e728e12":{"__data__":"{\"id_\":\"1dc3bb56-efad-49f4-9131-b7ff4e728e12\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/table/Table\",\"title\":\"Table\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/table/Table/table.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Table_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/table/Table\",\"title\":\"Table\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/table/Table/table.mdx\"},\"hash\":\"1jRpi9jmZSXorsbJz5+BvI7efqx3gMvbOPL82FmUG0Y=\"},\"PREVIOUS\":{\"nodeId\":\"f1fea9ea-0d47-4312-93d0-4db90a27c007\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/table/Table\",\"title\":\"Table\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/table/Table/table.mdx\"},\"hash\":\"v7LNCwpPM3YcmrZhJveYVcwVWBfl78KucxSqqfwBEqU=\"}},\"hash\":\"Hc+nIqBtUET6+l8Dt5Vv94dV2H8a58e0IEBKoLJqNNE=\",\"text\":\"temp', accessor: 'bar', type: 'numeric' },             ]}             data={[                 { id: 0, foo: 'Winter', bar: 30, baz: true },                 { id: 1, foo: 'Spring', bar: 63, baz: false },                 { id: 2, foo: 'Summer', bar: 92, baz: true },                 { id: 3, foo: 'Fall', bar: 72 },             ]}         />        ### Example  ```jsx partial=\\\"columns\\\" isHidden isMemoized const columns = [     { Header: 'Season', accessor: 'foo' },     { Header: 'Avg. temp', accessor: 'bar', type: 'numeric' }, ]; ```  ```jsx partial=\\\"data\\\" isHidden isMemoized const data = [     { id: 0, foo: 'Winter', bar: 30, baz: true },     { id: 1, foo: 'Spring', bar: 63, baz: false },     { id: 2, foo: 'Summer', bar: 92, baz: true },     { id: 3, foo: 'Fall', bar: 72 }, ]; ```  ```jsx partial=\\\"moreData\\\" isHidden const getMoreData = (count, template = (value) => `whatever ${value}`) =>     Array(Math.min(count, 10000)) // To prevent occasional freeze if too high         .fill({})         .map((item, index) => ({             id: index,             foo: template(Math.random()),             bar: index + 1,         })); ```  ```jsx name=\\\"Example\\\" withPartials=\\\"columns,data\\\" <Table columns={columns} data={data} /> ```  ## Variants  ### Complex    ## Columns API    ## CSS Variables API    ## Variants  ### Resizing    ### Custom header & footer    ### Summary element    ### Search & filter inside table    ### Table settings menu    ### Toggling columns    ### Pagination    ### Sorting    ### Column header actions    ### Loading with placeholders    ### Empty state    ### Styling    ### Editing columns    ### Row actions    ### Selectable rows    ### Action tray    ### Sub component    ### Adding Extra Props    ### Manual state management    ### Tweaking performance    ### Miscellaneous    ### Advanced\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"48d1d0bd-6c5a-4944-a153-b798fdc79af8":{"__data__":"{\"id_\":\"48d1d0bd-6c5a-4944-a153-b798fdc79af8\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Code_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"hash\":\"LzgMi0fMoueq9TDKxolsJv7LOwUhJT1ClNinkCVYZic=\"},\"NEXT\":{\"nodeId\":\"0fa965a5-7e53-4358-888c-77c3026207dd\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"hash\":\"VwZgkRZG6R6wgTuzFtCKJCTYzElzpURhqHlCe8jZUmI=\"}},\"hash\":\"6ztDoc8PI7S5ubl0fZuBOCNCV1hELt/wpVXTc01nyUk=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Button } from '@druids/ui/form/Button'; import { Code } from '@druids/ui/typography/Code'; import { ToggleButtons } from '@druids/ui/form/ToggleButtons'; import { KeyboardShortcut } from '@druids/ui/typography/KeyboardShortcut'; import React from 'react'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';                {`{     \\\"name\\\": \\\"dogweb\\\",     \\\"version\\\": \\\"0.0.1\\\",     \\\"description\\\": \\\"Dogweb frontend\\\",     \\\"private\\\": true }`}        ### Examples  export const Sample = () => {     const [value, setValue] = React.useState('json');     const samples = {         json: {             label: 'JSON',             content: `{     \\\"name\\\": \\\"dogweb\\\",     \\\"version\\\": \\\"0.0.1\\\",     \\\"description\\\": \\\"Dogweb frontend - To update this file, refer to the wiki\\\",     \\\"private\\\": true }`,         },         sql: {             label: 'SQL',             content:                 'select h.name from vs.host_alias ha join vs.host h on ha.host_id = h.id where ha.org_id = ? and ha.name = ? vs.host h and  ha.host_id = h.id where ha.org_id = ? and ha.name = ?',         },         typescript: {             label: 'TypeScript',             content: `interface Props {     name: string;     amount: number; } function yourComponent(props: Props) {     const { x, y } = useMousePosition();     return (                      x: {x}, y: {y}              ); }`,         },         yaml: {             label: 'YAML',             content: `# Log section - type: file path: /var/log/pg_log/pg.log log_processing_rules:   - type: multi_line     pattern: \\\\\\\\d{4}\\\\\\\\-(0?[1-9]|1[012])\\\\\\\\-(0?[1-9]|[12][0-9]|3[01]) `,         },     };     const options = Object.keys(samples).map((s) => {         return { label: samples[s].label, value: s };     });     return (         <>             <ToggleButtons                 options={options}                 isTitleCased={false}                 value={value}                 onChange={setValue}                 marginBottom=\\\"sm\\\"             />             {samples[value].content}              ); };    ## Usage  ```jsx partial=\\\"Code\\\" <Code language=\\\"sql\\\">     {`select h.name from vs.host_alias ha join vs.host h on ha.host_id = h.id where ha.org_id = ? and ha.name = ? vs.host h and  ha.host_id = h.id where ha.org_id = ? and ha.name = ?`} </Code> ```  #### Supported languages  Supported languages are defined by the `LANGUAGES` union type. They are:  -   Bash (`'bash'`) -   BrightScript (`'brightscript'`) -   C# (`'csharp'`) -   C++ (`'cpp'`) -   CSS (`'css'`) -   CSV (`'csv'`) -   Dart (`'dart'`) -   DIFF (`'diff'`) -   Docker (`'docker'`) -   Go (`'go'`) -   GraphQL (`'graphql'`) -   HTML (`'html'`) -   INI (`'ini'`) -   Java (`'java'`) -   JavaScript (`'javascript'`) -   JSON (`'json'`) -   JSX (`'jsx'`) -   Kotlin (`'kotlin'`) -   Log (`'log'`) -   Markdown (`'markdown'`) -   PHP (`'php'`) -   Puppet (`'puppet'`) -   Python (`'python'`) -   Python Traceback (`'python-traceback'`) -   Ruby (`'ruby'`) -   SQL (`'sql'`) -   SVG (`'svg'`) -   Swift (`'swift'`) -   Objective-C (`'objectivec'`) -   TypeScript (`'typescript'`) -   XML (`'xml'`) -   YAML (`'yaml'`)  ## Variants  ### Sizes  Code supports 3 different sizes: `sm` `md` and `lg`. Default `size` is set to `md`.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0fa965a5-7e53-4358-888c-77c3026207dd":{"__data__":"{\"id_\":\"0fa965a5-7e53-4358-888c-77c3026207dd\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Code_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"hash\":\"LzgMi0fMoueq9TDKxolsJv7LOwUhJT1ClNinkCVYZic=\"},\"PREVIOUS\":{\"nodeId\":\"48d1d0bd-6c5a-4944-a153-b798fdc79af8\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"hash\":\"6ztDoc8PI7S5ubl0fZuBOCNCV1hELt/wpVXTc01nyUk=\"},\"NEXT\":{\"nodeId\":\"0ae3f01b-e6f9-4e66-a4b5-65fc1f3a75a2\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"hash\":\"sKHYLKx9ocLO1XGsgP2YlConJA1KHCbn0bVKznKPKLs=\"}},\"hash\":\"VwZgkRZG6R6wgTuzFtCKJCTYzElzpURhqHlCe8jZUmI=\",\"text\":\"Default `size` is set to `md`. ```jsx name=\\\"Sizes\\\" <Code size=\\\"sm\\\">     Code block example in \\\"sm\\\" size </Code> <Code size=\\\"md\\\" marginTop=\\\"lg\\\">     Code block example in \\\"md\\\" (default) size </Code> <Code size=\\\"lg\\\" marginTop=\\\"lg\\\">     Code block example in \\\"lg\\\" size </Code> ```  ### Editable code  A Code block can be made editable if the `onChange` prop is set. This works with every supported language. ```jsx partial=\\\"EditableCode\\\" name=\\\"EditableCode\\\" isMemoized const EditableCode = ({ children, ...props }) => {     const [text, setText] = React.useState(children);     return (         <Code {...props} onChange={setText}>             {text}         </Code>     ); }; ```  ### Validation  An editable Code block can have ``-style validation. ```jsx withPartials=\\\"EditableCode\\\" name=\\\"Validation\\\" <EditableCode     language=\\\"json\\\"     validationMessage=\\\"This is valid\\\"     validationLevel=\\\"success\\\"     onSubmit={() => alert('success!')} >{`{     \\\"am_I_editable\\\": true }`}</EditableCode> ```  ### Width  A Code block is full-width by default. Set `isFullWidth={false}` to make it fit to its content. ```jsx width=\\\"500\\\" name=\\\"Width\\\" <Code isFullWidth={false} language=\\\"json\\\">{`{     \\\"isFullWidth\\\": false }`}</Code> ```  ### Naked  The border and background of a Code block can be removed with the `isNaked` prop. This is used by the editable Code variant. ```jsx name=\\\"Naked\\\" <Code isNaked language=\\\"json\\\">{`{     \\\"isNaked\\\": true }`}</Code> ```  ### Line numbers and highlights  A Code block can show line numbers with the `hasLineNumbers` prop and highlight one or more specific lines with the `markers` prop. ```jsx isFullWidth name=\\\"Line numbers and highlights\\\" <Code     language=\\\"typescript\\\"     hasLineNumbers     markers={[7, 8, 9, 10, 11]} >{`interface Props {     name: string;     amount: number; } function yourComponent(props: Props) {     const { x, y } = useMousePosition();     return (         <div>             x: {x}, y: {y}         </div>     ); }`}</Code> ```  We can highlight specific columns inside the highlighted lines. ```jsx isFullWidth name=\\\"Line numbers and highlights\\\" <Code     language=\\\"typescript\\\"     {...useKnobs([         {             hasLineNumbers: true,             doesHighlightWholeLines: {                 type: 'radiobuttons',                 defaultValue: undefined,                 options: [undefined, true, false],             },         },     ])}     markers={[         {             line: 5,             column: [                 { start: 4, end: 4 },                 { start: 7, end: 9 },                 { start: 21, end: 28 },             ],         },         {             line: 6,             column: [                 { start: 4, end: 14 },                 { start: 4, end: 25 },             ],         },         { line: 9, column: 5 },         { line: 10, column: [{ start: 9, end: 13 }] },         { line: 11, column: [{ start: 12, end: 999 }] },     ]} >{`interface Props {     name: string;     amount: number; } // We can highlight multiple columns per line // Overlapping highlights are only highlighted once function yourComponent(props: Props) {     const { x, y } = useMousePosition();     return (         <div>             x: {x}, y: {y}         </div>     ); }`}</Code> ```  #### Marker override options  Sometimes we might want to enhance the highlighted code even more, for example we could want to add tooltips over certain nodes, or over the marked spans. To do so we can supply the `as` prop to either the line marker, or a column marker:  ```jsx name=\\\"Marker Overrides\\\" width=\\\"450\\\" // --- MarkerTooltip const MarkerTooltip = React.useCallback(     ({ content, 'data-line-code': dataLineCode, ...props }) => {         const ref = React.useRef(null);         return (             <Tooltip                 content={`${content}.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0ae3f01b-e6f9-4e66-a4b5-65fc1f3a75a2":{"__data__":"{\"id_\":\"0ae3f01b-e6f9-4e66-a4b5-65fc1f3a75a2\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Code_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"hash\":\"LzgMi0fMoueq9TDKxolsJv7LOwUhJT1ClNinkCVYZic=\"},\"PREVIOUS\":{\"nodeId\":\"0fa965a5-7e53-4358-888c-77c3026207dd\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Code\",\"title\":\"Code\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Code/code.mdx\"},\"hash\":\"VwZgkRZG6R6wgTuzFtCKJCTYzElzpURhqHlCe8jZUmI=\"}},\"hash\":\"sKHYLKx9ocLO1XGsgP2YlConJA1KHCbn0bVKznKPKLs=\",\"text\":\"Faulty code: ${dataLineCode}`}                 reference={ref}             >                 <span ref={ref} {...props} />             </Tooltip>         );     },     [], ); // --- return (     <Code         language=\\\"typescript\\\"         markers={[             {                 line: 2,                 column: [                     {                         start: 33,                         end: 44,                         level: useKnob('level', [                             'danger',                             'warning',                             'success',                             undefined,                         ]),                         as: (                             <MarkerTooltip                                 content={`Type '\\\"Watermelon\\\"' is not assignable to type 'Fruit'. ts(2322)`}                             />                         ),                     },                 ],             },         ]}     >         {`type Fruit = 'Apple' | 'Tomato';\\\\nexport const basket: Fruit[] = ['Watermelon'];`}     </Code> ); ```  > Note that the markers also accept the `level` prop, allowing styling errors and warnings from the box. > **Warning** > Also note that inside editable code interactive components like `` won't be interactive due to the way the editable `` is implemented: it would have a textarea over the content area, preventing any mouse events from going to the interactive elements added to the highlighted code. ### Padding  A Code block’s padding can be changed to any `size` from the DRUIDS spacing scale. ```jsx isFullWidth name=\\\"Padding\\\" <Code padding=\\\"lg\\\" language=\\\"json\\\">{`{     \\\"padding\\\": \\\"lg\\\" }`}</Code> ```  ### Copy and paste  When a Code block contains only text, a `` appears by default in the top-right corner. It can be hidden with `hasCopyButton={false}`. When a Code block contains rich content, the `` is hidden unless we pass an explicit value to be copied via the `copyValue` prop. ```jsx name=\\\"Copy and paste\\\" <Code hasCopyButton={false} language=\\\"json\\\">{`{     \\\"If we don’t see the CopyButton\\\": \\\"hasCopyButton={false}\\\" }`}</Code> ```  ```jsx name=\\\"CopyValue\\\" <Code copyValue=\\\"Just the text\\\" language=\\\"json\\\">{`{     \\\"More than just\\\": \\\"<strong>text</stong>\\\" }`}</Code> ```  We can have a callback when the copy button is clicked. ```jsx name=\\\"Copy and paste callback\\\" <Code     onCopy={() => {         console.log('Text has been copied');     }} >     Callback when text is copied </Code> ```  ### More  Code is built on top of react-simple-code-editor and accepts most of its props. It also accepts props from ``, which means it’s possible to redefine the number of spaces for the  key, add event handles, etc. ```jsx withPartials=\\\"EditableCode\\\" name=\\\"More\\\" <EditableCode     tabSize={2}     onFocus={() => console.log('focused!')}     language=\\\"json\\\" >{`{     \\\"onFocus\\\": true }`}</EditableCode> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"792bb702-bf11-43cd-841b-f6610248182f":{"__data__":"{\"id_\":\"792bb702-bf11-43cd-841b-f6610248182f\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Text\",\"title\":\"Text\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Text/text.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Text_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Text\",\"title\":\"Text\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Text/text.mdx\"},\"hash\":\"sGNCW3BLmpv/BY2bvVrtXEAw869LuZwu0t7FkNvwRU4=\"},\"NEXT\":{\"nodeId\":\"c8113c3b-4764-460a-a3a2-32c6195795bf\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Text\",\"title\":\"Text\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Text/text.mdx\"},\"hash\":\"BtwbaMRZx61JlbUoratBgoUwpzhc1Op/SFDL54VIHv0=\"}},\"hash\":\"MC/7hS/ol7t6U80hwW+sIwtilCwdGR9+SgEnJ8hRBp4=\",\"text\":\"--- # This is a DRUIDS to Docs Builder specific template, do not reuse it outside of DRUIDS templateName: DruidsComponent ---  import { Text } from '@druids/ui/typography/Text'; import { Flex } from '@druids/ui/layout/Flex'; import { DottedBackground } from '@druids/ui/internals/DottedBackground';       Regular text   ### Example  export const knobsSetup = {     variant: {         previewStyle: ({ variant }) =>             variant === 'knockout'                 ? { background: 'var(--ui-background-shade)' }                 : {},     }, };  ```jsx name=\\\"Example\\\" <Text     {...usePermutations({         regular: {},         isItalic: true,         isMonospace: true,     })}     {...useKnobs(['size', 'variant', 'weight', knobsSetup])} >     {useKnob('children', '', {         fallback: ({ isItalic, isMonospace }) =>             `${                 isItalic ? 'Italic' : isMonospace ? 'Monospace' : 'Regular'             } text`,     })} </Text> ```  ## Variants  ### Sizes  There are 7 different Text sizes plus an ability to use an `inherit` for the size from a CSS context (otherwise with an undefined `size` the Text component would get its size from a `React.Context` of a wrapping `` or would fall back to a `md`). ```jsx name=\\\"Sizes\\\" permutations=\\\"size\\\" <Text     {...useKnobs([         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ size }) =>             ({                 inherit: 'Inherited',                 xxl: 'Extra extra large',                 xl: 'Extra large',                 lg: 'Large',                 md: 'Medium (default)',                 sm: 'Small',                 xs: 'Extra small',                 xxs: 'Extra extra small',             }[size]),     })} </Text> ```  ### Styles  There are 8 supported styles. > Note that the `knockout` variant is the same for light & dark modes, so we need to always provide a contrasting background for it. ```jsx name=\\\"Styles\\\" permutations=\\\"variant\\\" <Text     {...useKnobs([         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ variant }) =>             ({                 default: 'Primary (default)',                 secondary: 'Secondary',                 tertiary: 'Tertiary',                 knockout: 'Knockout',                 success: 'Success',                 warning: 'Warning',                 danger: 'Danger',                 disabled: 'Disabled',             }[variant]),     })} </Text> ```  ### Weights  There are 3 supported weights. Note that `thin` should be rarely used outside of ``. > Currently, the `bold` weight of Text component is rendered in `semibold` since it provides better visual balance compared to true `bold`. There are few places in the app that uses true `bold` weight, but the Text component does not support true `bold` as of now. ```jsx name=\\\"Weights\\\" permutations=\\\"weight\\\" <Text     {...useKnobs([         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ weight }) =>             `${                 {                     normal: 'Normal (default)',                     bold: 'Bold',                     thin: 'Thin',                 }[weight]             } text`,     })} </Text> ```  ### Transforms  Text exposes props to control the 3 most common `text-transform` CSS properties, as well as an ability to remove it via a `none` value. ```jsx name=\\\"Transforms\\\" permutations=\\\"textTransform\\\" <Text     {...useKnobs([         'textTransform',         'size',         'variant',         'weight',         'isItalic',         'isMonospace',         knobsSetup,     ])} >     {useKnob('children', '', {         fallback: ({ textTransform }) =>             `${                 {                     none: 'Default',                     uppercase: 'Uppercased',                     capitalize: 'Capitalized',                     lowercase: 'Lowercased',                 }[textTransform]             } text`,     })} </Text> ```  ### Align  ```jsx name=\\\"Align\\\" isList isFullWidth <Flex direction=\\\"column\\\" isFullWidth alignItems=\\\"stretch\\\">     <Text as=\\\"div\\\" align=\\\"center\\\">         Centered text.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c8113c3b-4764-460a-a3a2-32c6195795bf":{"__data__":"{\"id_\":\"c8113c3b-4764-460a-a3a2-32c6195795bf\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Text\",\"title\":\"Text\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Text/text.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Text_content\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Text\",\"title\":\"Text\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Text/text.mdx\"},\"hash\":\"sGNCW3BLmpv/BY2bvVrtXEAw869LuZwu0t7FkNvwRU4=\"},\"PREVIOUS\":{\"nodeId\":\"792bb702-bf11-43cd-841b-f6610248182f\",\"metadata\":{\"url\":\"https://druids.us1.prod.dog/components/typography/Text\",\"title\":\"Text\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/packages-to-migrate/druids-ui/typography/Text/text.mdx\"},\"hash\":\"MC/7hS/ol7t6U80hwW+sIwtilCwdGR9+SgEnJ8hRBp4=\"}},\"hash\":\"BtwbaMRZx61JlbUoratBgoUwpzhc1Op/SFDL54VIHv0=\",\"text\":\"Curae consectetur fermentum ut odio blandit cras. </Text>     <Text as=\\\"div\\\" align=\\\"right\\\">         Right aligned text. Curae consectetur fermentum ut odio blandit cras. </Text> </Flex> ```  ### Ellipsis  Text with the `hasEllipsis` prop must be placed inside a container with an explicit `width` for the truncation to take effect. ```jsx name=\\\"Ellipsis\\\" <Text hasEllipsis>     I’m Text with an ellipsis. Resize me to see the truncation in action. </Text> ```  ### Overflow-wrap (word-break)  If we want to control how text wraps inside a narrow context, we can use an `overflowWrap` prop. ```jsx partial=\\\"wrapperStyle\\\" isHidden // Making it so the difference between `anywhere` // and `break-word` would be visible. const wrapperStyle = {     display: 'block',     minWidth: '50px',     width: 'min-content',     maxWidth: '100%',     overflow: 'auto', }; ```  ```jsx name=\\\"OverflowWrap\\\" permutations=\\\"overflowWrap\\\" width=\\\"240\\\" withPartials=\\\"wrapperStyle\\\" <Text overflowWrap={useKnob('overflowWrap')} style={wrapperStyle}>     {useKnob('children', '', {         fallback: ({ overflowWrap }) =>             `A text containing a veryveryveryveryveryveryveryveryveryveryvery long word with “${overflowWrap}” overflow-wrap.`,     })} </Text> ```  > **Warning** > The difference between `anywhere` and `break-word` can be seen only in very specific contexts where the `min-content` of the element matters — `anywhere` makes the element shrink, while `break-word` does not. See an MDN entry for `overflowWrap` for more details. ### Inheritance  If a `color`, `text-align`, or `font-weight` rule needs to be inherited from a Text’s parent or ancestor, use the `shouldInherit` prop. It can be combined with the `align`, `variant`, and `weight` props if a specific part of the inheritance needs to be overridden. ```jsx name=\\\"Inheritance\\\" <div style={{ color: 'var(--ui-status-success-contrast)', fontWeight: 'bold' }}>     <Text shouldInherit>         I’m Text that’s inheriting color and weight from my parent div. </Text>     <br />     <br />     <Text shouldInherit size=\\\"xl\\\" weight=\\\"normal\\\">         I’m inheriting color, too — but I’m defining my own size and weight. </Text> </div> ```  ### Margins  Text accepts `margin` props directly. It’s not necessary to wrap it in a `` component. (Margins will only have an effect if the specific instance of the Text component has a compatible CSS `display` property. )  ```jsx name=\\\"Margins\\\" <Flex alignItems=\\\"center\\\">     <Text marginBottom=\\\"sm\\\">I have a SMALL marginBottom.</Text>     <Text marginX=\\\"md\\\">I have a MEDIUM marginX.</Text>     <Text marginTop=\\\"sm\\\">I have a SMALL marginTop.</Text> </Flex> ```\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"71253a24-478d-41f8-b4cd-faf6a3bf94e5":{"__data__":"{\"id_\":\"71253a24-478d-41f8-b4cd-faf6a3bf94e5\",\"metadata\":{\"url\":\"\",\"title\":\"about-druids\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageAboutDruids/about-druids.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"about-druids_content\",\"metadata\":{\"url\":\"\",\"title\":\"about-druids\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageAboutDruids/about-druids.mdx\"},\"hash\":\"j+XjnAhbcKQBDcHVs+P7pp5P673me6Fvg+kPUqcDxM8=\"},\"NEXT\":{\"nodeId\":\"488fc67d-619c-44aa-a973-304961900084\",\"metadata\":{\"url\":\"\",\"title\":\"about-druids\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageAboutDruids/about-druids.mdx\"},\"hash\":\"pr4SvF+k5tyDU+G2DZ08eVV9IMhbJigisXdUcACaYnY=\"}},\"hash\":\"uD4QTCdtDvZT4lKDtylHMms9m3Ug5J3UvX3zpbdnuoI=\",\"text\":\"import { Title } from '@druids/styleguide-builder/components/ui/Title'; import { VisualExample } from '@druids/styleguide-builder/components/ui/VisualExample'; import imgDruidsLoupeDark from '@druids/styleguide/components/foundations/PageTipsAndTricks/images/druids-loupe_dark.png'; import imgDruidsLoupeLight from '@druids/styleguide/components/foundations/PageTipsAndTricks/images/druids-loupe_light.png'; import { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage'; import { Link } from '@druids/styleguide/lib/routing/Link'; import { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants'; import { InlineCode } from '@druids/ui/typography/InlineCode'; import * as React from 'react';  ## What is DRUIDS? DRUIDS stands for “Datadog Reusable User Interface Design System. ” It’s the primary UI foundation of the Datadog platform as well as numerous internal apps for our company. (Is the name redundant? Yes! Was the acronym — and the accompanying logo — too awesome to pass up? Also yes! )  Its goals are to help designers and developers throughout Datadog build products and features that feel familiar to customers, interconnected, and highly usable — and to do it all efficiently. ---  ## Is it available to use externally? **As of now, DRUIDS is for Datadog internal use only.** We’ve made the docs public to share our approach to building UI at scale, to show how we try to make naturally complex workflows feel as user-friendly as possible, and to highlight ways we keep DRUIDS an integral part of the daily workflow for hundreds of people throughout Datadog. Read more on the Datadog engineering blog! ---  ## Internal tips and tricks  A design system isn’t much without designers and developers actually _using_ it to build features and products for end users. To that end, we’ve built a bunch of helpful tooling into DRUIDS to facilitate ease of use and encourage high quality contributions. These include:  ### DRUIDS Loupe  Datadog employees can press a keyboard shortcut on any Datadog page to see every DRUIDS component. Hovering discloses links to view it in source code, design tools, and the docs. <VisualExample     src={[imgDruidsLoupeLight, imgDruidsLoupeDark]}     imageWidth={583}     hasImageShadow />  ### Contribution guidelines  DRUIDS always should be evolving as the needs of Datadog and our customers evolve. It’s important that contributions back to the design system by developers and designers throughout the company have a clear set of expectations while simultaneously feeling lightweight. We publish a set of contribution guidelines, which we ask internal contributors to follow. They’re mostly common sense, and the goal isn’t to be intimidating or inefficient. They’re simply a way to reinforce best practices from the ground up. #### 🧬 Core considerations  It should be  -   Easy for developers to implement -   Easy for designers to understand -   Flexible enough to integrate with our other components -   Resilient enough to be modified in the future -   Rendered in a way that’s completely independent and free from external dependencies  ---  #### 🏗 Structure and formatting  -   It should not import dependencies or styles from anywhere outside DRUIDS. -   It should be written in TypeScript. -   It should have a well-thought-out name. -   We strive for names that are generic enough to be intuitive,         specific enough to eliminate ambiguity, and flexible enough to         account for future modifications. -   A good real-life example is `` instead of ``, which clearly         conveys what it does but allows us to replace it with something         else in the future without having to rename the component. ---  #### 🔖 Prop naming  -   Boolean props should be prefixed with `is`, `are`, `has`, `will`, `can`, `should`, `do`, or `does` (e.g., `isDisabled`, `hasBorder`, `canBeEmpty`, `willFocusOnMount`). -   These all refer to state and make the overall component API easier to reason about. -   Boolean props should not use a positive-negative construction (e.g., `shouldSkipRender` or `hasNoBorder`). -   Handler props should start with the `on` prefix (e.g., `onChange`, `onSelect`, `onClick`) and must not use past tense. ---  #### 📝 Documentation  -   Each of its props should be clearly documented in its `.tsx` file.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"488fc67d-619c-44aa-a973-304961900084":{"__data__":"{\"id_\":\"488fc67d-619c-44aa-a973-304961900084\",\"metadata\":{\"url\":\"\",\"title\":\"about-druids\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageAboutDruids/about-druids.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"about-druids_content\",\"metadata\":{\"url\":\"\",\"title\":\"about-druids\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageAboutDruids/about-druids.mdx\"},\"hash\":\"j+XjnAhbcKQBDcHVs+P7pp5P673me6Fvg+kPUqcDxM8=\"},\"PREVIOUS\":{\"nodeId\":\"71253a24-478d-41f8-b4cd-faf6a3bf94e5\",\"metadata\":{\"url\":\"\",\"title\":\"about-druids\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageAboutDruids/about-druids.mdx\"},\"hash\":\"uD4QTCdtDvZT4lKDtylHMms9m3Ug5J3UvX3zpbdnuoI=\"}},\"hash\":\"pr4SvF+k5tyDU+G2DZ08eVV9IMhbJigisXdUcACaYnY=\",\"text\":\"-   These are used to automatically generate the prop descriptions for each component in this style guide. -   It should have a one- or two-sentence description in its `.metadata.ts` file. -   The same description should be added as part of the JSDoc comment block in the component’s `.tsx` file. -   If applicable, its related components should be listed in its `.metadata.ts` file. -   It should have a co-located, kebab-cased SVG illustration (e.g., `input-text.illustration.svg`). -   Its `.mdx` style guide entry should be thorough and well-considered. ---  #### 💄 Styling  -   It should use the BEM naming convention, starting with the module name (e.g., `.druids_form_input-text`). -   It should support the dark theme by using themed CSS color variables. -   It should, to the greatest extent possible, use DRUIDS global spacing, line height, and size constants. -   It may define a `size` prop. -   It may define a `level` prop. ---  #### 📱 Responsiveness  -   It should scale responsively in relation to the viewport width and in     relation to other elements inside which it might be nested. -   It should be mobile-friendly (touch-accessible, etc.). ---  #### ♿️ Accessibility  -   It should be functional using only keyboard navigation. -   Its markup should be ordered so its elements have a logical tabbing     order. -   It should use appropriate semantic tags, such as ``&thinsp;–&thinsp;`` headings, ``, ``, ``, etc. -   It should use HTML elements in their intended roles (`` for     navigation, `` for actions, `` for unordered lists,     etc.). -   If this somehow isn’t possible, it should have appropriate         `aria` or `role` attributes on non-standard elements that act         like links, buttons, modals, etc. ---  #### ✅ Testing  -   It should have a co-located, kebab-cased `.unit.tsx` file for unit     tests. -   It should be thoroughly QA’d in the latest version of each browser we     officially support (Chrome, Firefox, Safari, and Edge).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ecc3d9f1-f8e5-4455-b196-429f6e7336a6":{"__data__":"{\"id_\":\"ecc3d9f1-f8e5-4455-b196-429f6e7336a6\",\"metadata\":{\"url\":\"\",\"title\":\"PageSpacingAndLayout\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageSpacingAndLayout/PageSpacingAndLayout.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PageSpacingAndLayout_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageSpacingAndLayout\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageSpacingAndLayout/PageSpacingAndLayout.tsx\"},\"hash\":\"zzg3Rxfuk6UwPbBj/l18rOLsuCH7/RnXbjDTVXDQANk=\"},\"NEXT\":{\"nodeId\":\"e8bdd98a-92b6-400a-bd86-a1958a440840\",\"metadata\":{\"url\":\"\",\"title\":\"PageSpacingAndLayout\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageSpacingAndLayout/PageSpacingAndLayout.tsx\"},\"hash\":\"78gP/qTDtIaLzmqCp6Zgxoow1z8rln9wbn3SztI6Jvw=\"}},\"hash\":\"ExZ1kZGiquPIbwIes35KBKVKSnQ6k0lJbcgDcsimUUQ=\",\"text\":\"import { useComponentsContext } from '@druids/druids-pages/lib/components-parser/components.context';\\nimport { ComponentTile } from '@druids/styleguide-builder/components/components-explorer/ComponentTile/ComponentTile';\\nimport { Title } from '@druids/styleguide-builder/components/ui/Title';\\nimport { EditorialAttentionMessage } from '@druids/styleguide/components/ui/EditorialAttentionMessage';\\nimport { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage';\\nimport { Grid } from '@druids/ui/layout/Grid';\\nimport { Spacing } from '@druids/ui/layout/Spacing';\\nimport { Code } from '@druids/ui/typography/Code';\\nimport { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants';\\nimport { InlineCode } from '@druids/ui/typography/InlineCode';\\nimport { Paragraph } from '@druids/ui/typography/Paragraph';\\nimport * as React from 'react';\\n\\nimport { RedlineExample } from './RedlineExample';\\nimport { SpacingScale } from './SpacingScale';\\n\\nexport const PageSpacingAndLayout: React.FunctionComponent = () => {\\n    const { components } = useComponentsContext();\\n    const layoutComponentsToList = React.useMemo(() => {\\n        return components.filter(({ name }) => {\\n            if (\\n                name === 'Flex' ||\\n                name === 'FlexItem' ||\\n                name === 'Grid' ||\\n                name === 'GridItem' ||\\n                name === 'Spacing'\\n            ) {\\n                return true;\\n            }\\n            return false;\\n        });\\n    }, [components]);\\n\\n    return (\\n        <EditorialPage pageSection=\\\"Foundations\\\" pageName=\\\"Spacing & Layout\\\">\\n            <Title as=\\\"h2\\\" className={EDITORIAL_COPY_ELEMENT} id=\\\"spacing\\\">\\n                Spacing\\n            </Title>\\n            <p>\\n                DRUIDS uses an <InlineCode>8px</InlineCode> scale for spacing\\n                between elements. </p>\\n            <p>\\n                Exceptions are at the extremes. The scale starts with{' '}\\n                <InlineCode>2px</InlineCode> and <InlineCode>4px</InlineCode> to\\n                allow for finer-grained margins when necessary, and it jumps{' '}\\n                <InlineCode>16px</InlineCode> between the two largest steps. </p>\\n            <Spacing marginY=\\\"xxl\\\">\\n                <SpacingScale />\\n            </Spacing>\\n            <Paragraph size=\\\"sm\\\" variant=\\\"secondary\\\">\\n                Real-world example:\\n            </Paragraph>\\n            <Spacing as=\\\"div\\\" marginTop=\\\"xs\\\">\\n                <RedlineExample />\\n            </Spacing>\\n            <Title\\n                as=\\\"h3\\\"\\n                className={EDITORIAL_COPY_ELEMENT}\\n                id=\\\"basic-spacing-components\\\"\\n            >\\n                Basic spacing components\\n            </Title>\\n            <p>\\n                DRUIDS includes numerous components that make it easy to lay out\\n                elements on pages in a consistent, expected way. </p>\\n            <Spacing as=\\\"div\\\" marginY=\\\"xxl\\\">\\n                <Grid gap=\\\"xl\\\" minWidth={348}>\\n                    {layoutComponentsToList.map((component) => (\\n                        <ComponentTile\\n                            illustration={component.illustration}\\n                            statusLevel={component.metadata.statusLevel}\\n                            link={`/components/${component.moduleName}/${component.name}`}\\n                            name={component.name}\\n                            description={component.metadata.description}\\n                            key={component.name}\\n                            showDescription\\n                        />\\n                    ))}\\n                </Grid>\\n            </Spacing>\\n            <Title\\n                as=\\\"h3\\\"\\n                className={EDITORIAL_COPY_ELEMENT}\\n                id=\\\"how-to-import-spacing-values\\\"\\n            >\\n                How to import spacing values\\n            </Title>\\n            <p>\\n                If you can’t use the basic spacing components, the values are\\n                available to use directly.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e8bdd98a-92b6-400a-bd86-a1958a440840":{"__data__":"{\"id_\":\"e8bdd98a-92b6-400a-bd86-a1958a440840\",\"metadata\":{\"url\":\"\",\"title\":\"PageSpacingAndLayout\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageSpacingAndLayout/PageSpacingAndLayout.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PageSpacingAndLayout_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageSpacingAndLayout\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageSpacingAndLayout/PageSpacingAndLayout.tsx\"},\"hash\":\"zzg3Rxfuk6UwPbBj/l18rOLsuCH7/RnXbjDTVXDQANk=\"},\"PREVIOUS\":{\"nodeId\":\"ecc3d9f1-f8e5-4455-b196-429f6e7336a6\",\"metadata\":{\"url\":\"\",\"title\":\"PageSpacingAndLayout\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageSpacingAndLayout/PageSpacingAndLayout.tsx\"},\"hash\":\"ExZ1kZGiquPIbwIes35KBKVKSnQ6k0lJbcgDcsimUUQ=\"}},\"hash\":\"78gP/qTDtIaLzmqCp6Zgxoow1z8rln9wbn3SztI6Jvw=\",\"text\":\"</p>\\n            <Grid minWidth={350}>\\n                <div>\\n                    <Paragraph size=\\\"sm\\\" variant=\\\"secondary\\\">\\n                        In Less:\\n                    </Paragraph>\\n                    <Code language=\\\"css\\\" marginTop=\\\"xs\\\">\\n                        {`@import (reference) '@druids/ui/ui-constants.less';\\n\\n.myComponent {\\n    right: @spacing-sm;\\n}`}\\n                    </Code>\\n                </div>\\n                <div>\\n                    <Paragraph size=\\\"sm\\\" variant=\\\"secondary\\\">\\n                        In TypeScript:\\n                    </Paragraph>\\n                    <Code language=\\\"typescript\\\" marginTop=\\\"xs\\\">\\n                        {`import { SPACING_VALUES } from '@druids/ui/ui-constants';\\n\\n// Don’t set inline styles except as\\n// an absolute last resort\\n<div\\n    style={{\\n        right: SPACING_VALUES.md\\n    }}\\n/>`}\\n                    </Code>\\n                </div>\\n            </Grid>\\n            <hr />\\n            {IS_DRUIDS_PRIVATE && (\\n                <>\\n                    <Title\\n                        as=\\\"h2\\\"\\n                        className={EDITORIAL_COPY_ELEMENT}\\n                        id=\\\"line-height\\\"\\n                    >\\n                        Line height\\n                    </Title>\\n                    <EditorialAttentionMessage>\\n                        <p>Content coming soon!</p>\\n                    </EditorialAttentionMessage>\\n                    <hr />\\n                    <Title\\n                        as=\\\"h2\\\"\\n                        className={EDITORIAL_COPY_ELEMENT}\\n                        id=\\\"page-layout\\\"\\n                    >\\n                        Page layout\\n                    </Title>\\n                    <EditorialAttentionMessage>\\n                        <p>Content to come!</p>\\n                    </EditorialAttentionMessage>\\n                    <hr />\\n                </>\\n            )}\\n        </EditorialPage>\\n    );\\n};\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6048a22f-f313-4a35-8cc8-9622b232e63c":{"__data__":"{\"id_\":\"6048a22f-f313-4a35-8cc8-9622b232e63c\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PageTypography_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"ArF19crMwqHJMqs0V0OgDCa9SRi+f/e8bVL3OLUdqy4=\"},\"NEXT\":{\"nodeId\":\"8a63538d-9315-4545-9317-614fc8475c1d\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"onokEqBRt0PhMnFqelMOrlvx7fmRcBQyijLXNPSSEDk=\"}},\"hash\":\"PqlCjyJVWJgbPovQ0UnxF5kQtDJCQ8CcCyb+ywD4ZQQ=\",\"text\":\"import { useComponentsContext } from '@druids/druids-pages/lib/components-parser/components.context';\\nimport { ComponentTile } from '@druids/styleguide-builder/components/components-explorer/ComponentTile/ComponentTile';\\nimport { Title } from '@druids/styleguide-builder/components/ui/Title';\\nimport { VisualExample } from '@druids/styleguide-builder/components/ui/VisualExample';\\nimport { useDesktop } from '@druids/styleguide-builder/lib/breakpoints';\\nimport {\\n    TypefacesNotoSans,\\n    TypefacesRobotoMono,\\n} from '@druids/styleguide/components/foundations/PageTypography/Typefaces';\\nimport { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage';\\nimport { Link } from '@druids/styleguide/lib/routing/Link';\\nimport { Flex } from '@druids/ui/layout/Flex';\\nimport { Grid } from '@druids/ui/layout/Grid';\\nimport { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator';\\nimport { Spacing } from '@druids/ui/layout/Spacing';\\nimport { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants';\\nimport { EditorialCopy } from '@druids/ui/typography/EditorialCopy';\\nimport { InlineCode } from '@druids/ui/typography/InlineCode';\\nimport * as React from 'react';\\n\\nimport { HeaderExample, ScaleExample, ParagraphExample } from './ScaleExample';\\nimport imgBasicTypographyDark from './images/basic-typography-dark.png';\\nimport imgBasicTypographyExample1Dark from './images/basic-typography-example-1-dark.png';\\nimport imgBasicTypographyExample1Light from './images/basic-typography-example-1-light.png';\\nimport imgBasicTypographyExample2Dark from './images/basic-typography-example-2-dark.png';\\nimport imgBasicTypographyExample2Light from './images/basic-typography-example-2-light.png';\\nimport imgBasicTypographyExampleDark from './images/basic-typography-examples-dark.png';\\nimport imgBasicTypographyExampleLight from './images/basic-typography-examples-light.png';\\nimport imgBasicTypographyLight from './images/basic-typography-light.png';\\nimport imgEditorialTypographyDark from './images/editorial-typography-dark.png';\\nimport imgEditorialTypographyExample1Dark from './images/editorial-typography-example-1-dark.png';\\nimport imgEditorialTypographyExample1Light from './images/editorial-typography-example-1-light.png';\\nimport imgEditorialTypographyExample2Dark from './images/editorial-typography-example-2-dark.png';\\nimport imgEditorialTypographyExample2Light from './images/editorial-typography-example-2-light.png';\\nimport imgEditorialTypographyExample3Dark from './images/editorial-typography-example-3-dark.png';\\nimport imgEditorialTypographyExample3Light from './images/editorial-typography-example-3-light.png';\\nimport imgEditorialTypographyLight from './images/editorial-typography-light.png';\\n\\nexport const BasicTypographyImg = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={300}\\n            imageHeight={179}\\n            src={[imgBasicTypographyLight, imgBasicTypographyDark]}\\n        />\\n    );\\n};\\nexport const EditorialTypographyImg = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={300}\\n            imageHeight={179}\\n            src={[imgEditorialTypographyLight, imgEditorialTypographyDark]}\\n        />\\n    );\\n};\\nexport const BasicTypographyExampleImg = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={271}\\n            src={[\\n                imgBasicTypographyExampleLight,\\n                imgBasicTypographyExampleDark,\\n            ]}\\n            caption=\\\"Examples of components that use Basic Typography Components inside\\\"\\n        />\\n    );\\n};\\nexport const BasicTypographyExample1Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            height={475}\\n            src={[\\n                imgBasicTypographyExample1Light,\\n                imgBasicTypographyExample1Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/logs\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Logs Explorer\\n                    </Link>{' '}\\n                    Overview Page Layout (complex layout + content set in small\\n                    space)\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const BasicTypographyExample2Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            height={475}\\n            src={[\\n                imgBasicTypographyExample2Light,\\n                imgBasicTypographyExample2Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/watchdog\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Watchdog\\n                    </Link>{' '}\\n                    Stories List Page\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const EditorialTypographyExample1Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={475}\\n            src={[\\n                imgEditorialTypographyExample1Light,\\n                imgEditorialTypographyExample1Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/release-notes/\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Release Notes Page\\n                    </Link>{' '}\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const EditorialTypographyExample2Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={475}\\n            src={[\\n                imgEditorialTypographyExample2Light,\\n                imgEditorialTypographyExample2Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/security/getting-started\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Security Getting Started Page\\n                    </Link>{' '}\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\nexport const EditorialTypographyExample3Img = () => {\\n    return (\\n        <VisualExample\\n            imageWidth={800}\\n            imageHeight={475}\\n            src={[\\n                imgEditorialTypographyExample3Light,\\n                imgEditorialTypographyExample3Dark,\\n            ]}\\n            caption={\\n                <>\\n                    <Link\\n                        url=\\\"https://app.datadoghq.com/help/quick-start\\\"\\n                        isExternal\\n                        hasExternalIcon={false}\\n                        isInline\\n                    >\\n                        Quick Start Page\\n                    </Link>{' '}\\n                </>\\n            }\\n            hasSideBySideCaption\\n            hasLightbox\\n        />\\n    );\\n};\\n\\nexport const PageTypography: React.FunctionComponent = () => {\\n    const isDesktop = useDesktop();\\n    const { components } = useComponentsContext();\\n    const basicTypographyComponentsToList = React.useMemo(() => {\\n        return components.filter(({ name }) =>\\n            ['Text', 'Title', 'Code', 'Paragraph', 'List'].includes(name),\\n        );\\n    }, [components]);\\n\\n    return (\\n        <EditorialPage pageSection=\\\"Foundations\\\" pageName=\\\"Typography\\\">\\n            <EditorialCopy\\n                size=\\\"lg\\\"\\n                initialHeaderSize=\\\"xl\\\"\\n                maxWidthType=\\\"text-only\\\"\\n            >\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"about-side-panels\\\"\\n                >\\n                    Typography in DRUIDS\\n                </Title>\\n                <p>\\n                    DRUIDS offers two types of typographic styles —{' '}\\n                    <Link\\n                        hasSmoothAnchorLink\\n                        url=\\\"#basic-typography\\\"\\n                        title=\\\"Basic Typography Styles | DRUIDS\\\"\\n                        isInline\\n                    >\\n                        Basic Basic Typography\\n                    </Link>{' '}\\n                    style, which includes most of the components inside the\\n                    Datadog app and{' '}\\n                    <Link\\n                        hasSmoothAnchorLink\\n                        url=\\\"#editorial-typography\\\"\\n                        title=\\\"Editorial Typography Styles | DRUIDS\\\"\\n                        isInline\\n                    >\\n                        Editorial Typography\\n                    </Link>{' '}\\n                    style, which is intended for specific parts of the app with\\n                    more extensive and elaborate typographic needs.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8a63538d-9315-4545-9317-614fc8475c1d":{"__data__":"{\"id_\":\"8a63538d-9315-4545-9317-614fc8475c1d\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PageTypography_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"ArF19crMwqHJMqs0V0OgDCa9SRi+f/e8bVL3OLUdqy4=\"},\"PREVIOUS\":{\"nodeId\":\"6048a22f-f313-4a35-8cc8-9622b232e63c\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"PqlCjyJVWJgbPovQ0UnxF5kQtDJCQ8CcCyb+ywD4ZQQ=\"},\"NEXT\":{\"nodeId\":\"367bf16f-809b-4865-a8e4-cdc3ef13857f\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"NHWhu/rL2qEp2/i2JbWJjdn4eCs3dkIAZzc6RYUxhM0=\"}},\"hash\":\"onokEqBRt0PhMnFqelMOrlvx7fmRcBQyijLXNPSSEDk=\",\"text\":\"</p>\\n                <p>\\n                    Both typography sets use the open-source typeface{' '}\\n                    <Link\\n                        url=\\\"https://fonts.google.com/specimen/Noto+Sans\\\"\\n                        isExternal\\n                        hasExternalIcon\\n                        isInline\\n                    >\\n                        Noto Sans\\n                    </Link>{' '}\\n                    as a main typeface, and{' '}\\n                    <Link\\n                        url=\\\"https://fonts.google.com/specimen/Roboto+Mono\\\"\\n                        isExternal\\n                        hasExternalIcon\\n                        isInline\\n                    >\\n                        Roboto Mono\\n                    </Link>{' '}\\n                    to render codes, and in all logs tables. </p>\\n            </EditorialCopy>\\n            <Flex\\n                justify=\\\"flex-start\\\"\\n                alignItems=\\\"flex-start\\\"\\n                gap=\\\"lg\\\"\\n                direction={isDesktop ? 'row' : 'column'}\\n            >\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        {isDesktop ? (\\n                            <>\\n                                <BasicTypographyImg />\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"basic-typography-overview\\\"\\n                                >\\n                                    Style 1: Basic Typography Components\\n                                </Title>\\n                            </>\\n                        ) : (\\n                            <>\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"basic-typography-overview\\\"\\n                                >\\n                                    Style 1: Basic Typography Components\\n                                </Title>\\n                                <BasicTypographyImg />\\n                            </>\\n                        )}\\n                        <p>\\n                            Basic Typography Components refers to and consists\\n                            of the majority of individual typography components,\\n                            such as{' '}\\n                            <Link url=\\\"/components/typography/Text\\\" isInline>\\n                                Text\\n                            </Link>\\n                            ,{' '}\\n                            <Link url=\\\"/components/typography/Title\\\" isInline>\\n                                Title\\n                            </Link>{' '}\\n                            and{' '}\\n                            <Link url=\\\"/components/typography/Code\\\" isInline>\\n                                Code\\n                            </Link>{' '}\\n                            components, and often is used in more independent\\n                            and discrete occasions when compared to its\\n                            counterpart, Editorial Typography. </p>\\n                        <p>\\n                            Basic Typographic Components are used readily\\n                            throughout the app when the typographic element is\\n                            supposed to be used on it’s own, usually shorter in\\n                            length, and meant to be consumed as a discrete\\n                            readable unit or is in a smaller chunk of\\n                            text/information. </p>\\n                        <p>\\n                            Another characteristic of Basic Typography\\n                            Components is the fact that there is no built in\\n                            spacing in between these individual elements, as\\n                            opposed to how Editorial Typography is set up. </p>\\n                    </EditorialCopy>\\n                </div>\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        {isDesktop ? (\\n                            <>\\n                                <EditorialTypographyImg />\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"editorial-typography-overview\\\"\\n                                >\\n                                    Style 2: Editorial Typography\\n                                </Title>\\n                            </>\\n                        ) : (\\n                            <>\\n                                <Title\\n                                    as=\\\"h3\\\"\\n                                    className={EDITORIAL_COPY_ELEMENT}\\n                                    id=\\\"editorial-typography-overview\\\"\\n                                >\\n                                    Style 2: Editorial Typography\\n                                </Title>\\n                                <EditorialTypographyImg />\\n                            </>\\n                        )}\\n                        <p>\\n                            Editorial Typography is designed to be used when the\\n                            content it holds is longer in length, generally more\\n                            lines of text, and it allows for a more dramatic,\\n                            graphic use of type in editorial context, in terms\\n                            of scale, spacing and layout. </p>\\n                        <p>\\n                            It is accessible by a wrapper component,{' '}\\n                            <Link\\n                                url=\\\"/components/typography/EditorialCopy\\\"\\n                                isInline\\n                            >\\n                                EditorialCopy\\n                            </Link>\\n                            , which wraps naked HTML typography elements such as{' '}\\n                            <InlineCode>h1</InlineCode>–\\n                            <InlineCode>h6</InlineCode> header tags, and many\\n                            others.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"367bf16f-809b-4865-a8e4-cdc3ef13857f":{"__data__":"{\"id_\":\"367bf16f-809b-4865-a8e4-cdc3ef13857f\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PageTypography_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"ArF19crMwqHJMqs0V0OgDCa9SRi+f/e8bVL3OLUdqy4=\"},\"PREVIOUS\":{\"nodeId\":\"8a63538d-9315-4545-9317-614fc8475c1d\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"onokEqBRt0PhMnFqelMOrlvx7fmRcBQyijLXNPSSEDk=\"},\"NEXT\":{\"nodeId\":\"16488229-9e05-4e43-a3fa-4da80a771b8f\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"N6IvsN+3XpxfniejmP0+oecP6puwgVSEiFAu6kwuLME=\"}},\"hash\":\"NHWhu/rL2qEp2/i2JbWJjdn4eCs3dkIAZzc6RYUxhM0=\",\"text\":\"</p>\\n                    </EditorialCopy>\\n                </div>\\n            </Flex>\\n            <EditorialCopy\\n                size=\\\"lg\\\"\\n                initialHeaderSize=\\\"xl\\\"\\n                marginTop=\\\"xl\\\"\\n                maxWidthType=\\\"text-only\\\"\\n            >\\n                <HorizontalSeparator />\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"basic-typography\\\"\\n                >\\n                    Basic Typography\\n                </Title>\\n                <p>\\n                    Basic Typography Components include all of the typography\\n                    components, except for the{' '}\\n                    <Link url=\\\"/components/typography/EditorialCopy\\\" isInline>\\n                        EditorialCopy\\n                    </Link>{' '}\\n                    is designed to be used for more extensive blocks of text. </p>\\n                <BasicTypographyExampleImg />\\n                <p>\\n                    Basic Typography Components are widely used inside other\\n                    components as a supporting element such as in{' '}\\n                    <Link\\n                        url=\\\"/components/dialogs/KeyboardShortcutList\\\"\\n                        isInline\\n                    >\\n                        KeyboardShortcutList\\n                    </Link>\\n                    ,{' '}\\n                    <Link url=\\\"/components/nav/PaginationSummary\\\" isInline>\\n                        PaginationSummary\\n                    </Link>\\n                    ,{' '}\\n                    <Link url=\\\"/components/time/TimeRangeIndicator\\\" isInline>\\n                        TimeRangeIndicator\\n                    </Link>{' '}\\n                    and many other components with short blocks of typographic\\n                    elements. </p>\\n                <Title as=\\\"h3\\\" className={EDITORIAL_COPY_ELEMENT}>\\n                    DRUIDS Typography Font-Size / Line-Height Scale\\n                </Title>\\n                <ScaleExample />\\n                <Title\\n                    as=\\\"h3\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"examples-of-basic-typography-components\\\"\\n                >\\n                    Examples of Layout / Page using Basic Typography Components\\n                </Title>\\n                <BasicTypographyExample1Img />\\n                <BasicTypographyExample2Img />\\n\\n                <Title\\n                    as=\\\"h3\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"key-basic-typography-components\\\"\\n                >\\n                    Key Basic Typography Components\\n                </Title>\\n                <Spacing as=\\\"div\\\" marginY={isDesktop ? 'xxl' : 'sm'}>\\n                    <Grid gap=\\\"xl\\\" minWidth={348}>\\n                        {basicTypographyComponentsToList.map((component) => (\\n                            <ComponentTile\\n                                illustration={component.illustration}\\n                                statusLevel={component.metadata.statusLevel}\\n                                link={`/components/${component.moduleName}/${component.name}`}\\n                                name={component.name}\\n                                description={component.metadata.description}\\n                                key={component.name}\\n                                showDescription\\n                            />\\n                        ))}\\n                    </Grid>\\n                </Spacing>\\n                <HorizontalSeparator />\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"editorial-typography\\\"\\n                >\\n                    Editorial Typography\\n                </Title>\\n                <p>\\n                    Editorial Typography set is meant to be used in places where\\n                    there’s more than just a few lines of copy. The typography\\n                    set contains optimized pre-set configurations of typographic\\n                    elements such as the relationship between font sizes, line\\n                    heights, vertical spacing, letter spacing, and word spacing\\n                    so the user’s focus is not distracted from the content. </p>\\n                <p>\\n                    When HTML elements are wrapped inside the{' '}\\n                    <Link url=\\\"/components/typography/EditorialCopy\\\" isInline>\\n                        EditorialCopy\\n                    </Link>{' '}\\n                    component, preset values of spacings in between containing\\n                    elements and font-size hierarchy in between different\\n                    headlines and body text is automatically applied, which\\n                    helps designers and developers to use the component\\n                    conveniently without having to redesign the size / spacing\\n                    in a custom way. </p>\\n                <Title as=\\\"h3\\\" className={EDITORIAL_COPY_ELEMENT}>\\n                    Editorial Typography Header Scale\\n                </Title>\\n                <HeaderExample />\\n                <Title as=\\\"h3\\\" className={EDITORIAL_COPY_ELEMENT}>\\n                    Editorial Typography Paragraph Scale\\n                </Title>\\n                <ParagraphExample />\\n                <Title\\n                    as=\\\"h3\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"examples-of-layouts-that-uses-editorial-copy\\\"\\n                >\\n                    Examples of Layouts that are using Editorial Typography\\n                </Title>\\n                <EditorialTypographyExample1Img />\\n                <EditorialTypographyExample3Img />\\n                <EditorialTypographyExample2Img />\\n                <HorizontalSeparator />\\n                <Title\\n                    as=\\\"h2\\\"\\n                    className={EDITORIAL_COPY_ELEMENT}\\n                    id=\\\"typefaces\\\"\\n                >\\n                    Typefaces\\n                </Title>\\n            </EditorialCopy>\\n            <Flex\\n                justify=\\\"flex-start\\\"\\n                alignItems=\\\"flex-start\\\"\\n                gap=\\\"lg\\\"\\n                direction={isDesktop ?\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"16488229-9e05-4e43-a3fa-4da80a771b8f":{"__data__":"{\"id_\":\"16488229-9e05-4e43-a3fa-4da80a771b8f\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PageTypography_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"ArF19crMwqHJMqs0V0OgDCa9SRi+f/e8bVL3OLUdqy4=\"},\"PREVIOUS\":{\"nodeId\":\"367bf16f-809b-4865-a8e4-cdc3ef13857f\",\"metadata\":{\"url\":\"\",\"title\":\"PageTypography\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTypography/PageTypography.tsx\"},\"hash\":\"NHWhu/rL2qEp2/i2JbWJjdn4eCs3dkIAZzc6RYUxhM0=\"}},\"hash\":\"N6IvsN+3XpxfniejmP0+oecP6puwgVSEiFAu6kwuLME=\",\"text\":\"'row' : 'column'}\\n            >\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        <Title\\n                            as=\\\"h3\\\"\\n                            className={EDITORIAL_COPY_ELEMENT}\\n                            id=\\\"noto-sans\\\"\\n                        >\\n                            Noto Sans\\n                        </Title>\\n                        <TypefacesNotoSans />\\n                        <p>\\n                            The primary DRUIDS typeface is a sans-serif called{' '}\\n                            <Link\\n                                url=\\\"https://fonts.google.com/specimen/Noto+Sans\\\"\\n                                isExternal\\n                                hasExternalIcon\\n                                isInline\\n                            >\\n                                Noto Sans\\n                            </Link>\\n                            . It was commissioned by Google to bedesigned with\\n                            the goal of achieving visual harmony and supporting\\n                            a wide range of characters and glyphs to remove all\\n                            substitute characters (which is called “tofu”,\\n                            therefore “No more Tofu”). It is one of the most\\n                            widely used typefaces on the web because of its\\n                            flexibility. </p>\\n                    </EditorialCopy>\\n                </div>\\n                <div>\\n                    <EditorialCopy\\n                        size=\\\"lg\\\"\\n                        initialHeaderSize=\\\"xl\\\"\\n                        maxWidth=\\\"400px\\\"\\n                    >\\n                        <Title\\n                            as=\\\"h3\\\"\\n                            className={EDITORIAL_COPY_ELEMENT}\\n                            id=\\\"roboto-mono\\\"\\n                        >\\n                            Roboto Mono: Code\\n                        </Title>\\n                        <TypefacesRobotoMono />\\n                        <p>\\n                            To display code snippets and logs, DRUIDS uses a\\n                            monospace font called{' '}\\n                            <Link\\n                                url=\\\"https://fonts.google.com/specimen/Roboto+Mono\\\"\\n                                isExternal\\n                                hasExternalIcon\\n                                isInline\\n                            >\\n                                Roboto Mono\\n                            </Link>\\n                            . Roboto Mono was originally developed by Google for\\n                            its mobile operating system, Android, in 2011 and\\n                            was designed with the goal of creating a\\n                            approachable and emotional typeface. </p>\\n                    </EditorialCopy>\\n                </div>\\n            </Flex>\\n        </EditorialPage>\\n    );\\n};\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0b5a17b5-f24c-40ae-8d2a-f607b8fddaa2":{"__data__":"{\"id_\":\"0b5a17b5-f24c-40ae-8d2a-f607b8fddaa2\",\"metadata\":{\"url\":\"\",\"title\":\"page-high-level-design-themes\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/principles/PageHighLevelDesignThemes/page-high-level-design-themes.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"page-high-level-design-themes_content\",\"metadata\":{\"url\":\"\",\"title\":\"page-high-level-design-themes\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/principles/PageHighLevelDesignThemes/page-high-level-design-themes.mdx\"},\"hash\":\"50nIn0wSYRjyZp5hVutKpYCjn5THUIY83P7CkV3mMpM=\"}},\"hash\":\"eQTwNHGAFZbIDsb8JkX5tsPruq8Yv6i+xVhs9wkAanQ=\",\"text\":\"import { EDITORIAL_COPY_ELEMENT } from '@druids/ui/typography/EditorialCopy/editorial-copy.constants'; import { HIGH_LEVEL_DESIGN_THEMES } from '@druids/druids-pages/lib/principles/high-level-design-themes/high-level-design-themes.tsx'; import { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator'; import { Text } from '@druids/ui/typography/Text'; import { Grid } from '@druids/ui/layout/Grid'; import { DesignThemeCard } from './DesignThemeCard'; import { DesignThemeDetail } from './DesignThemeDetail'; import { Title } from '@druids/ui/typography/Title';  export const BLOCK = 'styleguide_principles_high-level-design-themes';  export const HiddenTitle = ({ title, ...props }) => (              {title}      );  export const DesignThemeCards = ({ header, parent, ...props }) => {     return (         <>             <Title                 size=\\\"xl\\\"                 id={header}                 marginBottom=\\\"lg\\\"                 style={{                     fontWeight: '400',                 }}             >                 {header}                                           {Object.entries(HIGH_LEVEL_DESIGN_THEMES).map(                     ([theme_title, theme]) =>                         theme.parent === parent && (                             <DesignThemeCard                                 key={theme_title}                                 id={theme_title}                                 {...theme}                             />                         ),                 )}                           ); };  export const DesignThemeDetails = ({ parent, ...props }) => {     return (                      {Object.entries(HIGH_LEVEL_DESIGN_THEMES).map(                 ([theme_title, theme]) =>                     theme.parent === parent && (                         <DesignThemeDetail                             key={theme_title}                             id={theme_title}                             {...theme}                         />                     ),             )}              ); };      Datadog has so many features and so much data that users are always at risk of **confusion** and **frustration**. Our design principles are based on providing **clarity** and **confidence** in the face of these risks. Throughout the platform, we want our users to know what they are looking at and what they are supposed to do with it. ---  <DesignThemeCards     header=\\\"High-level values\\\"     parent=\\\"general\\\"     marginBottom=\\\"xxl\\\" />  Here are principles that follow from these high-level values:\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8aee335e-de7c-4777-acd0-7a87b6f6d2d4":{"__data__":"{\"id_\":\"8aee335e-de7c-4777-acd0-7a87b6f6d2d4\",\"metadata\":{\"url\":\"\",\"title\":\"PageDruidsPhilosophy\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/principles/PageDruidsPhilosophy/PageDruidsPhilosophy.tsx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PageDruidsPhilosophy_content\",\"metadata\":{\"url\":\"\",\"title\":\"PageDruidsPhilosophy\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/principles/PageDruidsPhilosophy/PageDruidsPhilosophy.tsx\"},\"hash\":\"MtweqaMIsdiyeaWpFg3574HcNH0VUXTAN3/C7C+sgCc=\"}},\"hash\":\"AZPigPrW9PvVKVK+bgm4zyoZS3WWPzin6//o+xrXhxI=\",\"text\":\"import { EditorialPage } from '@druids/styleguide/components/ui/EditorialPage';\\nimport { FlexItem } from '@druids/ui/layout/FlexItem';\\nimport { Flex } from '@druids/ui/layout/Flex';\\nimport { HorizontalSeparator } from '@druids/ui/layout/HorizontalSeparator';\\nimport { EditorialCopy } from '@druids/ui/typography/EditorialCopy';\\nimport * as React from 'react';\\n\\nimport {\\n    ConsistencyAnimation,\\n    FasterAnimation,\\n    BalanceAnimation,\\n} from './DruidsPhilosophyAnimations/DruidsPhilosophyAnimations';\\n\\nexport const PageDruidsPhilosophy = () => (\\n    <EditorialPage pageSection=\\\"Principles\\\" pageName=\\\"DRUIDS Philosophy\\\">\\n        <h1 style={{ fontWeight: 400 }}>\\n            The design system is a means to an end. <br />\\n            The system works for us, we don’t work for it. </h1>\\n        <HorizontalSeparator />\\n        <Flex wrap=\\\"wrap\\\" justify=\\\"center\\\" alignItems=\\\"center\\\">\\n            <FlexItem maxWidth={200} marginRight=\\\"lg\\\">\\n                <FasterAnimation />\\n            </FlexItem>\\n            <EditorialCopy\\n                marginLeft=\\\"lg\\\"\\n                marginY=\\\"lg\\\"\\n                size=\\\"lg\\\"\\n                maxWidth={550}\\n            >\\n                <h2>Make design faster and more confident</h2>\\n                <p>\\n                    Designers and developers can do their jobs more quickly and\\n                    work more intuitively when they can take advantage of the\\n                    hard work and thinking that has been applied in the past. This minimizes time-to-value and smooths the path from\\n                    design to implementation. </p>\\n            </EditorialCopy>\\n        </Flex>\\n        <Flex wrap=\\\"wrap\\\" justify=\\\"center\\\" alignItems=\\\"center\\\">\\n            <FlexItem maxWidth={200} marginRight=\\\"lg\\\">\\n                <ConsistencyAnimation />\\n            </FlexItem>\\n            <EditorialCopy\\n                marginLeft=\\\"lg\\\"\\n                marginY=\\\"lg\\\"\\n                size=\\\"lg\\\"\\n                maxWidth={550}\\n            >\\n                <h2>\\n                    Consistency is also only a means to an end — predictability\\n                    is the payoff that makes a more usable product\\n                </h2>\\n                <p>\\n                    We should not pursue consistency for its own sake. Users\\n                    benefit from established components and patterns when\\n                    repetition makes them easier to understand. This can be\\n                    especially true as new products and features are added. Consistency is a useful tool, but it should not be an\\n                    obstacle to creating the right solutions. </p>\\n            </EditorialCopy>\\n        </Flex>\\n        <Flex wrap=\\\"wrap\\\" justify=\\\"center\\\" alignItems=\\\"center\\\">\\n            <FlexItem maxWidth={200} marginRight=\\\"lg\\\">\\n                <BalanceAnimation />\\n            </FlexItem>\\n            <EditorialCopy\\n                marginLeft=\\\"lg\\\"\\n                marginY=\\\"lg\\\"\\n                size=\\\"lg\\\"\\n                maxWidth={550}\\n            >\\n                <h2>Balance between the established and the new</h2>\\n                <p>\\n                    DRUIDS does not define what is possible to create; it is\\n                    here to make it easier to design and build what we already\\n                    know best. Strive for the best design and technical\\n                    solutions for the product you are building. Take advantage\\n                    of the work already done — but seek out new designs and\\n                    solutions to push the platform forward, too. </p>\\n                <p>\\n                    When giving feedback on new work, if you see something\\n                    unfamiliar, don’t assume it must be brought into existing\\n                    patterns and solutions. Instead ask how using DRUIDS and\\n                    known patterns might help, and focus on the positives. </p>\\n            </EditorialCopy>\\n        </Flex>\\n    </EditorialPage>\\n);\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fa7c1929-a958-4bec-9768-b071861bdf55":{"__data__":"{\"id_\":\"fa7c1929-a958-4bec-9768-b071861bdf55\",\"metadata\":{\"url\":\"\",\"title\":\"tips-and-tricks\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTipsAndTricks/tips-and-tricks.mdx\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"tips-and-tricks_content\",\"metadata\":{\"url\":\"\",\"title\":\"tips-and-tricks\",\"filePath\":\"/Users/fabian.hoeltke/dev/web-ui/internal-apps/styleguide/components/foundations/PageTipsAndTricks/tips-and-tricks.mdx\"},\"hash\":\"qV9dhN/XxhSqyRV24ecbit8sBH9Jq8gPOb8NTaHb4s0=\"}},\"hash\":\"3uP7uXXl/npBUJXAtLU5tXlTFZjh8tsn1en+d4+mwJM=\",\"text\":\"import { EditorialAttentionMessage } from '@druids/styleguide/components/ui/EditorialAttentionMessage'; import { KeyboardShortcut } from '@druids/ui/typography/KeyboardShortcut'; import { VisualExample } from '@druids/styleguide-builder/components/ui/VisualExample';  import imgDruidsLoupeDark from './images/druids-loupe_dark.png'; import imgDruidsLoupeLight from './images/druids-loupe_light.png';  ## Treat components as black boxes  Props are for styling components and allowing them to behave within a predefined range of possibilities. If you have an unsupported use case or style, don’t hack it yourself. Talk to DesignOps. We literally exist to help! <EditorialAttentionMessage     marginBottom=\\\"lg\\\"     title=\\\"Whatever you do, don’t “customize” components by overriding their internal CSS. \\\" >     DRUIDS is not designed to support this. Because DRUIDS is not versioned,     overriding component internals via CSS creates a risk for silent regressions     when components are updated in the future. A few common usage anti-patterns:  -   Overriding component’s `padding` or `display` properties     -   Usually a sign it would be better to integrate your new use case into the component itself (if possible). -   Referencing DRUIDS-specific `classNames` like `.druids_form_input-text`     -   Creates a “silent” dependency that exists in CSS but not in JavaScript, which is brittle and hard to test for/debug. -   Applying `margin`, `display`, or `position` rules directly to components, even via `classNames`{' '} props. -   Sometimes it’s unavoidable, but it’s preferable to use DRUIDS layout components when possible. This means you’re constructing things         in a much more modular, future-proof way. ---  ## Check if it actually is a component  Some elements may appear at a glance to be a DRUIDS component but are not. To check, press  on any page in Datadog. All DRUIDS components (except the most basic ones for typography and spacing) will be outlined in red. Hover any outlined component to see details and links to GitHub, Figma, and this style guide. <VisualExample     src={[imgDruidsLoupeLight, imgDruidsLoupeDark]}     imageWidth={583}     hasImageShadow />  ---  ## Separation of concerns is important  Components shouldn’t try to do too much. If we reach a point where a component’s logic and behavior start to feel too complex, it’s probably time to make a separate component (e.g., `` and ``). ---  ## Not everything needs to be a shared component  Components that are used only for a single feature should live in that feature’s codebase rather than in DRUIDS. Components tied to specific data sources or business logic should never be part of DRUIDS, either. This guarantees DRUIDS stays free of external dependencies, which in turn ensures it can be used anywhere in the Datadog platform without side effects. ---  ## Side effects are symptomatic  Occasionally a DRUIDS component will look or behave different in actual use than in this style guide. Because DRUIDS is free of external dependencies it’s almost certainly symptomatic of a larger problem: usually that some global CSS and/or JavaScript is leaking into and overriding the component’s styles. This means you’re likely importing code that you didn’t realize, which in turn can lead to bloated bundles and even degraded browser performance.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"}},"docstore/ref_doc_info":{"Modal_content":{"nodeIds":["54c43dd4-cb93-4ee3-b67e-73d408aef864","93c0500b-e12b-478b-b34d-e3d0921d0852"],"extraInfo":{}},"Popover_content":{"nodeIds":["8711fd85-27af-4177-87dd-86b53b08d81d","0c9ceb23-d80f-43f9-8ea1-804cf1622187","cc3ba501-0f62-45e0-888d-9a864b477cf0","09b01219-3179-468d-bfb9-d90f3f9ba752","128a2eb2-e443-49a8-ae52-85c9175eede1"],"extraInfo":{}},"Tooltip_content":{"nodeIds":["3a064d6d-2f99-4640-a32a-c1e5dd9c58a7","261d0879-8125-46a5-a641-c8a3181b962f","3c23811b-ddcc-49b8-87f3-76a9b8df959c","c03c9bda-181c-4b7c-ac05-fc422493bf91"],"extraInfo":{}},"Action_content":{"nodeIds":["18b3eef8-6f87-4bec-9d08-0e731aaa3331"],"extraInfo":{}},"Button_content":{"nodeIds":["a3f19c9e-5a64-4bbc-a2f9-f9400793fc70","2a0ff4dd-c23d-4512-9340-e43e56cbb2e7","ae361ef7-9d65-486e-9a11-3eb3c564dfd7","941875d2-896e-4681-98ae-73c9071197c8"],"extraInfo":{}},"InputText_content":{"nodeIds":["4ec3cf3c-0d64-4579-82b8-f1bfe69aebb4","1543e38d-1757-4a66-9bfe-addb2dfa17cb"],"extraInfo":{}},"Select_content":{"nodeIds":["6a325474-ca38-48a5-bed5-2b6e72259b0f","e5b3c733-2e3b-42e3-a0c7-ba102f049d26","a10ce6dc-e0af-487a-8457-8944a6a21825","2fb7972f-e0d3-4e33-b992-372952df59d5","86140811-e54c-4c84-8a8f-556154e11bf1","13530523-499b-405f-862f-2628dbae399a"],"extraInfo":{}},"ToggleButtons_content":{"nodeIds":["fca08a53-b863-4f3b-9638-b37027d87ff7","09aa3920-ad88-42a3-a2ea-df0086582cb8"],"extraInfo":{}},"ToggleSwitch_content":{"nodeIds":["7131059c-35b4-487b-80e0-bbcaf785280b"],"extraInfo":{}},"Accordion_content":{"nodeIds":["f8728be8-cbdf-4ecf-9282-e9d334ad6aa2","9ead765f-d722-4c0c-b304-cd97040c05a6"],"extraInfo":{}},"Flex_content":{"nodeIds":["88d50db3-44e3-4a4b-b95e-561edaee4c15","633beb0d-74c7-4cab-8265-00b2a5092733"],"extraInfo":{}},"FlexItem_content":{"nodeIds":["d6572d5b-39fd-484f-a3bb-a06490ad5e1d"],"extraInfo":{}},"Grid_content":{"nodeIds":["7bbb3add-4415-48bb-9928-d54865ed5119","19e8982a-9e11-4d32-8e15-82bfcffa2151"],"extraInfo":{}},"Overflower_content":{"nodeIds":["9dd5ba3d-f9c4-4794-9be2-6b76f5e303f1","06a78940-f5d4-4204-9a42-1d49e77d4f36"],"extraInfo":{}},"Panel_content":{"nodeIds":["7f2c8212-b99f-4201-9e1b-2e88ac12bd34"],"extraInfo":{}},"Spacing_content":{"nodeIds":["c3ee8538-7879-4b0c-88ae-a08b5193ac4d","b8f5e049-bf7c-4cea-a121-9b3aa186b120"],"extraInfo":{}},"IntegrationLogo_content":{"nodeIds":["8bd64ff6-65f1-48f5-8eba-85d813dfcf11","e49bdb9b-d4b1-49ee-a429-1d9dba7ef638","618132e4-8f08-40fe-81e1-c8f5712bf928","5f8e4ca2-f7f2-4ae5-9808-9cc8aa632165","c762a62b-f8f5-44e9-845a-b34377cd66f4"],"extraInfo":{}},"MessageBox_content":{"nodeIds":["e4de163e-76db-4121-9b48-2237aa5678bc"],"extraInfo":{}},"Link_content":{"nodeIds":["25252888-8e28-45d8-8a3b-ad1a5258218b","c6755457-80e7-462f-8cf9-7cdbd821d221"],"extraInfo":{}},"TabList_content":{"nodeIds":["ac8d1662-a882-4332-85a6-45c85ffa9f67","1ffc33b5-8173-4102-9298-7d91881a4a51"],"extraInfo":{}},"Badge_content":{"nodeIds":["9b70a1ac-4c22-4c0a-a701-7f3e7b8bd05d","daaadea3-3a03-42c6-8319-1a72177eba35"],"extraInfo":{}},"StatusPill_content":{"nodeIds":["4be146ef-8932-431b-be2d-bd3d0782dcb5","d9cf19cb-4c0a-4e6c-a414-ae0e29fe126b","0a390851-de64-4884-a94d-1dcddd53815b"],"extraInfo":{}},"Table_content":{"nodeIds":["f1fea9ea-0d47-4312-93d0-4db90a27c007","1dc3bb56-efad-49f4-9131-b7ff4e728e12"],"extraInfo":{}},"Code_content":{"nodeIds":["48d1d0bd-6c5a-4944-a153-b798fdc79af8","0fa965a5-7e53-4358-888c-77c3026207dd","0ae3f01b-e6f9-4e66-a4b5-65fc1f3a75a2"],"extraInfo":{}},"Text_content":{"nodeIds":["792bb702-bf11-43cd-841b-f6610248182f","c8113c3b-4764-460a-a3a2-32c6195795bf"],"extraInfo":{}},"about-druids_content":{"nodeIds":["71253a24-478d-41f8-b4cd-faf6a3bf94e5","488fc67d-619c-44aa-a973-304961900084"],"extraInfo":{}},"PageSpacingAndLayout_content":{"nodeIds":["ecc3d9f1-f8e5-4455-b196-429f6e7336a6","e8bdd98a-92b6-400a-bd86-a1958a440840"],"extraInfo":{}},"PageTypography_content":{"nodeIds":["6048a22f-f313-4a35-8cc8-9622b232e63c","8a63538d-9315-4545-9317-614fc8475c1d","367bf16f-809b-4865-a8e4-cdc3ef13857f","16488229-9e05-4e43-a3fa-4da80a771b8f"],"extraInfo":{}},"page-high-level-design-themes_content":{"nodeIds":["0b5a17b5-f24c-40ae-8d2a-f607b8fddaa2"],"extraInfo":{}},"PageDruidsPhilosophy_content":{"nodeIds":["8aee335e-de7c-4777-acd0-7a87b6f6d2d4"],"extraInfo":{}},"tips-and-tricks_content":{"nodeIds":["fa7c1929-a958-4bec-9768-b071861bdf55"],"extraInfo":{}}}}